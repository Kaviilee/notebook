<div id="javascript" class="content" style="display:none">
		<ul>
			<li>
				<h3>语法<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]基础</h4>
					<ul>
						<li><a href="">全局变量</a><span>
							x1 = 1;<br />
							var x2 = 2;<br />
							window.x3 = 3;<br />
							<a href="http://snandy.iteye.com/blog/720816">3种全局变量的异同</a>
						</span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
					</ul>					
					<h4>[<span>+</span>]运算</h4>
					<ul style="display:none;">
						<li><a href="">一元运算符</a><span>
							<h2>一元运算符</h2>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top">i++后置递增，++i前置递增，i--后置递减，--i前置递减，+i取正，-i取负</td>
								</tr>
								</tbody>
								</table>
								<div></div>
								</div>
								<ul>
									<li>只能操作一个值的运算符叫做一元运算符</li>
									<li>递增++和递减--、取正+、取负-</li>
									<li>递增递减中前置和后置的区别</li>
								</ul>
								<div>
								<blockquote>
								<div>在没有赋值操作， 前置和后置是一样的。 但在赋值操作时， 如果递增或递减运算符前置 ，
								那么前置的运算符会先累加或累减再赋值，如果是后置运算符则先赋值再累加或累减。</div>
								<div>var box = 100;
								var age = ++box; //age 值为 101
								var height = box++; //height 值为 100</div></blockquote>
								</div>
								<div>
								<ul>
									<li>非数值执行运算，会隐藏自动转型为数值（除+）</li>
								</ul>
								其他类型应用一元运算符的规则</div>
								<blockquote>
								<div>var box = '89'; box++; //90，数值字符串自动转换成数值</div>
								<div>var box = 'ab'; box++; //NaN，字符串包含非数值转成 NaN</div>
								<div>var box = false; box++; //1，false 转成数值是 0，累加就是 1</div>
								<div>var box = 2.3; box++; //3.3，直接加 1</div>
								<div>var box = { //1，不设置 toString 或 valueOf 即为 NaN</div>
								<div>toString : function() {</div>
								<div>return 1;</div>
								<div>}</div>
								<div>}; box++;</div></blockquote>
							</span></li>
						<li><a href="">算数运算符</a><span>
								<div><b><span style="font-size: small;">算术运算符</span></b></div>
										<div>
										<table width="100%" border="1" cellspacing="0" cellpadding="2">
										<tbody>
										<tr>
										<td valign="top"><span style="font-size: small;">+加法，-减法，*乘法，/除法，%求模</span></td>
										</tr>
										</tbody>
										</table>
										<div></div>
										</div>
										<ul>
											<li><span style="color: #e30000; font-size: small;"><b>加法操作中，数值字符串与数值运算，则改变为字符串串联，减法中，会继续自动转换数值进行运算</b></span></li>
											<li><span style="font-size: small;">加法操作中，非数值字符串与数值运算，会串联字符串，减法中，则会得到NaN</span></li>
											<li><span style="font-size: small;">加法操作中，数值+object类型=字符串（Num[object]），减法中，则会得到NaN</span></li>
											<li><span style="font-size: small;">乘法操作中，数值*非数值字符串或对象返回NaN，除法与求模同NaN</span></li>
										</ul>
										<div></div></span></li>
						<li><a href="">关系运算符</a><span><div><b><span style="font-size: small;">关系运算符 <span style="color: #e30000;">（返回一个布尔值）</span></span></b></div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">&gt;大于，&lt;小于，&gt;=大于等于，&lt;=小于等于，==相等，!=不等，===全等，!==不全等</span></td>
								</tr>
								</tbody>
								</table>
								<div></div>
								</div>
								<div>
								<ul>
									<li><span style="font-size: small;">两个操作数都是数值，则数值比较；</span></li>
									<li><span style="color: #0000ff; font-size: small;">两个操作数都是字符串，则比较两个字符串对应的字符编码值；</span></li>
									<li><span style="font-size: small;">两个操作数有一个是数值，则将另一个转换为数值，再进行数值比较；</span></li>
									<li><span style="font-size: small;">两个操作数有一个是对象，则先调用 valueOf()方法或 toString()方法，再用结果比较；</span></li>
									<li><span style="font-size: small;">不需要任何转换的情况下，null 和 undefined 是相等的；</span></li>
									<li><span style="font-size: small;">一个操作数是 NaN，则==返回 false，!=返回 true；并且 NaN 和自身不等；</span></li>
									<li><span style="font-size: small;">两个操作数都是对象，则比较他们是否是同一个对象，如果都指向同一个对象，则返回 true，否则返回 false。</span></li>
								</ul>
								</div>
								<blockquote>
								<div><span style="font-size: small;">var box = {} == {}; //false，比较的是他们的地址，每个新创建对象的</span></div>
								<div><span style="font-size: small;">引用地址都不同</span></div>
								<div><span style="font-size: small;">var age = {};</span></div>
								<div><span style="font-size: small;">var height = age;</span></div>
								<div><span style="font-size: small;">var box = age == height; </span><a><span style="font-size: small;">//true，引用地址一样，所以相等</span></a></div>
								<div><span style="font-size: small;"> </span></div></blockquote></span></li>
						<li><a href="">逻辑运算符</a><span>
								<div><span style="font-size: small;"><b>逻辑运算符</b><span style="color: #0000ff;">（通常用于布尔值的操作）</span></span></div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">&amp;&amp;逻辑与(AND)、||逻辑或(OR)、!逻辑非(NOT)。</span></td>
								</tr>
								</tbody>
								</table>
								<div><span style="font-size: small;"> </span></div>
								</div>
								<blockquote>
								<div><span style="font-size: small;"><span style="color: #e30000;">如果两边的操作数有一个操作数不是布尔值的情况下，逻辑与运算就不一定返回布尔值</span>，此时，遵循已下规则：</span></div>
								<div><span style="font-size: small;"> </span></div>
								<div><b><span style="font-size: small;">&amp;&amp;逻辑与</span></b></div></blockquote>
								<div>
								<ul>
									<li>
								<ul>
									<li><span style="font-size: small;">第一个操作数是对象，则返回第二个操作数；</span></li>
									<li><span style="font-size: small;">第二个操作数是对象，则第一个操作数返回 true， 才返回第二个操作数， 否则返回 false;</span></li>
									<li><span style="font-size: small;">有一个操作数是 null，则返回 null；</span></li>
									<li><span style="font-size: small;">有一个操作数是 undefined，则返回 undefined。</span></li>
								</ul>
								</li>
								</ul>
								</div>
								<blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = 对象 &amp;&amp; (5 &gt; 4); //true，返回第二个操作数</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = (5 &gt; 4) &amp;&amp; 对象; //[object Object]</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = (3 &gt; 4) &amp;&amp; 对象; //false</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = (5 &gt; 4) &amp;&amp; null; </span><a><span style="font-size: small;">//null</span></a></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;"> </span></div></blockquote>
								<div><b><span style="font-size: small;">||逻辑或</span></b></div></blockquote>
								<div>
								<ul>
									<li>
								<ul>
									<li><span style="font-size: small;">第一个操作数是对象，则返回第一个操作数</span></li>
									<li><span style="font-size: small;">第一个操作数的求值结果为 false，则返回第二个操作数；</span></li>
									<li><span style="font-size: small;">两个操作数都是对象，则返回第一个操作数；</span></li>
									<li><span style="font-size: small;">两个操作数都是 null，则返回 null；</span></li>
									<li><span style="font-size: small;">两个操作数都是 NaN，则返回 NaN；</span></li>
									<li><span style="font-size: small;">两个操作数都是 undefined，则返回 undefined；</span></li>
								</ul>
								</li>
								</ul>
								</div>
								<blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = 对象 || (5 &gt; 3); //[object Object]</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = (5 &gt; 3) || 对象; //true</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = 对象 1 || 对象 2; //[object Object]</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = null || null; //null</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = NaN || NaN; //NaN</span></div></blockquote>
								<blockquote>
								<div><span style="font-size: small;">var box = undefined || undefined; //undefined</span></div></blockquote>
								<div><span style="font-size: small;"> </span></div>
								<div><b><span style="font-size: small;">!逻辑非 </span></b></div>
								<div><span style="font-size: small;">逻辑非运算符可以用于任何值。 无论这个值是什么数据类型， 这个运算符都会<b><span style="color: #0000ff;">返回一个布尔值</span></b>。它的流程是：先将这个值转换成布尔值，然后取反。</span></div>
								<div><span style="font-size: small;">通常来说， 使用一个逻辑非运算符和两个逻辑非运算符可以得到相应的布尔值。</span></div></blockquote>
								<ul>
									<li>
								<ul>
									<li><span style="font-size: small;">操作数是一个对象，返回 false；</span></li>
									<li><span style="font-size: small;">操作数是一个空字符串，返回 true；</span></li>
									<li><span style="font-size: small;">操作数是一个非空字符串，返回 false；</span></li>
									<li><span style="font-size: small;">操作数是数值 0，返回 true；</span></li>
									<li><span style="font-size: small;">操作数是任意非 0 数值(包括 Infinity)，false；</span></li>
									<li><span style="font-size: small;">操作数是 null，返回 true；</span></li>
									<li><span style="font-size: small;">操作数是 NaN，返回 true；</span></li>
									<li><span style="font-size: small;">操作数是 undefined，返回 true；</span></li>
								</ul>
								</li>
								</ul>
								<div></div>
						</span></li>
						<li><a href="">其他运算符</a><span>
								<h2><span style="font-size: small;">赋值运算符</span></h2>
									<table width="100%" border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top"><span style="font-size: small;">乘/赋(*=)  除/赋(/=)  模/赋(%=)  加/赋(+=)  减/赋(-=)  左移/赋(&lt;&lt;=)  有符号右移/赋(&gt;&gt;=)  无符号有移/赋(&gt;&gt;&gt;=)</span></td>
									</tr>
									</tbody>
									</table>
									<div><span style="font-size: small;"> </span></div>
									<div>

									<hr />

									</div>
									<h2><span style="font-size: small;">位操作符</span></h2>
									<div>
									<table width="100%" border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top"><span style="font-size: small;">~按位非，&amp;按位与，|按位或，^按位异或，&lt;&lt;左移，&gt;&gt;有符号右移，&gt;&gt;&gt;无符号右移</span></td>
									</tr>
									</tbody>
									</table>
									<div><span style="font-size: small;">
									</span><span style="font-size: small;">
									</span></div>
									</div>
									<div>

									<hr />

									<span style="font-size: small;"> </span></div>
									<div><b><span style="font-size: small;">其他运算符</span></b></div>
									<div>
									<table width="100%" border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top"><span style="font-size: small;">+ 字符串运算符 、 ,逗号运算符 、三元运算符</span></td>
									</tr>
									</tbody>
									</table>
									<div><span style="font-size: small;"> </span></div>
									</div>
									<div><span style="font-size: small;">字符串运算符只有一个，即："+"。它的作用是将两个字符串相加。</span></div>
									<div><span style="font-size: small;">逗号运算符可以在一条语句中执行多个操作。</span></div>
									<div><span style="font-size: small;">三元条件运算符 a ? b : c</span></div>
						</span></li>
						<li><a href="">运算符优先级</a><span>
							<div><b><span style="font-size: small;">运算符优先级</span></b></div>
									<div><span style="font-size: small;"><span>如果没有使用<strong>圆括号强制优先级</strong>，我们必须遵循以下顺序：
									</span><strong>算术操作符 → 比较操作符 → 逻辑操作符 → "="赋值符号</strong></span></div>
									<div>
									<table width="100%" border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">运算符</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">描述</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">. [] () </span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">对象成员存取、数组下标、函数调用等</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">++ -- ~ ! delete new typeof void</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">一元运算符</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">* / %</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">乘法、除法、去模</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">+ - +</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">加法、减法、字符串连接</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">&lt;&lt; &gt;&gt; &gt;&gt;&gt;</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">移位</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">&lt; &lt;= &gt; &gt;= instanceof </span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">关系比较、检测类实例</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">== != === !==</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">恒等(全等)</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">&amp; </span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">位与</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">^ </span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">位异或</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">|</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">位或</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">&amp;&amp;</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">逻辑与</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">||</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">逻辑或</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">?:</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">三元条件</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">= x=</span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">赋值、运算赋值</span></div></td>
									</tr>
									<tr>
									<td valign="top">
									<div><span style="font-size: small;">, </span></div></td>
									<td valign="top">
									<div><span style="font-size: small;">多重赋值、数组元素</span></div></td>
									</tr>
									</tbody>
									</table>
									</div>
						</span></li>
					</ul>
					<h4>[<span>-</span>]流程</h4>
					<ul>
						<li><a href="">Statement</a><span>
								<table>
									<tbody>
									<tr>
									<td width="189"><span style="font-size: small;">类型</span></td>
									<td width="189"><span style="font-size: small;">子类型</span></td>
									<td width="189"><span style="font-size: small;">语法</span></td>
									</tr>
									<tr>
									<td rowspan="2" width="189"><span style="font-size: small;">声明语句</span></td>
									<td width="189"><span style="font-size: small;">变量声明语句</span></td>
									<td width="189"><span style="font-size: small;">var box = 100;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">标签声明语句</span></td>
									<td width="189"><span style="font-size: small;">label : box;</span></td>
									</tr>
									<tr>
									<td rowspan="4" width="189"><span style="font-size: small;">表达式语句</span></td>
									<td width="189"><span style="font-size: small;">变量赋值语句</span></td>
									<td width="189"><span style="font-size: small;">box = 100;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">函数调用语句</span></td>
									<td width="189"><span style="font-size: small;">box();</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">属性赋值语句</span></td>
									<td width="189"><span style="font-size: small;">box.property = 100;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">方法调用语句</span></td>
									<td width="189"><span style="font-size: small;">box.method();</span></td>
									</tr>
									<tr>
									<td rowspan="2" width="189"><span style="font-size: small;">分支语句</span></td>
									<td width="189"><span style="font-size: small;">条件分支语句</span></td>
									<td width="189"><span style="font-size: small;">if () {} else {}</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">多重分支语句</span></td>
									<td width="189"><span style="font-size: small;">switch () { case n : ...};</span></td>
									</tr>
									<tr>
									<td rowspan="4" width="189"><span style="font-size: small;">循环语句</span></td>
									<td width="189"><span style="font-size: small;">for </span></td>
									<td width="189"><span style="font-size: small;">for (;;;) {}</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">for ... in</span></td>
									<td width="189"><span style="font-size: small;">for ( x in x) {}</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">while</span></td>
									<td width="189"><span style="font-size: small;">while () {};</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">do ... while</span></td>
									<td width="189"><span style="font-size: small;">do {} while ();</span></td>
									</tr>
									<tr>
									<td rowspan="5" width="189"><span style="font-size: small;">控制结构</span></td>
									<td width="189"><span style="font-size: small;">继续执行子句</span></td>
									<td width="189"><span style="font-size: small;">continue ;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">终端执行子句</span></td>
									<td width="189"><span style="font-size: small;">break ;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">函数返回子句</span></td>
									<td width="189"><span style="font-size: small;">return ;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">异常触发子句</span></td>
									<td width="189"><span style="font-size: small;">throw ;</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">异常捕获与处理</span></td>
									<td width="189"><span style="font-size: small;">try {} catch () {} finally {}</span></td>
									</tr>
									<tr>
									<td width="189"><span style="font-size: small;">其他</span></td>
									<td width="189"><span style="font-size: small;">空语句</span></td>
									<td width="189"><span style="font-size: small;">;</span></td>
									</tr>
									<tr>
									<td width="189">&nbsp;</td>
									<td width="189"><span style="font-size: small;">with语句</span></td>
									<td width="189"><span style="font-size: small;">with () {}</span></td>
									</tr>
									</tbody>
									</table></span></li>
						<li><a href="">Switch</a><span><br />
							1.<a href="http://www.qttc.net/201207151.html">switch中的case为全等判断</a>
							2.多个case使用同一个执行块应写为case 1: case2: ...
						</span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
					</ul>
					<h4>[<span>-</span>]其他</h4>
					<ul>
						<li><a href="">Global Functions</a><span>
								<div>
									<div>全局函数
									<table>
									<tbody>
									<tr>
									<th align="left" width="32%">函数</th>
									<th align="left" width="68%">描述</th>
									</tr>
									<tr>
									<td>decodeURI()</td>
									<td>解码某个编码的 URI。</td>
									</tr>
									<tr>
									<td>decodeURIComponent()</td>
									<td>解码一个编码的 URI 组件。</td>
									</tr>
									<tr>
									<td>encodeURI()</td>
									<td>把字符串编码为 URI。</td>
									</tr>
									<tr>
									<td>encodeURIComponent()</td>
									<td>把字符串编码为 URI 组件。</td>
									</tr>
									<tr>
									<td>escape()</td>
									<td>对字符串进行编码。</td>
									</tr>
									<tr>
									<td>unescape()</td>
									<td>对由 escape() 编码的字符串进行解码。</td>
									</tr>
									<tr>
									<td>isFinite()</td>
									<td>检查某个值是否为有穷大的数。</td>
									</tr>
									<tr>
									<td>isNaN()</td>
									<td>检查某个值是否是数字。</td>
									</tr>
									<tr>
									<td>Number()</td>
									<td>把对象的值转换为数字。</td>
									</tr>
									<tr>
									<td>parseFloat()</td>
									<td>解析一个字符串并返回一个浮点数。</td>
									</tr>
									<tr>
									<td>parseInt()</td>
									<td>解析一个字符串并返回一个整数。</td>
									</tr>
									<tr>
									<td>String()</td>
									<td>把对象的值转换为字符串。
									.toString / valueOf除undefined,null</td>
									</tr>
									<tr>
									<td>eval()</td>
									<td>计算 JavaScript 字符串，并把它作为脚本代码来执行。</td>
									</tr>
									</tbody>
									</table>
									</div>
									</div></span></li>
						<li><a href="">javascript:void(0)</a></li>
						<li><a href="">补充说明</a>
								<span>文件载入 
								<br>1.尽量使用外置文件，且放置在末尾
								<br>2.defer延迟执行，async异步加载不影响其他加载【但不要含文档修改】
								<br>3.页内时引入闭合标签需要转义，页内时以防低版本的解析问题，用cdata片段包含
								<input value="<![CDATA[ --- ]]>">  </input>
								<br>4. noscript 脚本禁用时的替代提醒 /noscript
								<br> 
								<br>语法细节
								<br>1.在函数内部定义的变量退出函数无效，在函数内部不用var声明的变量，则为全局变量
								<br>2.同时一次性定义多个变量，用逗号分隔，不需要再写var
								<br>  var i=0;var j=1;   ==>    var i=0,j=0
								</span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>函数<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]内部属性/对象</h4>
					<ul>
						<li><a href="">arguments</a><span>函数的参数对象
							<div><span style="font-size: small;"><b>argument<span style="color: #e30000;">s</span>对象</b> （类数组对象，但检测不是数组类型）</span></div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">arguments[0]</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">第一个参数名字</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">arguments.length</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">参数的个数</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">arguments.callee</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">主体函数本身，拥有这个参数对象的函数</span></div></td>
								</tr>
								</tbody>
								</table>
								<div><strong> </strong></div>
								</div></span></li>
						<li><a href="">this</a><span>函数执行的环境对象,函数里的函数中的this为window,闭包中调用父级函数指定var that = this</span></li>
						<li><a href="">caller</a><span>调用当前函数的函数</span></li>
						<li><a href="">length</a><span>函数希望接收的命名参数的个数</span></li>
						<li><a href="">prototype</a><span>原型属性，不可枚举</span></li>
					</ul>
					<h4>[<span>-</span>]方法</h4>
					<ul>
						<li>fn<a href="">.apply</a>(obj,arg)<span>func.apply(作用域，[传递参数]/arguments)</span></li>
						<li>fn<a href="">.call</a>(obj,arg)<span>func.call(作用域，[传递参数]),apply与call均让函数作用于特定作用域<br>call必须明确传入每一个参数</span></li>
						<li>fn<a href="">.bind</a>(obj)<span>bind(作用目标) 创建一个作用于某目标的函数实例</span></li>
					</ul>
					<h4>[<span>-</span>]其他</h4>
					<ul>
						<li><a href="">(function(){})()</a><span>匿名函数自执行,可以初始化各项值,但如果需要的变量并不是一开始初始化有的,则不可以,否则无法读取</span></li>
					</ul>
				</div>
			</li>	
			<li>
				<h3>面向对象<span>+</span></h3>
				<div>
					<h4>[<span>-</span>]基础概念</h4>
					<ul>
						<li><a href="">对象创建方法</a><span>
							当对象的属性必须为变量时，则只能使用方括号！
							<br>in遍历访问对象的属性/属性值
							<br>for(var property in obj) {
							<br>console.log(property);  //遍历对象的全部属性
							<br>console.log(obj[property]); //遍历所有对象的值
							<br>} 
							<div>
								<div>创建对象</div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top">var obj = new Object()
								obj.key = value
								obj.key = function(){}</td>
								<td valign="top">new 运算符</td>
								</tr>
								<tr>
								<td valign="top">var obj ={
								key:value,
								key:function(){}
								}</td>
								<td valign="top">字面量</td>
								</tr>
								</tbody>
								</table>
								</div>
								<div>
								<ol>
									<li>new可以省略，字面量方式中属性key可以有或去掉引号</li>
									<li>对象属性间，不要忘记加逗号分隔</li>
									<li>函数应用于对象时，对象名不需要加引号  function(obj){}</li>
								</ol>
								</div>
								</div>
								<div><b><span style="font-size: small;">对象属性</span></b></div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">obj.key</span></td>
								<td valign="top"><span style="font-size: small;">点表示法</span></td>
								</tr>
								<tr>
								<td valign="top"><span style="font-size: small;">obj['key']</span></td>
								<td valign="top"><span style="font-size: small;">中括号表示法</span></td>
								</tr>
								</tbody>
								</table>
								</div>
								<div>
								<ol>
									<li><span style="color: #e30000; font-size: small;"><strong>中括号表示法时，key需要加上引号法</strong></span></li>
									<li><b><span style="color: #e30000; font-size: small;">当属性含空格、关键字或为变量时，只能用中括号表示</span></b></li>
									<li><span style="color: #e30000; font-size: small;"><b>删除属性delete obj.key</b></span></li>
								</ol>
								</div>
						</span></li>
						<li><a href="">对象内部属性</a><span>
							<div>
							<div>
							<div>
							<div>
							<div>
							<table width="88%" border="1" cellspacing="0" cellpadding="2">
							<tbody>
							<tr>
							<td valign="top"><span style="font-size: small;">数据属性</span></td>
							<td valign="top"><span style="font-size: small;">configurable 能否删除或修改操作 true/false</span></td>
							</tr>
							<tr>
							<td valign="top"></td>
							<td valign="top"><span style="font-size: small;">enumerable 能否通过for-in枚举遍历 true/false</span></td>
							</tr>
							<tr>
							<td valign="top"></td>
							<td valign="top"><span style="font-size: small;">writable 属性值是否可写 true/false</span></td>
							</tr>
							<tr>
							<td valign="top"></td>
							<td valign="top"><span style="font-size: small;">value 包含属性的数据值 undefined</span></td>
							</tr>
							<tr>
							<td valign="top"><span style="font-size: small;">访问属性</span></td>
							<td valign="top"><span style="font-size: small;">configurable 能否删除或修改操作 true/false</span></td>
							</tr>
							<tr>
							<td valign="top"></td>
							<td valign="top"><span style="font-size: small;">enumerable 能否通过for-in枚举遍历 true/false</span></td>
							</tr>
							<tr>
							<td valign="top"></td>
							<td valign="top"><span style="font-size: small;">get: 读取属性时调用的函数 undefined</span></td>
							</tr>
							<tr>
							<td valign="top"></td>
							<td valign="top"><span style="font-size: small;">set: 写入属性时调用的函数 undefined</span></td>
							</tr>
							<tr>
							<td valign="top"><span style="font-size: small;">设置某类属性</span></td>
							<td valign="top"><strong><span style="font-size: small;">Object.defineProperty(对象名,属性名,{设置块})</span></strong></td>
							</tr>
							<tr>
							<td valign="top"><span style="font-size: small;">设置两类属性</span></td>
							<td valign="top">
							<div><strong><span style="font-size: small;">Object.defineProperties(对象名,{</span></strong></div>
							<div><strong><span style="font-size: small;">属性名:{设置块},</span></strong></div>
							<div><strong><span style="font-size: small;">})</span></strong></div></td>
							</tr>
							</tbody>
							</table>
							</div>
							<div><span style="font-size: small;">configurable，enumerable，writable等默认属性为true，<strong>一旦启用设置函数即使没定义也全部设置为false.</strong></span></div>
							</div>
							</div>
							</div>
							</div>
						</span></li>
						<li><a href="">函数创建方法</a><span>
						</span></li>
						<li><a href="">函数特征说明</a><span>
						</span></li>
						<li><a href="">变量与作用域</a><span>
						</span></li>
						<li><a href="">匿名函数与块级作用域</a><span>
						</span></li>
						<li><a href="">闭包与内存泄露</a><span>
						</span></li>
						<li><a href="">私有变量与模块模式</a></li>
						<li><a href="">构造方法</a></li>
						<li><a href="">继承方法</a></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>参考资料<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]参考资料</h4>
					<ul>
						<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript">MDN</a></li>
						<li><a href="http://stackoverflow.com/questions/tagged/javascript">StackOverflow</a></li>
						<li><a href=""></a></li>
					</ul>
					<h4>[<span>-</span>]相关书籍</h4>
					<ul>
						<li><a href="http://www.w3cfuns.com/article-5597171-1-1.html">Javascript高级程序设计</a></li>
						<li><a href="http://www.w3cfuns.com/article-5595674-1-1.html">Javascript权威指南</a></li>
						<li><a href="">Javascript编程精解</a></li>
					</ul>
				</div>
			</li>
		</ul>
		<ul>
			<li>
				<h3>数据类型<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]类型检测</h4>
					<ul>
						<li><a href="">Javscript data types</a><span>
							JS数据类型:
							<br>Undefined Null Boolean Number String Object 
							<br>其中Array,function都属于Object
							<br>一切皆为对象，new Object / new Boolean() / new Number() / new String() / new <br>Array()  / new Function() / new 构造函数名()</span></li>
						<li><a href="">typeof</a> value
								<span>typeof数据类型测试返回值（返回的是字符串
									<table border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top">undefined</td>
									<td valign="top">未定义</td>
									</tr>
									<tr>
									<td valign="top">boolean</td>
									<td valign="top">布尔值</td>
									</tr>
									<tr>
									<td valign="top">string</td>
									<td valign="top">字符串/JSON</td>
									</tr>
									<tr>
									<td valign="top">number</td>
									<td valign="top">数值</td>
									</tr>
									<tr>
									<td valign="top">object</td>
									<td valign="top">对象/null</td>
									</tr>
									<tr>
									<td valign="top">function</td>
									<td valign="top">function</td>
									</tr>
									</tbody>
									</table>
									<ol>
										<li>
									不存在的变量与未声明的变量typeof检测均为undefined，但两者其实不同，故建议总是初始化。</li>
										<li>
									Null 类型是一个只有一个值的数据类型，即特殊的值 null。它表示一个空对象引用(指针)，而 typeof 操作符检测 null 会返回 object。如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null。这样， 当检查 null 值就知道是否已经变量是否已经分配了对象引用了。</li>
										<li>
									undefined 是派生自 null 的，因此 ECMA-262 规定对它们的相等性测试返回 true。alert(undefined == null);但typeof数据类型不等。</li>
									</ol>
								</span></li>
						<li>value <a href="">instanceof</a> types
								<span>instanceof引用类型数据测试
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top">value instanceof Array</td>
									<td valign="top">数组</td>
									</tr>
									<tr>
									<td valign="top">value instanceof Obj</td>
									<td valign="top">构造函数实例</td>
									</tr>
									<tr>
									<td valign="top">
									<div>value instanceof Date</div></td>
									<td valign="top">日期时间</td>
									</tr>
									<tr>
									<td valign="top">value instanceof RegExp</td>
									<td valign="top">正则表达式</td>
									</tr>
									<tr>
									<td valign="top">
									<div>value instanceof Math</div></td>
									<td valign="top">数学</td>
									</tr>
									</tbody>
									</table></span></li>
						<li><a href="">isNaN</a>(value)<span>是否为非数值,转换后非数值为true，数值false
							<br>1. 非数值执行运算，会隐藏自动转型（除+）
							<br>2. 加法操作中，数值字符串与数值运算，则改变为字符串串联，减法中，会继续自动转换数值进行运算</span></li>
						<li><a href="">isFinite</a>(value)<span>判断是否为无穷值超出计算范围</span></li>
						<li><a href="">Array.isArray</a>(value)<span>检测是否为数组（EC5）</span></li>
					</ul>
					<h4>[<span>-</span>]类型转换</h4>
					<ul>
						<li><a href="">Boolean</a>(value)
							<span>Boolean(value)布尔转换规则 （控制流会自动转换）
									<table border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top">Boolean(value)</td>
									<td valign="top">true</td>
									<td valign="top">false</td>
									</tr>
									<tr>
									<td valign="top">undefined</td>
									<td valign="top"></td>
									<td valign="top">undefined</td>
									</tr>
									<tr>
									<td valign="top">boolean</td>
									<td valign="top">true</td>
									<td valign="top">false</td>
									</tr>
									<tr>
									<td valign="top">string</td>
									<td valign="top">非空</td>
									<td valign="top">空</td>
									</tr>
									<tr>
									<td valign="top">number</td>
									<td valign="top">非零数值</td>
									<td valign="top">0与NaN</td>
									</tr>
									<tr>
									<td valign="top">object</td>
									<td valign="top">对象（包括空的对象）</td>
									<td valign="top">null（空对象）</td>
									</tr>
									</tbody>
									</table>
								</span></li>
						<li><a href="">Number</a>(value)<span>
								用于任何数据类型
								<br>number=number
								<br>boolean=1 / 0
								<br>undefined=NaN
								<br>null=0
								<br>空字符串=0
								<br>非数值(string+/object)=NaN</span></li>
						<li><a href="">parseInt</a>(str)<span>
								用于字符串，自动判定进制
								<br>忽略空格，空字符串=NaN
								<br>第一个非空字符不是数值或负号=NaN
								<br>第一个非空字符是数值，遇到非数值时停止解析=number</span></li>
						<li><a href="">parseFloat</a>(str)<span>
							用于字符串
							<br>第一个小数点有效，第二个无效</span></li>
						<li>all.<a href="">toString</a>([16])<span>所有类型（除Null,undefined）,数值转成字符串的时候，可以传递进制参数，默认10进制</span></li>
						<li><a href="">String</a>(value)
								<span>不确定null和undefined时,返回null和undefined</span></li>
						<li>str.<a href="">split</a>(符号,num)
								<span>字符串=>数组，符号+次数，多次分割，子项分割</span></li>
						<li>arr.<a href="">join</a>(符号)
								<span>数组=>字符串，把数组的所有元素放入一个字符串，元素通过指定的分隔符进行串联。</span></li>
						<li><a href="">JSON.parse</a>(json)<span>JSON=>JS对象</span></li>
						<li><a href="">JSON.stringify</a>(obj)<span>JS对象=>JSON</span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>数字<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]数字</h4>
					<ul>
						<li><a href="">Finity</a><span>
							Finity isFinite(---) 判断是否为无穷
								<table border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top">
								最大值</td>
								<td valign="top">
								Number.MAX_VALUE 1.79e+308</td>
								</tr>
								<tr>
								<td valign="top">
								<div>最小值</div></td>
								<td valign="top">
								Number.MIN_VALUE 5e-324</td>
								</tr>
								<tr>
								<td valign="top">
								<div>正无穷</div></td>
								<td valign="top">
								Number.POSITIVE_INFINITY</td>
								</tr>
								<tr>
								<td valign="top">
								<div>负无穷</div></td>
								<td valign="top">
								Number.NEGATIVE_INFINITY</td>
								</tr>
								</tbody>
								</table>
								<ul>
									<li>科学计数法，浮点数+e+10的指数</li>
									<li>0/0=NaN，正数/0=正无穷，负数/0=负无穷</li>
									<li>正无穷+正无穷=正无穷，负无穷+负无穷=负无穷，正无穷+负无穷=NaN</li>
									<li>无穷乘法操作得到无穷，无穷除法与求余操作得到NaN</li>
								</ul>
						</span></li>
						<li><a href="">NaN</a><span>
								NaN isNaN(---) 判断是否为NaN
									<table border="1" cellspacing="0" cellpadding="2">
									<tbody>
									<tr>
									<td valign="top">Number.NaN</td>
									<td valign="top">
									得到 NaN 值</td>
									</tr>
									<tr>
									<td valign="top">
									var box = 0 / 0; //NaN
									var box = 12 / 0; //Infinity
									var box = 12 / 0 * 0; //NaN</td>
									<td valign="top">
									任何与 NaN 进行运算的结果均为 NaN</td>
									</tr>
									<tr>
									<td valign="top">alert(NaN == NaN) //false</td>
									<td valign="top">NaN 与自身不相等(NaN 不与任何值相等)</td>
									</tr>
									</tbody>
									</table>
									<ul>
										<li>isNaN()函数也适用于对象。</li>
										<li>在调用 isNaN()函数过程中，首先会调用 valueOf()方法， 然后确定返回值是否能够转换成数值。如果不能，则基于这个返回值再调用 toString()方法，再测试返回值。</li>
										<li>只要NaN参与的运算均为NaN</li>
									</ul>
						</span></li>
						<li><a href="">toFixed(N)</a><span>把数字转换为字符串，结果的小数点后有指定位数的数字。</span></li>
						<li><a href="">toString(进制)</a><span>把数字转换为字符串，使用指定的基数。</span></li>
						<li><a href="">toLocaleString()</a><span>根据本地数字格式转换为字符串 1,000.789</span></li>
						<li><a href="">toExponential(N)</a><span>把对象的值转换为指数计数法。N小数点后位数</span></li>
						<li><a href="">toPrecision(N)</a><span>把数字格式化为指定的长度。N为显示位数，自动选择toFixed() toExponential(N)两者之一。</span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>数学<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]Math</h4>
					<ul>
						<li><a href="">random()</a><span>
							1.随机颜色16进制：Math.floor( Math.random() * 16777215 ).toString( 16 )
							2.2个值之间的随机值：function random(min,max){return min + (max-min)*Math.random();}
						</span></li>
						<li><a href="">ceil()</a></li>
						<li><a href="">floor()</a></li>
						<li><a href="">round()</a></li>
						<li><a href="">sqrt()</a></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>日期<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]Date</h4>
					<ul>
						<li><a href="">getFullYear()</a></li>
						<li><a href="">getMonth()</a>[0-11]</li>
						<li><a href="">getDate()</a></li>
						<li><a href="">getDay()</a>[0-6]</li>
						<li><a href="">getHours()</a></li>
						<li><a href="">getMinutes()</a></li>
						<li><a href="">getSeconds()</a></li>
						<li><a href="">getMilliseconds()</a></li>
						<li><a href="">getTime()</a></li>
						<li><a href="">parse()</a></li>
						<li><a href="">toString</a></li>
						<li><a href="">toUTCString</a></li>
					</ul>
				</div>
			</li>
		</ul>
		<ul>
			<li>
				<h3>字符串<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]字符位置</h4>
					<ul>
						<li><a href="">charAt(N)</a><span>返回索引上的字符</span></li>
						<li><a href="">charCodeAt(N)</a><span>返回在指定的位置的字符的 Unicode 编码</span></li>
						<li><a href="">indexOf("A",n)</a><span>返回索引位置，正向查找字符所在的索引</span></li>
						<li><a href="">lastIndexOf("A",n)</a><span>返回索引位置，逆向查找</span></li>
					</ul>
					<h4>[<span>-</span>]位置筛选</h4>
					<ul>
						<li><a href="">slice / substring(n,m)</a><span>显示索引范围内的字符串，返回新字符串，包含起始不包含结尾</span></li>
						<li><a href="">substr(n,x)</a><span>显示指定索引起范围内的字符串，返回新字符串
							<br>slice / substring / substr 负数
							<br>单个负数：
							<br>alert(box.slice(-3)); //Lee，6+(-3)=3 位开始 length-n
							<br>alert(box.substring(-3)); //Mr.Lee 负数返回全部 返回全部
							<br>alert(box.substr(-3)); //Lee，6+(-3)=3 位开始 length-n
							<br>第二位负数：
							<br>alert(box.slice(3, -1)); //Le 6+(-1)=5, (3,5) a,length-n
							<br>alert(box.substring(3, -1)); //Mr. 第二参为负，直接转 0，并且方法会把较小的数字提前，(0,3) a,0
							<br>alert(box.substr(3, -1)); //'' 第二参数为负，直接转 0 ，(3,0) a,0
							</span></li>
					</ul>
					<h4>[<span>-</span>]匹配替换</h4>
					<ul>
						<li><a href="">match(正则/匹配值)</a><span>返回数组，没找到则返回null，正则识别全局</span></li>
						<li><a href="">search(正则/匹配值)</a><span>返回起始的索引，没找到则返回-1，始终从头开始找，找到一个即返回，正则无需全局设置 strt </span></li>
						<li><a href="">replace(正则/匹配值,"替换目标") </a><span>返回新字符串对象，识别正则全局，function可内含一个switch控制流</span></li>
					</ul>
					<h4>[<span>-</span>]串联分割</h4>
					<ul>
						<li><a href="">concat()</a><span>返回新字符串，串联</span></li>
						<li><a href="">split(*/正则,N)</a><span>返回数组，把字符串按指定符号或正则分割为字符串数组</span></li>
					</ul>
					<h4>[<span>-</span>]其他方法</h4>
					<ul>
						<li><a href="">trim()</a><span>返回新字符串，删除前置与后置空格</span></li>
						<li><a href="">toUpperCase()</a><span>返回新字符串，转换大写 toLocaleUpperCase()</span></li>
						<li><a href="">toLowerCase()</a><span>返回新字符串，转换小写 toLocaleLowerCase()  </span></li>
						<li><a href="">localeCompare()</a><span>大写小写，在之后（大于），返回1，在之前（小于），返回-1，相等，返回0</span></li>
						<li><a href="">String.fromCharCode(编码)</a><span>返回编码转回的字符串</span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>正则表达式<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]RegEXP</h4>
					<ul>
						<li><a href="">test()</a><span>在字符串中测试模式匹配，返回 true 或 false</span></li>
						<li><a href="">exec()</a><span>在字符串中执行匹配搜索，返回结果数组或null</span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>JSON<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]JSON</h4>
					<ul>
						<li><a href="">JSON概念</a><span>
							概念：
							<br />它是一种表示结构化数据的形式，JSON是一个格式化的字符串，文件格式后缀为.json
							<br /><br />语法：
							<br />简单值：字符串、数值、布尔值、null，不支持undefined
							<br />对象：一组无序的键值对
							<br />数组：一组有序的值的列表，可以通过索引来访问
							<br /><br />JSON与JS的区别：
							<br />JSON字符串必须使用双引号（单引号会导致语法错误），且对象的属性必须加双引号
							<br />在JS中直接引入一段JSON数据应该用单引号将其括起来，因为它其实代表一个字符串
							<br />如：'{"name" : "Lee","age" : 100}'
							<br />JSON数组与对象比普通JS少了分号与赋值，其本身表示的是字符串
						</span></li>
						<li><a href="">eval</a>('json_str')<span>
							<br />方法一：eval('json_str')
							<br />方法二：JSON对象内置方法(ECMA5)
							<br />*说明：IE7及IE7-需要引用库文件 https://github.com/douglascrockford/JSON-js/
							<br /><textarea name="" id="" cols="30" rows="10"><!--[if lte IE 7]> json2.js <![endif]--></textarea>
						</span></li>
						<li><a href="">JSON.parse</a>('json_str')<span>
							解析（JSON>JS）：把JSON字符串解析为原生JS值
							<br /><textarea name="" id="" cols="60" rows="10">
								JSON.parse('json_str',[还原函数])
								var box = '[{"name" : "a","age" : 1},{"name" : "b","age" : 2}]';
								var json = JSON.parse(box, function (key, value) {
								if (key == 'name') {
								return 'Mr. ' + value;
								} else {
								return value;
								}
								});
								alert(json[0].name);
							</textarea>
						</span></li>
						<li><a href="">JSON.stringify</a>(js_obj)<span>
							转换（JS>JSON）把JS对象序列化为JSON字符串
							<br />JSON.stringify(js_obj,[过滤函数/数组],[缩进])   
							<br />过滤器与缩进为可选 ，当只保留缩进但不过滤时，将过滤器设置为null
							<br />1. 过滤器数组：指定需要的键
							<br /><textarea name="" id="" cols="60" rows="10">
								var box = [{name : 'a', age : 1, height : 177},{name : 'b', age : 2, height : 188}];
								var json = JSON.stringify(box, ['name', 'age'] , 4);
								alert(json);
							</textarea>
							<br />2. 过滤函数：过滤函数与还原函数都接受两个参数，即键和值，都需要返回一个值
							<br /><textarea name="" id="" cols="60" rows="10">
								var box = [{name : 'a', age : 1, height : 177},{name : 'b', age : 2, height : 188}];
								var json = JSON.stringify(box, function (key, value) {
								switch (key) {
								case 'name' :
								return 'Mr. ' + value;
								case 'age' :
								return value + '岁';
								default :
								return value;
								}
								}, 4);
								alert(json);
							</textarea>
							<br />3. 缩进：可以为数字（空格）或指定符号
						</span></li>
						<li><a href="">toJSON()</a><span>
						   JS对象中添加toJSON()方法，自定义过滤一些数据<br />
							<textarea name="" id="" cols="60" rows="10">
								var box = [{name : 'a', age : 1, height : 177, toJSON : function () {
								return this.name;
								}},{name : 'b',age : 2, height : 188, toJSON : function () {
								return this.name;
								}}];
							</textarea>
						</span></li>
						<li><a href="">执行优先级</a><span>
							执行优先级：toJSON() --> 过滤参数 -->  标准序列化 -->  缩进
							<br />如在toJSON中已被过滤的键值则就算过滤参数中仍有设置也已无效
						</span></li>
						<li><a href=""></a><span></span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>Ajax<span>+</span></h3>
				<div style="display:none">
					<!-- <h4>[<span>-</span>]类型检测</h4>
					<ul>
						<li></li>
					</ul>
					<h4>[<span>-</span>]类型转换</h4>
					<ul>
						<li></li>
					</ul> -->
				</div>
			</li>
		</ul>
		<ul>
			<li>
			<h3>数组<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]基本概念</h4>
					<ul>
						<li><a href="">创建方法</a><span><strong><span style="font-size: small;">创建方式</span></strong>
								<div>
								<div>
								<table width="88%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">构造函数</span></td>
								<td valign="top">
								<div><span style="font-size: small;">var arr = new Array();</span></div>
								<div><span style="font-size: small;">arr[0]=value<strong>;</strong> </span></div>
								<div>
								<pre xml:space="preserve"></pre>
								<div><span style="font-size: small;">var arr = new Array(<em>element0</em>, <em>element1</em>, ..., <em>elementn</em>);</span></div>
								</div>
								<div><span style="font-size: small;">var arr = new Array(<em>size</em>);  [size=数组项目的个数,只写1位,且必须是数字]</span></div></td>
								</tr>
								<tr>
								<td valign="top"><span style="font-size: small;">字面量</span></td>
								<td valign="top"><span style="font-size: small;">var arr = [66,80,90,77,59]</span></td>
								</tr>
								</tbody>
								</table>
								</div>
								<div><span style="font-size: small;"> </span></div>
								<div>
								<div><span style="font-size: small;"><strong>注意：</strong><br clear="none" />1. ECMAScript中的数组每个元素可以保存任何类型</span></div>
								<div><span style="font-size: small;">2. ECMAScript 中数组的大小也是可以调整的。</span></div>
								<div><span style="font-size: small;">3. var arr = new Array(<em>10</em>)  不等于 var arr = [10]</span></div>
								</div>
								</div></span></li>
						<li><a href="">.length</a><span><div><b><span style="font-size: small;">数组属性·长度Length</span></b></div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">str.length</span></td>
								<td valign="top"><span style="font-size: small;">字符串长度</span></td>
								</tr>
								<tr>
								<td valign="top"><b><span style="font-size: small;">arr.length</span></b></td>
								<td valign="top"><span style="font-size: small;">数组长度</span></td>
								</tr>
								<tr>
								<td valign="top"><span style="font-size: small;">function.length</span></td>
								<td valign="top"><span style="font-size: small;">参数长度/个数</span></td>
								</tr>
								<tr>
								<td valign="top"><span style="font-size: small;">object &amp; number类型无length</span></td>
								<td valign="top"></td>
								</tr>
								</tbody>
								</table>
								<div><span style="font-size: small;"> </span></div>
								</div>
								<div><span style="font-size: small;"> </span></div></span></li>
						<li><a href="">[index]</a><span><div><b><span style="font-size: small;">数组下标</span></b></div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">var  box =[];</span></div>
								<div><span style="font-size: small;">box['name']=iRuxu;</span></div>
								<div><span style="font-size: small;">alert(box);  </span><a><span style="font-size: small;">//空</span></a></div>
								<div><span style="font-size: small;">alert(box['name']); </span><a><span style="font-size: small;">//iRuxu</span></a></div>
								<div><span style="font-size: small;">alert(box[0]); </span><a><span style="font-size: small;">//iRuxu</span></a><span style="font-size: small;"> </span></div></td>
								</tr>
								</tbody>
								</table>
								<div><span style="font-size: small;">如果是字符串下标，不会体现在数组上，需要指定下标键打印，如果是索引下标，则可以直接打印</span></div>
								<div><span style="font-size: small;"> </span></div>
								<div><b><span style="font-size: small;">数组方法I</span></b></div></span></li>
					</ul>
					<h4>[<span>-</span>]添加移除</h4>
					<ul>
						<li><a href="">push()</a><span>栈：后方添加项目，返回总数。</span></li>
						<li><a href="">pop()</a><span>栈：后方移除项目，返回移除项。</span></li>
						<li><a href="">unshift()</a><span>队列：前方添加项目，返回总数。</span></li>
						<li><a href="">shift()</a><span>队列：前方移除项目，返回移除项。</span></li>
					</ul>
					<h4>[<span>-</span>]串联分割</h4>
					<ul>
						<li><a href="">concat()</a><span>连接两个或更多的数组，并返回结果，返回新数组。（合并数组->新）</span></li>
						<li><a href="">slice</a>(n,m)<span>从某个已有的数组返回选定的元素，返回新数组。（过滤数组->新）
								<br>当含1个参数时，起始到末尾全部：slice(1)——索引为1开始到末尾
								<br>当含2个参数时，起始到末尾-1：slice(1,4)——索引为1~3，不包含4</span></li>
						<li><a href="">splice</a>(n,m,[val])<span>
									方法向/从数组中添加/删除/替换项目，然后返回被删除的项目。
									<br>注释：请注意，splice() 方法与 slice() 方法的作用是不同的，splice()方法会直接对数组进行修改。
									<br>第1个参数为起始索引位置，第2个参数为删除的数目，当数目为0时则为添加项目，第3个参数开始为添加新的项目（如只删除无此参数）。
									<br>splice(0,1)——位置0删除1项
									<br>splice(2,0,arr1,arr2) ——位置2开始添加2项
									<br>splice(1,1,100) —— 位置1删除并添加1项 
						</span></li>
						<li><a href="">join</a>(符号)<span>把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。</span></li>
					</ul>
					<h4>[<span>-</span>]排序</h4>
					<ul>
						<li><a href="">reverse()</a><span>反转</span></li>
						<li><a href="">sort()</a><span>默认升序排列</span></li>
						<li><a href="">sort</a>(fn)<span>严格升序或降序排列
							<br>function sortNumber(a,b){return a - b  //降序b-a}
							<br>sort方法参数如果提供一个函数，那么该函数必须返回以下值之一：
							<br>负值，所传递的第一个参数比第二个参数小；
							<br>正值，所传递的第一个参数比第二个参数大；
							<br>零，两个参数相等。</span></li>
						</ul>
					<h4>[<span>-</span>]查找位置</h4>
					<ul>
						<li><a href="">indexOf</a>(value,n)<span>正向查找,n为起始索引,如查找不到则返回-1</span></li>
						<li><a href="">lastIndexOf</a>(value,n)<span>逆向查找 </span></li>
					</ul>
					<h4>[<span>-</span>]迭代方法</h4>
					<ul>
						<li><a href="">every</a>(fn[item,index,arr])<span>每一项为true，返回true
								<br>arr.every(function(item,index,array){
								<br>要求
								<br>})</span></li>
						<li><a href="">some</a>(fn[item,index,arr])<span>某一项为true，返回true
								<br>arr.some(function(item,index,array){
								<br>要求
								<br>})</span></li>
						<li><a href="">filter</a>(fn[item,index,arr])<span>			
								返回为true的新数组，按某个函数方法过滤
								<br>arr.filter(function(item,index,array){
								<br>要求
								<br>})</span></li>
						<li><a href="">map</a>(fn[item,index,arr])<span>返回执行函数后的新数组
								<br>arr.map(function(item,index,array){
								要求
								<br>})</span></li>
						<li><a href="">forEach</a>(fn[item,index,arr])<span>遍历数组去执行某个函数，无返回值
								<br>arr.forEach(function(item,index,array){
								<br>要求
								<br>})</span></li>

					</ul>
					<h4>[<span>-</span>]递归方法</h4>
					<ul>
						<li><a href="">reduce</a><span>返回正向函数执行后的归并值
									arr.reduce(function(prev,cur,index,array){
									<br>return prev+cur;
									<br>})</span></li>
						<li><a href="">reduceRight</a><span>
									<br>var arr=[1,2,3]
									<br>var sum=arr.reduce(function(prev,cur,index,array){
									<br>return prev+cur;
									<br>})
									<br>alert(sum); //6 
						</span></li>
					</ul>
					<h4>[<span>-</span>]多维数组</h4>
					<ul>
						<li><a href="">二维数组</a><span>
						<textarea name="" id="" cols="60" rows="10">声明1维，1维循环（声明2维，2维循环），循环条件中参数使用分号，索引号与长度关系。
							var myarr=new Array(); //先声明一维 
							for(var i=0;i<x;i++){ //一维长度
							myarr[i]=new Array(); //在声明二维 
							for(var j=0;j<y;j++){ //二维长度
							myarr[i][j]=i+j; // 赋值，每个数组元素的值为i+j
							}
							} </textarea>
						</span></li>
					</ul>
				</div>
			</li>
			<li>
				<h3>遍历查询<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]Underscore</h4>
					<ul>
						<li><a href=""></a><span></span></li>
					</ul>
				</div>
			</li>
		</ul>
		<ul>
			<li>
				<h3>BOM<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]Window</h4>
					<ul>
						<li><a href="">window properties</a><span>
							
								<div>
								<ol>
									<li><span style="font-size: small;">window 对象有一系列的属性，这些属性本身也是对象。</span></li>
									<li><span style="font-size: small;">window 下的属性和方法，可以使用 window.属性、window.方法()或者直接属性、方法()的方式调用。例如：window.alert()和 alert()是一个意思。</span></li>
									<li><span style="font-size: small;">全局变量不能通过delete操作符删除，而直接在window对象上定义的属性可以，但实际上全局定义归属于对window定义</span></li>
									<li><span style="font-size: small;">尝试访问未声明的变量会抛出错误，但是可以通过查询window对象知道某个可能未声明的变量是否存在。</span></li>
								</ol>
								</div>
								<div><span style="font-size: small;"> </span></div>
								<div>
								<ul>
									<li><b><span style="font-size: small;">window 对象的属性</span></b></li>
								</ul>
								</div>
								<div>
								<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">内容</span></td>
								<td valign="top"></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="font-size: small;">document</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">窗口中当前显示的文档对象</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="font-size: small;">location</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">当前窗口的 URL</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="font-size: small;">history</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">保存有窗口最近加载的 URL</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="color: #0000ff; font-size: small;">screen</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">显示屏幕相关信息，如高度、宽度（以像素为单位）</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">Navigator</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">对 Navigator 对象的只读引用 navigator.userAgent</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">offscreenBuffering</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">用于绘制新窗口内容并在完成后复制已存在的内容，控制屏幕更新</span></div></td>
								</tr>
								<tr>
								<td valign="top"><span style="font-size: small;">层级</span></td>
								<td valign="top"></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="font-size: small;">name</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">窗口名</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="font-size: small;">opener</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">打开当前窗口的窗口</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">self / <b>window</b></span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">指示当前窗口 / 指示当前窗口，与 self 等效</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">frames</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">窗口中的框架对象数组</span></div>
								<div><span style="font-size: small;">frames[]    frames.length 存放数组 frames[] 中含有的元素个数    top.frames[n] 页面第几个框架</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">length</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">窗口中的框架数</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">parent</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">指向包含另一个窗口的窗口（由框架使用）</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">top</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">包含特定窗口的最顶层窗口（由框架使用）</span></div></td>
								</tr>
								<tr>
								<td valign="top"><span style="font-size: small;">状态</span></td>
								<td valign="top"></td>
								</tr>
								<tr>
								<td valign="top">
								<div><b><span style="font-size: small;">closed</span></b></div></td>
								<td valign="top">
								<div><span style="font-size: small;">当窗口关闭时为真</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">defaultStatus</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">窗口底部状态栏显示的默认状态消息（IE）</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">status</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">描述由用户交互导致的状态栏的临时消息（IE）</span></div></td>
								</tr>
								</tbody>
								</table>
								<div><span style="font-size: small;"> </span></div>
								</div>
						</span></li>
						<li><a href="">alert/confirm/prompt()</a><span>
							<table width="100%" border="1" cellspacing="0" cellpadding="2">
								<tbody>
								<tr>
								<td valign="top"><span style="font-size: small;">系统对话框</span></td>
								<td valign="top"><span style="font-size: small;"> </span></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;"><b>alert</b>(text)</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">警告</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;"><b>confirm</b>(text)</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">确认/取消  返回布尔值：true,false</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;"><b>prompt</b>(text,defaultInput)</span></div></td>
								<td valign="top">
								<div><span style="font-size: small;">输入框 返回值：确认&gt;内容，取消&gt;null</span></div></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">print()</span></div></td>
								<td valign="top"><span style="font-size: small;">打印</span></td>
								</tr>
								<tr>
								<td valign="top">
								<div><span style="font-size: small;">find()</span></div></td>
								<td valign="top"><span style="font-size: small;">查找</span></td>
								</tr>
								</tbody>
								</table>
						</span></li>
						<li><a href="">open</a>(url,name,[options])<span>
							window.open(url,name,[options]) 打开一个新窗口并返回新 window 对象，将open()赋值给一个变量，对变量可以执行对子窗口的设置 
							<br>■open方法  window.open("URL", "位置", "属性","历史记录");
							<br>使用 window.open()方法可以导航到一个特定的 URL， 也可以打开一个新的浏览器窗口 。它可以接受四个参数：
							<br>1.URL   http://www.baidu.com
							<br>2.窗口名称或窗口目标  _target   /   _parent  /  somename
							<br>3.一个特性字符串，见下表
							<br>4.一个表示新页面是否取代浏览器记录中当前加载页面的布尔值：true替换历史记录，false创建新历史记录
						</span></li>
						
					</ul>
					<h4>[<span>-</span>]定时器</h4>
					<ul>
						<li><a href="">setTimeout</a>(fn,time)<span>设置延迟多久执行，一次性行为</span></li>
						<li><a href="">clearTimeout(x)</a></li>
						<li><a href="">setInterval</a>(fn,time)<span>设置间隔多久执行</span></li>
						<li><a href="">clearInterval(x)</a></li>
					</ul>
					<h4>[<span>-</span>]其他</h4>
					<ul>
						<li><a href="">location</a><span>
							location.href 地址
							<br />location.reload() 重新加载
						</span></li>
						<li><a href="">encodeURIComponent</a>(url)<span></span></li>
						<li><a href="">decodeURIComponent</a>(url)<span></span></li>
						<li><a href="">history.go(n)</a><span></span></li>
					</ul>
				</div>
			</li>
		</ul>
		<ul>
			<li>
				<h3>DOM<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]CSS</h4>
					<ul>
						<li><a href="">.clientWidth</a><span>返回内容的可视宽度（不包括边框，边距或滚动条）<br />
							document.body.clientWidth; 在页面上返回内容的可视宽度（不包括边框，边距或滚动条）<br />
							document.body.clientHeight;  在页面上返回内容的可视高度（不包括边框，边距或滚动条）<br />兼容：clientWidth= document.documentElement.clientWidth|| document.body.clientWidth; 在页面上返回内容的可视宽度（不包括边框，边距或滚动条）</span></li>
						<li><a href="">.clientHeight</a><span>返回内容的可视高度（不包括边框，边距或滚动条）</span></li>
						<li><a href="">.offsetWidth</a><span>返回元素的宽度，包括边框和padding，但不包括margin</span></li>
						<li><a href="">.offsetHeight</a><span>返回元素的高度，包括边框和padding，但不包括margin</span></li>
						<li><a href="">.scrollWidth</a><span>返回元素的整个宽度（包括带滚动条的隐蔽的地方）<br />
							document.body.scrollWidth; 返回元素的整个宽度（包括带滚动条的隐蔽的地方）<br />
							document.body.scrollHeight; 返回整个元素的高度（包括带滚动条的隐蔽的地方）<br />
							兼容：scrollWidth=document.documentElement.scrollWidth|| document.body.scrollWidth; 返回元素的整个宽度（包括带滚动条的隐蔽的地方）
							</span></li>
						<li><a href="">.scrollHeight</a><span>返回整个元素的高度（包括带滚动条的隐蔽的地方）</span></li>
						<li><a href="">.scrollTop</a><span>滚动条滚动距离
							<br />IE低版本document.documentElement.scrollTop
							<br />现代浏览器document.body.scrollTop
							</span></li>
						<li><a href="">.scrollLeft</a><span>返回当前视图中的实际元素的左边缘和左边缘之间的距离</span></li>
						<li><a href="">.offsetParent</a><span>返回元素的偏移容器</span></li>
						<li><a href="">.offsetTop</a><span>返回当前元素的相对垂直偏移</span></li>
						<li><a href="">.offsetLeft</a><span>返回当前元素的相对水平偏移</span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
					</ul>
					<h4>[<span>-</span>]文档处理</h4>
					<ul>
						<li><a href="">.cookie</a><span></span></li>
						<li><a href="">.lastModified</a><span></span></li>
						<li><a href="">.readyState</a><span></span></li>
						<li><a href="">createElement()</a><span></span></li>
						<li><a href="">createTextNode()</a><span></span></li>
						<li><a href="">createAttribute()</a><span></span></li>
						<li><a href="">normalize()</a><span></span></li>
						<li><a href="">getElementById()</a><span></span></li>
						<li><a href="">getElementsByName()</a><span></span></li>
						<li><a href="">getElementsByTagName()</a><span></span></li>
						<li>document.<a href="">querySelector("#selector")</a><span></span></li>
						<li>document.<a href="">querySelectorAll(".selector")</a><span></span></li>
						<li><a href="">write()</a><span></span></li>
					</ul>
					<h4>[<span>-</span>]DOM方法</h4>
					<ul>
						<li><a href="">getAttribute</a>('attr')<span></span></li>
						<li><a href="">setAttribute</a>('attr',val)<span></span></li>
						<li><a href="">.innerHTML</a><span></span></li>
						<li><a href="">.nodeName</a><span></span></li>
						<li><a href="">.nodeValue</a><span></span></li>
						<li><a href="">.nodeType</a><span></span></li>
						<li><a href="">.attributes</a><span></span></li>
						<li><a href="">.children[n]</a><span></span></li>
						<li><a href="">.childNodes</a><span></span></li>
						<li><a href="">.firstChild</a><span></span></li>
						<li><a href="">.lastChild</a><span></span></li>
						<li><a href="">.parentNode</a><span></span></li>
						<li><a href="">appendChild()</a><span></span></li>
						<li><a href="">createTextNode()</a><span></span></li>
						<li><a href="">insertBefore</a>(key,参照节点)<span></span></li>
						<li><a href="">repalceChild</a>(key,被替换)<span></span></li>
						<li><a href="">cloneNode</a>(true)<span></span></li>
						<li><a href="">removeChild()</a><span></span></li>
						<li><a href=""></a><span></span></li>
					</ul>
					<h4>[<span>-</span>]Attribute对象</h4>
					<ul>
						<li><a href=""></a><span></span></li>
					</ul>
				</div>
			</li>
		</ul>
		<ul>
			<li>
				<h3>事件<span>-</span></h3>
				<div>
					<h4>[<span>-</span>]动画</h4>
					<ul>
						<li><a href="">手机端需添加-webkit-前缀</a><span></span></li>
						<li><a href="">transitionend</a><span>CSS 完成过渡后触发</span></li>
						<li><a href="">animationend</a><span>CSS动画结束播放时触发</span></li>
						<li><a href="">animationiteration</a><span>CSS 动画重复播放时触发</span></li>
						<li><a href="">animationstart</a><span>CSS 动画开始播放时触发</span></li>
					</ul>
					<h4>[<span>-</span>]移动端</h4>
					<ul>
						<li><a href="">onorientationchange</a><span>
							屏幕旋转事件，检测终端类型
							<br />var screenStatus = "onorientationchange" in window ? "orientationchange" : "resize";
							<br />window.orientation = 90/-90为横屏
							</span></li>
						<li><a href="">touchstart</a><span>当手指接触屏幕时触发</span></li>
						<li><a href="">touchmove</a><span>当已经接触屏幕的手指开始移动后触发</span></li>
						<li><a href="">touchend</a><span>当手指离开屏幕时触发</span></li>
						<li><a href="">gesturestart</a><span>当两个手指接触屏幕时触发</span></li>
						<li><a href="">gesturechange</a><span>当两个手指接触屏幕后开始移动时触发</span></li>
						<li><a href="">gestureend</a><span>当两个手指离开屏幕时触发</span></li>
						<li><a href="">orientationchange </a><span>检测触摸屏幕的手指何时改变方向</span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
						<li><a href=""></a><span></span></li>
					</ul>
					<h4>[<span>-</span>]Form</h4>
					<ul>
						<li><a href=""></a><span></span></li>
					</ul>
					<h4>[<span>-</span>]鼠标</h4>
					<ul>
						<li><a href=""></a><span></span></li>
					</ul>
					<h4>[<span>-</span>]键盘</h4>
					<ul>
						<li><a href=""></a><span></span></li>
					</ul>
				</div>
			</li>
		</ul>
	</div>