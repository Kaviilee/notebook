<!-- 数组 -->
<div class="u-col">
	<div class="u-block">
		<h3>数组<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>]构建</h4>
			<ul style="display:none;">
				<li>
					<a href="">[val,...,]</a>
					<span>
						数组直接量的语法允许有可选的结尾的逗号 <br>
						即[1,2,]长度为2
					</span>
				</li>
				<li>
					<a href="">new Array</a>([len])
					<span>
						var arr = new Array(val1,val2,...) <br>
						var arr = new Array(len)	//长度为len，但并数组内无任何值
					</span>
				</li>
				<li><a href="">Array.of</a>(val..)<span>
					Array.of() 和 Array 构造函数之间的区别在于处理整数参数： <br>
					Array.of(7) 创建一个具有单个元素 7 的数组，而 Array(7) 创建一个包含 7 个 undefined 元素的数组。且不需要new运算符。<br>
					<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of">参考资料</a>
				</span></li>
			</ul>
			<h4>[<span>+</span>]属性</h4>
			<ul style="display:none;">
				<li>
					arr.<a href="">constructor</a>
					<span>
						返回值：Array
					</span>
				</li>
				<li>arr.<a href="">length</a>
					<span>
						返回值：数组的长度（0 到 232-1 的整数）。<br>
						你可以设置 length 属性的值来截断任何数组。当通过改变length属性值来扩展数组时，实际元素的数目将会增加。
					</span>
				</li>
				<li>
					arr<a href="">[index]</a>
					<span>
						返回值：指定索引处数组的值 <br>
						如果是字符串下标，不会体现在数组上，需要指定下标键打印，如果是索引下标，则可以直接打印
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]检测</h4>
			<ul>
				<li>
					<a href="">Array.isArray</a>(arr)
					<span>
						返回值：布尔值，是否为数组（ES5）<br>
						<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">参考资料</a>
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]转换</h4>
			<ul>
				<li>
					<a href="">...[argArr]</a>
					<span>
						返回值：参数序列 <br>
						扩展运算符，好比rest参数的逆运算，将一个数组转为用逗号分隔的参数序列，主要用于函数调用 <br>
						如果扩展运算符后面是一个空数组，则不产生任何效果。 <hr>
						ES5写法：fn.apply(null,argArr) <br>
						求最大值：Math.max(...argArr) <br>
						<a href="http://es6.ruanyifeng.com/#docs/array#扩展运算符">参考资料</a>
					</span>
				</li>
				<li><a href="">Array.from</a>(o,[cb],[cbthis])<span>
					从一个类似数组或可迭代对象中创建一个新的数组实例。<br>
					参数：包括arguments，set，map，DOM元素集，字符串等 | 回调函数(当前值val)并返回一个新的替换的值 | 回调函数的this指向<br>
					返回：新数组 <br>
					原对象：不变。<br>
					<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from">参考资料1</a> | <a href="http://es6.ruanyifeng.com/#docs/array#Array-from">参考资料2</a>
					<hr>
					Array.from(arrayLike,callback(val),callback_this) <br>
					callback -> return replace_val <hr>
					扩展运算符背后调用的是遍历器接口（Symbol.iterator），如果一个对象没有部署这个接口，就无法转换。Array.from方法还支持类似数组的对象。所谓类似数组的对象，本质特征只有一点，即必须有length属性。因此，任何有length属性的对象，都可以通过Array.from方法转为数组，而此时扩展运算符就无法转换。如：Array.from({ length: 3 }); <br><br>
					Array.from()的另一个应用是，将字符串转为数组，然后返回字符串的长度。因为它能正确处理各种 Unicode 字符，可以避免 JavaScript 将大于\uFFFF的 Unicode 字符，算作两个字符的 bug。
				</span></li>
				<li>
					arr.<a href="">join</a>(symbol)
					<span>
						使用指定符号把数组元素拼接为字符串<br>
						参数：符号<br>
						返回：新字符串<br>
						原对象：不变。 <hr>
						如果元素是undefined 或者null，则会转化成空字符串 <br>
						如果缺省符号，数组元素用逗号分隔
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]查找</h4>
			<ul>
				<li>arr.<a href="">indexOf</a>(val,[i])<span>
					参数：正向查找指定值,i为起始索引 <br>
					返回值：第一个出现的索引位置；如查找不到则返回-1<hr>
					默认起始索引为0，如为-2则从倒数第二个元素开始查找。<br>
					该方法执行严格相等判断
				</span></li>
				<li>arr.<a href="">lastIndexOf</a>(val,[i])<span>
					参数：逆向查找指定值,i为起始索引 <br>
					返回值：第一个出现的索引位置；如查找不到则返回-1 <hr>
					默认起始索引为arr.length - 1，
					该方法执行严格相等判断
				 </span></li>
				 <li>arr.<a href="">findIndex</a>(fn(item,[i],[arr]),[obj])<span>
				 	返回符合测试条件的第一个数组元素索引，如果没有符合条件的则返回 -1。
				 	回调函数返回true/false <br>
				 	整个执行函数返回索引或-1。
				 </span></li>
				 <li>arr.<a href="">includes</a>(val,[i])<span>
				 	返回值：true/false <br>
				 	参数：从i索引处开始查找val,默认为 0。<br>
				 	如果i为负值，则按升序从array.length + fromIndex 的索引开始搜索。<br>
				 	指定了i的时候升序查找到末端不会再从头查找。
				 </span></li>
			</ul>
			<h4>[<span>-</span>]操作</h4>
			<ul>
				<li>arr.<a href="">concat</a>(item|arr,..)<span>
					参数：串联一个新的数组元素或数组内的元素（当串联的是一个新数组时，只取数组里的值）。<br>
					返回：一个新的数组。<br>
					原数组：不变。
				</span></li>
				<li>arr.<a href="">slice</a>[n,m)<span>
					参数：起始位置，末尾位置（不包含）<br>
					返回值：被截取得到的新数组。<br>
					原数组：不变。<br>
					当只有1个参数时，则为起始位置到末尾全部，且包含末尾元素（即m=arr.length）。<br>
					n和m可为负值，-1 指最后一个元素，-2 指倒数第二个元素。
				</span></li>
			</ul>
			<h4>[<span>-</span>]排序</h4>
			<ul>
				<li>arr.<a href="">sort</a>([fn(a,b)])<span>
					对数组进行升序排序。<br>
					参数：指定一个函数 <br>
					返回：新的改变后的数组。<br>
					原对象：改变。
					<hr>
					默认排序顺序为按字母升序（字符串模式） <br>
					默认把所有元素先转换为String再排序。即结果'10'排在了'2'的前面，因为字符'1'比字符'2'的ASCII码小，大写比小写靠前。<br>
					函数执行完返回的是对数组的引用，请注意，数组在原数组上进行排序并修改原数组，并不生成副本。
					<hr>
					sort方法参数如果提供一个函数，那么该函数必须返回以下值之一：<br>
					负值，所传递的第一个参数比第二个参数小；<br>
					正值，所传递的第一个参数比第二个参数大；<br>
					零，两个参数相等。<br>
<pre><code data-language="javascript">
	arr.sort(function(a,b){
		//升序
		return a - b;
		//降序
		return b - a;

		//升序
		if (x < y) {
		    return -1;
		}
		if (x > y) {
		    return 1;
		}
			return 0;
		})
</code></pre>
					</span></li>
				<li>arr.<a href="">reverse</a>()<span>
					反转当前数组排序
				</span></li>
				</ul>
			<h4>[<span>-</span>]添加</h4>
			<ul>
				<li>arr.<a href="">push</a>(item,..)<span>
					参数：在数组末端添加若干个元素<br>
					返回值：数组的新长度。<br>
					原数组：改变。
				</span></li>
				<li>arr.<a href="">unshift</a>(item,..)<span>
					参数：在数组最前方添加若干个元素<br>
					返回值：数组的新长度。<br>
					原数组：改变。
				</span></li>
				<li>arr.<a href="">splice</a><em>(i,0,item,..)</em><span>
					参数：在数组指定的i索引位置添加若干个元素<br>
					返回值：空数组。<br>
					原数组：改变。
				</span></li>
			</ul>
			<h4>[<span>-</span>]移除</h4>
			<ul>
				<li>arr.<a href="">pop</a>()<span>
					参数：移除数组的最后一个元素，无参数。<br>
					返回值：被删除的元素。<br>
					原数组：改变。
				</span></li>
				<li>arr.<a href="">shift</a>()<span>
					参数：移除数组的第一个元素，无参数。<br>
					返回值：被删除的元素。<br>
					原数组：改变。
				</span></li>
				<li>arr.<a href="">splice</a><em>(i,[delnum],[item],...)</em><span>
					参数：在数组指定的i索引位置删除和添加若干个元素<br>
					返回值：被删除的元素组成的数组。<br>
					原数组：改变。<br>
					delnum=空：如第2个参数缺省，则删除从索引位置起到数组末尾的全部元素。<br>
					delnum=1：如第2个参数存在，且=1，则相当于删除索引位置的元素。<br>
					delnum=n：如第2个参数存在，且>1，删除arr[i]~arr[i+n-1]的元素。
				</span></li>
			</ul>
			<h4>[<span>-</span>]替换</h4>
			<ul>
				<li>arr.<a href="">fill</a>(val,[n],[m])<span>
					参数：用一个固定值替换数组的元素。<br>
					返回值：新的数组。<br>
					原数组：改变。<br>
					包含n位置，不包含m位置。如果m不定义，则为剩余全部元素。
				</span></li>
				<li>arr.<a href="">copyWithin</a>(i,n,[m])<span>
					参数：复制（索引n ~ 索引m-1）的元素，替换（索引i ~ 索引i+m-n-1）的元素。<br>
					返回值：新的数组。<br>
					原数组：改变。<br>
					复制选取的部分包含n，但不包含m。如果m不定义，即到数组末端。
				</span></li>
			</ul>
			<h4>[<span>-</span>]迭代</h4>
			<ul>
				<li>arr.<a href="">map</a><em>(fn(item,[i],[arr]),[obj])</em><span>
					通过指定函数处理数组的每个元素，并返回处理后的数组，map()不会改变原始数组。<br>
					obj对象作为该执行回调时使用，传递给函数，用作 "this" 的值。如果省略了 thisValue ，"this" 的值为 "undefined"。<hr>
					map()与forEach()的区别：<br>
					<table>
						<tr>
							<th>map</th>
							<th>forEach</th>
						</tr>
						<tr>
							<td>返回新的数组</td>
							<td>返回undefine</td>
						</tr>
						<tr>
							<td>执行回调，应在回调中return计算后的新值</td>
							<td>只执行回调函数，对应的打印等操作或新建数组需在回调中声明</td>
						</tr>
					</table>
					</span></li>
			</ul>
			<h4>[<span>-</span>]递归</h4>
			<ul>
				<li>arr.<a href="">reduce</a><em>(fn(cur,item,[i],[arr]),[init])</em><span>
					方法接收一个函数作为累加器（accumulator），数组中的每个值（从左到右）开始缩减，最终为一个值。<br>
					回调函数需返回cur，执行完成reduce会返回最终total值。<br>
					<a href="http://www.runoob.com/jsref/jsref-reduce.html">参考资料</a>
					</span></li>
				<li>arr.<a href="">reduceRight</a><em>(fn(cur,item,[i],[arr]),[init])</em><span>
					从右向左递归。
				</span></li>
			</ul>
			<h4>[<span>-</span>]遍历</h4>
			<ul>
				<li>arr.<a href="">filter</a><em>(fn(item,[i],[arr]),[obj])</em><span>			
					检测数值元素，并返回符合条件所有元素的数组。<br>
					和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。<br>
					<a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014351219769203e3fbe1ed611475db3d439393add8997000">参考资料</a>
					</span></li>
				<li>arr.<a href="">every</a><em>(fn(item,[i],[arr]),[obj])</em><span>
					every()方法用于检测数组所有元素是否都符合指定条件，如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测；如果所有元素都满足条件，则返回 true。
<pre><code data-language="javascript">
	var ages = [32, 33, 16, 40];
	function checkAdult(age) {
	    return age >= 18;
	}
</code></pre>
					</span></li>
				<li>arr.<a href="">some</a><em>(fn(item,[i],[arr]),[obj])</em><span>
					some() 方法用于检测数组中的元素是否满足指定条件，如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测。如果没有满足条件的元素，则返回false。
				</span></li>
				<li>arr.<a href="">find</a><em>(fn(item,[i],[arr]),[obj])</em><span>
					find() 方法返回传入一个测试条件（函数）符合条件的数组第一个元素。当数组中的元素在测试条件时返回 true 时, find() 返回符合条件的元素，之后的值不会再调用执行函数。如果没有符合条件的元素返回 undefined。
				</span></li>
				<li><em>遍历方法对比一览</em><a href=""></a><span>
					<table>
						<tr>
							<th>方法</th>
							<th>用途</th>
							<th>回调函数返回值</th>
							<th>方法返回值</th>
						</tr>
						<tr>
							<td>map</td>
							<td>遍历每一个执行函数</td>
							<td>return new_item</td>
							<td>retrun new_array</td>
						</tr>
						<tr>
							<td>forEach</td>
							<td>遍历每一个执行函数</td>
							<td>-</td>
							<td>undefine</td>
						</tr>
						<tr>
							<td>reduce/reduceRight</td>
							<td>从左向右/从右向左递归</td>
							<td>return cur_value</td>
							<td>return total_value</td>
						</tr>
						<tr>
							<td>filter</td>
							<td>筛选所有满足条件的项</td>
							<td>return true/false</td>
							<td>return filter_array</td>
						</tr>
						<tr>
							<td>every/some</td>
							<td>遍历是否每一项/存在项满足条件</td>
							<td>return true/false</td>
							<td>return true/false</td>
						</tr>
						<tr>
							<td>find</td>
							<td>查找是否存在满足条件的项，并返回第一个</td>
							<td>return true/false</td>
							<td>return value/undefined</td>
						</tr>
					</table>
				</span></li>
			</ul>
		</div>
	</div>
</div>