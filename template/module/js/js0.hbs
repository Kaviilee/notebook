<!-- 基本语法 -->
<div class="u-col">
    <div class="u-block">
        <h3>数据类型<span>+</span></h3>
        <div class="u-list" style="display:none;">
            <h4>[<span>+</span>]数据类型</h4>
            <ul style="display:none;">
                <li>
                    <a href="">Boolean</a>
                    <span>
                        布尔:原始类型
                    </span>
                </li>
                <li>
                    <a href="">Number</a>
                    <span>
                        数值：原始类型 <br>
                        根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(263 -1) 到 263 -1） <br>
                        数字类型只有一个整数: 0
                    </span>
                </li>
                <li>
                    <a href="">String</a>
                    <span>
                        字符串：原始类型 <br>
                        JavaScript 字符串是不可更改的
                    </span>
                </li>
                <li>
                    <a href="">Symbol</a>
                    <span>
                        符号：原始类型 <br>
                        符号类型是唯一的并且是不可修改的,可以用来作为Object的key的值
                    </span>
                </li>
                <li>
                    <a href="">Undefined</a>
                    <span>
                        未定义：原始类型 <br>
                        一个没有被赋值的变量会有个默认值 undefined
                    </span>
                </li>
                <li>
                    <a href="">Null</a>
                    <span>
                        空：原始类型 <br>
                        Null 类型只有一个值： null
                    </span>
                </li>
                <li>
                    <a href="">Object</a>
                    <span>
                        对象：引用类型（包括数组、函数、标准对象等）
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>]类型检测</h4>
            <ul>
                <li>
                    <a href="">typeof</a> val
                    <span>
                        返回的是字符串。 <br>
                        可通过Object.prototype.toString.call(o)测试
                        <table>
                            <tr>
                                <th>类型</th>
                                <th>结果</th>
                            </tr>
                            <tr>
                                <td>true/false</td>
                                <td>boolean</td>
                            </tr>
                            <tr>
                                <td>数值/NaN</td>
                                <td>boolean</td>
                            </tr>
                            <tr>
                                <td>Symbol</td>
                                <td>symbol</td>
                            </tr>
                            <tr>
                                <td>字符串/JSON</td>
                                <td>string</td>
                            </tr>
                            <tr>
                                <td>fn</td>
                                <td>function</td>
                            </tr>
                            <tr>
                                <td>obj/数组/null</td>
                                <td>object</td>
                            </tr>
                            <tr>
                                <td>undefined/不存在的属性或方法</td>
                                <td>undefined</td>
                            </tr>
                        </table>
                        <br><hr>
                        1.判断null请使用myVar === null <br>
                        2.不存在的变量与未声明的变量typeof检测均为undefined，但两者其实不同，故建议总是初始化。 <br>
                        3.Null 类型是一个只有一个值的数据类型，即特殊的值 null。它表示一个空对象引用(指针)，而 typeof 操作符检测 null 会返回 object。如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null。这样，当检查 null 值就知道是否已经变量是否已经分配了对象引用了。<br>
                        4.undefined 是派生自 null 的，因此 ECMA-262 规定对它们的相等性测试返回 true。alert(undefined == null);但typeof数据类型不等。
                    </span>
                </li>
                <li>
                    obj <a href="">instanceof</a> cst
                    <span>instanceof运算符返回一个布尔值，表示某个对象是否为指定的构造函数的实例。
                        <table>
                            <tr>
                                <th>测试目标</th>
                                <th>测试结果</th>
                            </tr>
                            <tr>
                                <td>数组</td>
                                <td>arr instanceof Array</td>
                            </tr>
                            <tr>
                                <td>函数/构造函数</td>
                                <td>fn instanceof Function</td>
                            </tr>
                            <tr>
                                <td>构造函数实例</td>
                                <td>child instanceof parent</td>
                            </tr>
                            <tr>
                                <td>泛对象</td>
                                <td>obj instanceof Object</td>
                            </tr>
                            <tr>
                                <td>日期</td>
                                <td>value instanceof Date</td>
                            </tr>
                            <tr>
                                <td>正则表达式</td>
                                <td>value instanceof RegExp</td>
                            </tr>
                            <tr>
                                <td>数学</td>
                                <td>value instanceof Math</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>]类型转换</h4>
            <ul>
                <li>
                    <a href="">Boolean</a>(val)
                    <span>
                        省略该参数 <br>
                        其值为 0、-0、null、false、NaN、undefined、或者空字符串（""）<br>
                        参数是DOM对象document.all <br>
                        以上均生成值为false的Boolean对象
                    </span></li>
                <li>
                    <a href="">Number</a>(val)
                    <span>
                        <table>
                            <tr>
                                <th>value</th>
                                <th>返回值</th>
                            </tr>
                            <tr>
                                <td>number/包含单个数值的数组</td>
                                <td>number</td>
                            </tr>
                            <tr>
                                <td>boolean</td>
                                <td>1 / 0</td>
                            </tr>
                            <tr>
                                <td>null/空字符串/空数组</td>
                                <td>0</td>
                            </tr>
                            <tr>
                                <td>undefined/string/object</td>
                                <td>NaN</td>
                            </tr>
                        </table>
                    </span></li>
                <li>
                    <a href="">String</a>(val)
                    <span>
                        <table>
                            <tr>
                                <th>value</th>
                                <th>返回值</th>
                            </tr>
                            <tr>
                                <td>数值</td>
                                <td>转为相应的字符串</td>
                            </tr>
                            <tr>
                                <td>字符串</td>
                                <td>转换后还是原来的值</td>
                            </tr>
                            <tr>
                                <td>布尔值</td>
                                <td>true转为"true"，false转为"false"</td>
                            </tr>
                            <tr>
                                <td>undefined</td>
                                <td>转为"undefined"</td>
                            </tr>
                            <tr>
                                <td>null</td>
                                <td>转为"null"</td>
                            </tr>
                            <tr>
                                <td>数组</td>
                                <td>返回该数组的字符串形式  "1,2,3"</td>
                            </tr>
                            <tr>
                                <td>对象</td>
                                <td>返回一个类型字符串 "[object Object]" <br>可通过toString方法来设置修改</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
        </div>
        <h3>语法<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>]变量</h4>
            <ul>
                <li>
                    <a href="">var</a>
                    <span>
                        x1 = 1;<br />
                        var x2 = 2;<br />
                        window.x3 = 3;<br />
                        <a href="http://snandy.iteye.com/blog/720816">3种全局变量的异同</a> <hr>
                        1.变量会提升，在没有声明前调用，会输出undefined <br>
                        2.假设声明a、b、c,且c=a+b，且均为非引用类型，当ab发生变化时，c不会改变，应设为c=fn(return a+b)
                    </span>
                </li>
                <li>
                    <a href="">let</a>
                    <span>
                        let i = 1;<br>
                        1.申明一个块级作用域的变量 <br>
                        2.不能使用let重复定义一个变量 <br>
                        3.只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响，暂时性死区。<br>
                    </span>
                </li>
                <li>
                    <a href="">const</a>
                    <span>
                        const PI = 3.14 <br>
                        1.const来定义常量，在声明时就必须赋值。<br>
                        2.const与let都具有块级作用域。 <br>
                        2.一旦声明，常量的指针就不能改变。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>]运算符与操作符</h4>
            <ul style="display:none;">
                <li>
                    <a href=""></a><em>运算符</em>
                    <span>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">参考资料</a>
                    </span>
                </li>
                <li>
					<a href="">delete </a>obj.key
					<span>
						删除属性delete obj.key，删除成功后返回true <br>
						注意，删除一个不存在的属性，delete不报错，而且返回true。 <br>
						只有一种情况，delete命令会返回false，那就是该属性存在，且不得删除。<br>
						delete命令只能删除对象本身的属性，无法删除继承的属性 <br>
						delete命令不能删除var命令声明的变量，只能用来删除属性。
					</span>
				</li>
				<li>
                    key <a href="">in</a> obj
                    <span>
                        in遍历访问对象的属性/属性值
                        它遍历的是对象所有可遍历（enumerable）的属性，会跳过不可遍历的属性 <br>
                        它不仅遍历对象自身的属性，还遍历继承的属性。
                    </span>
                </li>
                <li>
                    <a href="">void</a>
                    <span>
                        表明一个运算没有返回值
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>]表达式与其它</h4>
            <ul style="display:none;">
                <li>
                    <a href="">this</a>
                    <span>
                        this关键字被用于指代当前的对象，通常，this指代的是方法中正在被调用的对象
                    </span>
                </li>
                <li>
                    <a href="">new</a>
                    <span>
                        你可以使用new operator 创建一个自定义类型或者是预置类型的对象实例
                    </span>
                </li>
                <li>
                    <a href="">'use strict'</a>
                    <span>
                        严格模式下，函数中的this指向Undefined，非window对象。 <a href="http://javascript.ruanyifeng.com/advanced/strict.html">参考资料</a> <br>
                        ES6下默认开启严格模式
                    </span>
                </li>
                <li>
                    <a href="">eval</a>(str)
                    <span>
                        将字符串当作语句执行。<br>
                        eval没有自己的作用域，都在当前作用域内执行。<br>
                        JavaScript规定，如果使用严格模式，eval内部声明的变量，不会影响到外部作用域。不过，即使在严格模式下，eval依然可以读写当前作用域的变量。<br>
                        eval的使用分成两种情况，一种是直接调用eval(expression)，这叫做“直接使用”，这种情况下eval的作用域就是当前作用域。除此之外的调用方法，都叫“间接调用”，此时eval的作用域总是全局作用域
                        <a href="http://javascript.ruanyifeng.com/grammar/function.html#toc25">参考资料</a>
                    </span>
                </li>
                <li>
                    <a href="">with</a>(obj)
                    <span>
                        操作同一个对象的多个属性时，提供一些书写的方便. <a href="http://javascript.ruanyifeng.com/grammar/object.html">参考资料</a> <br>
                        注意，with区块内部的变量，必须是当前对象已经存在的属性，否则会创造一个当前作用域的全局变量。这是因为with区块没有改变作用域，它的内部依然是当前作用域。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>]流程控制与错误处理</h4>
            <ul style="display:none;">
                <li>
                    <a href="">if..else..</a>
                    <span>
                        if.. <br>
                        if..else.. <br>
                        if..else if..else..
                    </span>
                </li>
                <li>
                    <a href="">switch</a>
                    <span>
                        switch(expression){ <br>
                            case ex:<br>
                                ..<br>
                            break;<br>
                            default:<br>
                                ..<br>
                        }<br>
                        1.switch中的case为全等判断<br>
                        2.多个case使用同一个执行块应写为case 1: case2: ... <br>
                        3.每个case代码块内部的break不能少，否则会接着执行下一个case
                    </span>
                </li>
                <li>
                    <a href="">try..catch</a>
                    <span>
                        try{..} <br>
                        catch(e){..} <br>
                        finally{..}
                    </span>
                </li>
                <li>
                    <a href="">throw</a> exp
                    <span>
                        抛出一个异常
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>]循环与迭代</h4>
            <ul style="display:none;">
                <li>
                    <a href="">for</a>
                    <span>
                        1.设置循环变量的部分和循环体内部有各自单独的作用域，变量彼此不影响（使用let时）。
                    </span>
                </li>
                <li>
                    <a href="">for..in</a>
                    <span>
                        循环一个对象所有可枚举的属性
                    </span>
                </li>
                <li>
                    <a href="">for..of</a>
                    <span>
                        在可迭代的对象上创建了一个循环 <br>
                        包括Array, Map, Set, 参数对象（ arguments） 等等
                    </span>
                </li>
                <li>
                    <a href="">do..while</a>(ex)
                    <span>
                        一直重复直到指定的条件求值得到假
                    </span>
                </li>
                <li>
                    [label:] <a href="">while</a>(ex)..
                    <span>
                        一个 while 语句只要指定的条件求值为真（true）就会一直执行它的语句块
                    </span>
                </li>
                <li>
                    <a href="">label</a>:
                    <span>
                        使用 break 或者 continue 来指出程序是否该停止循环还是继续循环
                    </span>
                </li>
                <li>
                    <a href="">break</a> label
                    <span>
                        for/while/do-while中使用break跳出整个循环 
                    </span>
                </li>
                <li>
                    <a href="">continue</a> label
                    <span>
                        for/while/do-while立即终止本轮循环，开始下一轮循环 <hr>
                        不带参数的break和continue语句都只针对最内层的循环，如continue语句后面不使用标签，则进入下一轮的内层循环 <br>
                        带参数的break和continue语句，满足条件时，会跳过当前循环，直接进入下一轮外层循环
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>数值<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>]Number</h4>
            <ul style="display: none;">
                <li><a href="">Finity</a><span>
                    Finity isFinite(---) 判断是否为无穷
                        <table>
                        <tbody>
                        <tr>
                        <td>
                        最大值</td>
                        <td>
                        Number.MAX_VALUE 1.79e+308</td>
                        </tr>
                        <tr>
                        <td>
                        <div>最小值</div></td>
                        <td>
                        Number.MIN_VALUE 5e-324</td>
                        </tr>
                        <tr>
                        <td>
                        <div>正无穷</div></td>
                        <td>
                        Number.POSITIVE_INFINITY</td>
                        </tr>
                        <tr>
                        <td>
                        <div>负无穷</div></td>
                        <td>
                        Number.NEGATIVE_INFINITY</td>
                        </tr>
                        </tbody>
                        </table>
                        <ul>
                            <li>科学计数法，浮点数+e+10的指数</li>
                            <li>0/0=NaN，正数/0=正无穷，负数/0=负无穷</li>
                            <li>正无穷+正无穷=正无穷，负无穷+负无穷=负无穷，正无穷+负无穷=NaN</li>
                            <li>无穷乘法操作得到无穷，无穷除法与求余操作得到NaN</li>
                        </ul>
                </span></li>
                <li><a href="">NaN</a><span>
                        NaN isNaN(---) 判断是否为NaN
                            <table>
                            <tbody>
                            <tr>
                            <td>Number.NaN</td>
                            <td>
                            得到 NaN 值</td>
                            </tr>
                            <tr>
                            <td>
                            var box = 0 / 0; //NaN
                            var box = 12 / 0; //Infinity
                            var box = 12 / 0 * 0; //NaN</td>
                            <td>
                            任何与 NaN 进行运算的结果均为 NaN</td>
                            </tr>
                            <tr>
                            <td>alert(NaN == NaN) //false</td>
                            <td>NaN 与自身不相等(NaN 不与任何值相等)</td>
                            </tr>
                            </tbody>
                            </table>
                            <ul>
                                <li>isNaN()函数也适用于对象。</li>
                                <li>在调用 isNaN()函数过程中，首先会调用 valueOf()方法， 然后确定返回值是否能够转换成数值。如果不能，则基于这个返回值再调用 toString()方法，再测试返回值。</li>
                                <li>只要NaN参与的运算均为NaN</li>
                            </ul>
                </span></li>
                <li>Number.<a href="">MAX_VALUE</a><span>1.7976931348623157e+308</span></li>
                <li>Number.<a href="">MIN_VALUE</a><span>5e-324 <br>MIN_VALUE 是 JavaScript 最接近0的数,不是负值</span></li>
                <li>Number.<a href="">NEGATIVE_INFINITY</a><span>-Infinity 负无穷</span></li>
                <li>Number.<a href="">POSITIVE_INFINITY</a><span>Infinity 正无穷</span></li>
            </ul>
            <h4>[<span>-</span>]表示</h4>
            <ul>
                <li>num.<a href="">toFixed</a>([bit])<span>
                    指定小数点后位数。<br>
                    把 Number 四舍五入为指定小数位数的数字，返回的是一个字符串。<br>
                    规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替并四舍五入。
                </span></li>
                <li>num.<a href="">toString</a>([ary])<span>
                    转为字符串，并指定进制，默认为10进制。<br>
                    直接转换时写为123..toString()或(123).toString()
                </span></li>
                <li>num.<a href="">toLocaleString</a>(local,[opt])<span>
                    根据本地数字格式转换为字符串 1,000.789 <br>
                    <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString">参考资料</a>
                </span></li>
                <li>num.<a href="">toExponential</a>([bit])<span>
                    使用指数计数法。<br>
                    把对象的值转换为指数计数法，返回的是一个字符串。<br>
                    参数可选。规定指数计数法中的小数位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将使用尽可能多的数字。
                </span></li>
                <li>num.<a href="">toPrecision</a>([bit])<span>
                    把数字格式化为指定的长度。N为显示位数，自动选择toFixed() toExponential(N)两者之一。
                </span></li>
            </ul>
            <h4>[<span>-</span>]检测</h4>
            <ul>
                <li>[Number.]<a href="">isNaN</a>(val)<span>
                    是否为非数值,转换后非数值为true，数值false
                    <br>1. 非数值执行运算，会隐藏自动转型（除+）
                    <br>2. 加法操作中，数值字符串与数值运算，则改变为字符串串联，减法中，会继续自动转换数值进行运算</span></li>
                <li>[Number.]<a href="">isFinite</a>(val)<span>判断是否为无穷值超出计算范围</span></li>
                <li>Number.<a href="">isInteger</a>(val)<span>
                    判断给定的参数是否为整数
                </span></li>
            </ul>
            <h4>[<span>-</span>]转换</h4>
            <ul>
                <li>[Number.]<a href="">parseInt</a>(val,[ary])<span>
                    自动判定进制，忽略空格。
                    <table>
                        <tr>
                            <th>value</th>
                            <th>结果</th>
                        </tr>
                        <tr>
                            <td>空字符串</td>
                            <td>NaN</td>
                        </tr>
                        <tr>
                            <td>第一个非空字符不是数值或负号</td>
                            <td>NaN</td>
                        </tr>
                        <tr>
                            <td>第一个非空字符是数值，遇到非数值时停止解析</td>
                            <td>number</td>
                        </tr>
                    </table>
                    parseInt方法还可以接受第二个参数（2到36之间），表示被解析的值的进制，返回该值对应的十进制数。默认情况下，parseInt的第二个参数为10，即默认是十进制转十进制。
                    </span></li>
                <li>[Number.]<a href="">parseFloat</a>(val)<span>
                    第一个小数点有效，第二个无效</span></li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>Symbol<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>]创建</h4>
            <ul>
                <li>
                    <a href="">Symbol</a>([des])
                    <span>
                        它是一种类似于字符串的数据类型，但独一无二。 <hr>
                        1.Symbol函数前不能使用new命令，否则会报错 <br>
                        2.Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。 <br>
                        3.Symbol函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。 <br>
                        4.Symbol 值不能与其他类型的值进行运算 <br>
                        5.Symbol 值可以通过toString或String方法显式转为字符串 <br>
                        6.Symbol 值也可以转为布尔值，但是不能转为数值 <br>
                        7.不能使用.运算符，必须使用[] <br>
                        8.Symbol 作为属性名，该属性不会出现在for...in、for...of循环中，也不会被Object.keys()、Object.getOwnPropertyNames()、JSON.stringify()返回。但是，它也不是私有属性，有一个Object.getOwnPropertySymbols方法，可以获取指定对象的所有 Symbol 属性名。
                    </span>
                </li>
                <li>
                    <a href="">Symbol.for</a>(str)
                    <span>
                        接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值。如果有，就返回这个 Symbol 值，否则就新建并返回一个以该字符串为名称的 Symbol 值。
                    </span>
                </li>
                <li>
                    <a href="">Symbol.keyfor</a>(sb)
                    <span>
                        返回一个已登记的 Symbol 类型值的key
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>]内置symbol</h4>
            <ul>
            </ul>
        </div>
    </div>
</div>