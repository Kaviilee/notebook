<!-- 标准对象 -->
<div class="u-col">
	<div class="u-block">
		<h3>标准对象<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>]数学</h4>
			<ul style="display:none">
				<li><a href="">Math.random()</a><span>
					返回 0 ~ 1 之间的随机数(大于等于 0.0且小于1.0的伪随机 double 值) <br>
					1.随机颜色16进制：Math.floor( Math.random() * 16777215 ).toString( 16 ) <br>
					2.2个值之间的随机值：function random(min,max){return min + (max-min)*Math.random();} <br>
					<a href="http://javascript.ruanyifeng.com/stdlib/math.html">参考资料</a>
				</span></li>
				<li><a href="">Math.max/min</a>(x,y,z..n)<span>
					返回 x,y,z,...,n 中的最高/低值 <br>
					参数中最大的值。如果没有参数，则返回 -Infinity。如果有某个参数为 NaN，或是不能转换成数字的非数字值，则返回 NaN。
				</span></li>
				<li><a href="">Math.abs</a>(x)<span>返回 x 的绝对值</span></li>
				<li>
					<a href="">Math.sign</a>(x)
					<span>
						判断一个数到底是正数、负数、还是零。 <hr>
						参数为正数，返回+1； <br>
						参数为负数，返回-1；<br>
						参数为 0，返回0；<br>
						参数为-0，返回-0;<br>
						其他值，返回NaN。
					</span>
				</li>
				<li><a href="">Math.ceil/floor/round</a>(x)<span>对数进行上/下舍入/四舍五入</span></li>
				<li>
					<a href="">Math.trunc</a>(x)
					<span>
						去除一个数的小数部分，返回整数部分
					</span>
				</li>
				<li><a href="">Math.sqrt</a>(x)<span>返回x的平方根</span></li>
				<li>
					<a href="">Math.cbrt</a>(x)
					<span>
						计算一个数的立方根
					</span>
				</li>
				<li><a href="">Math.pow</a>(x,y)<span>返回x的y次幂</span></li>
				<li><a href="">Math.exp</a>(x)<span>返回E(x)的指数</span></li>
				<li><a href="">Math.log</a>(x)<span>返回数的自然对数（底为e）</span></li>
				<li><a href="">Math.CONST</a><span>
					<table>
						<tr>
							<th>属性</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>E</td>
							<td>返回算术常量 e，即自然对数的底数（约等于2.718）</td>
						</tr>
						<tr>
							<td>LN2</td>
							<td>返回 2 的自然对数（约等于0.693）</td>
						</tr>
						<tr>
							<td>LN10</td>
							<td>返回 10 的自然对数（约等于2.302）</td>
						</tr>
						<tr>
							<td>LOG2E</td>
							<td>返回以 2 为底的 e 的对数（约等于 1.414）</td>
						</tr>
						<tr>
							<td>LOG10E</td>
							<td>返回以 10 为底的 e 的对数（约等于0.434）</td>
						</tr>
						<tr>
							<td>PI</td>
							<td>返回圆周率（约等于3.14159）</td>
						</tr>
						<tr>
							<td>SQRT1_2</td>
							<td>返回返回 2 的平方根的倒数（约等于 0.707）</td>
						</tr>
						<tr>
							<td>SQRT2</td>
							<td>返回 2 的平方根（约等于 1.414）</td>
						</tr>
					</table>
				</span></li>
				<li><a href="">Math.三角函数</a><span>
					<table>
						<tr>
							<th>函数</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>Math.sin(x)</td>
							<td>返回数的正弦</td>
						</tr>
						<tr>
							<td>>Math.asin(x)</td>
							<td>返回 x 的反正弦值</td>
						</tr>
						<tr>
							<td>Math.cos(x)</td>
							<td>返回数的余弦</td>
						</tr>
						<tr>
							<td>Math.acos(x)</td>
							<td>返回 x 的反余弦值</td>
						</tr>
						<tr>
							<td>Math.tan(x)</td>
							<td>返回角的正切</td>
						</tr>
						<tr>
							<td>Math.atan(x)</td>
							<td>以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值</td>
						</tr>
						<tr>
							<td>Math.atan2(y,x)</td>
							<td>返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）</td>
						</tr>
					</table>
				</span></li>
				<li>
					<a href="">Math.hypot</a>(x,y..)
					<span>
						返回所有参数的平方和的平方根
					</span>
				</li>
			</ul>
			<h4>[<span>+</span>]日期时间</h4>
			<ul style="display:none">
				<li><a href="">new Date</a>([arg..,timestamp])<span>
					返回：日期对象 <hr>
					无参数时：创建计算机当前时间的日期对象 <br>
					var date = new Date(); <br>
					Sat Oct 07 2017 01:20:24 GMT+0800 (中国标准时间) <hr>
					有参数时：创建指定时间的日期对象 <br>
					var date = new Date(2015, 5, 19, 20, 15, 30, 123); <br>
					var date = new Date(1435146562875); <br>
					当前时间是浏览器从本机操作系统获取的时间，所以不一定准确，因为用户可以把当前时间设定为任何值。
				</span></li>
				<li>date.<a href="">getFullYear()</a>{2017}<span>年份</span></li>
				<li>date.<a href="">getMonth()</a>{0~11}<span>月份，范围0~11</span></li>
				<li>date.<a href="">getDate()</a>{1~31}<span>日期</span></li>
				<li>date.<a href="">getDay()</a>{1~7}<span>星期</span></li>
				<li>date.<a href="">getHours()</a>{0~24}<span>时，24小时制</span></li>
				<li>date.<a href="">getMinutes()</a>{0~60}<span>分</span></li>
				<li>date.<a href="">getSeconds()</a>{0~60}<span>秒</span></li>
				<li>date.<a href="">getMilliseconds()</a>{0~1000}<span>毫秒</span></li>
				<li><a href="">Date.now()</a>{timestamp}<span>当前时间戳</span></li>
				<li>date.<a href="">getTime()</a>{timestamp}<span>时间戳，等同于date.valueOf()</span></li>
				<li><a href="">Date.parse(ISO)</a>{timestamp}<span>
					解析一个符合ISO 8601格式的字符串，并返回对应时间戳 <br>
					var d = Date.parse('2015-06-24T19:49:22.875+08:00'); <br>
					d; // 1435146562875
				</span></li>
				<li>date.<a href="">toString</a>()<span>
					Sat Oct 07 2017 01:36:58 GMT+0800 (中国标准时间)
				</span></li>
				<li>date.<a href="">toLocaleString</a>()<span>
					2017/10/7 上午1:33:06
				</span></li>
				<li>date.<a href="">toUTCString</a>()<span>
					Fri, 06 Oct 2017 17:33:06 GMT
				</span></li>
			</ul>
			<h4>[<span>+</span>]正则表达式</h4>
			<ul style="display:none">
				<li><a href="">new RegExp</a>('exp')<span>
					第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp('正则表达式')创建一个RegExp对象。<br>
					var re1 = /ABC\-001/; <br>
					var re2 = new RegExp('ABC\\-001');<br>
					注意，如果使用第二种写法，因为字符串的转义问题，字符串的两个\\实际上是一个\。 <hr>
					修饰符：<br>
					i：忽略大小写。 <br>
					g：全局匹配。 <br>
					m：多行模式。<br>
					<a href="http://javascript.ruanyifeng.com/stdlib/regexp.html">参考资料</a>
				</span></li>
				<li>RegExp.<a href="">test</a>(str)<span>
					返回：true/false
				</span></li>
				<li>RegExp.<a href="">exec</a>(str)<span>
					返回：匹配值/null <br>
					全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。当我们指定g标志后，每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引。
				</span></li>
			</ul>
			<h4>[<span>-</span>]其它</h4>
			<ul>
				<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/Using_FormData_Objects">new FormData()</a></li>
				<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">更多</a></li>
			</ul>
		</div>
	</div>
	<div class="u-block">
		<h3>Ajax<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]创建</h4>
			<ul>
				<li>
					<a href="">new XMLHttpRequest()</a>
					<span>
						IE5-6不支持，用ActiveX对象替代，new ActiveXObject("Microsoft.XMLHTTP")
					</span>
				</li>
				<li>
					xhr.<a href="">open</a><em>(method,url,async)</em>
					<span>
						规定请求的类型、URL 以及是否异步处理请求。 <br>
						method：请求的类型，GET 或 POST <br>
						url：文件在服务器上的位置<br>
						async：true（异步）或 false（同步）
					</span>
				</li>
				<li>
					xhr.<a href="">setRequestHeader</a><em>(header,val)</em>
					<span>
						向请求添加HTTP头 <br>
						xhr.setRequestHeader("Content-type","application/x-www-form-urlencoded") <br>
						该方法必须在open()之后、send()之前调用。
					</span>
				</li>
				<li>
					xhr.<a href="">send</a>(str)
					<span>
						将请求发送到服务器。 <br>
						string：仅用于post请求 
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]事件</h4>
			<ul>
				<li>
					xhr.<a href="">onreadystatechange</a>
					<span>
						存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。 <br>
						当 readyState 等于 4 且状态为 200 时，表示响应已就绪 <br>
						XMLHttpRequest第一版，只能对onreadystatechange这一个事件指定回调函数。
					</span>
				</li>
				<li>
					xhr.<a href="">onloadstart</a>
					<span>
						请求发出
					</span>
				</li>
				<li>
					xhr.<a href="">onprogress</a>
					<span>
						正在发送和加载数据
					</span>
				</li>
				<li>
					xhr.<a href="">onabort</a>
					<span>
						请求被中止，比如用户调用了abort()方法
					</span>
				</li>
				<li>
					xhr.<a href="">onerror</a>
					<span>
						请求失败
					</span>
				</li>
				<li>
					xhr.<a href="">onload</a>
					<span>
						请求成功完成
					</span>
				</li>
				<li>
					xhr.<a href="">ontimeout</a>
					<span>
						用户指定的时限到期，请求还未完成
					</span>
				</li>
				<li>
					xhr.<a href="">onloadend</a>
					<span>
						请求完成，不管成果或失败
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]属性</h4>
			<ul>
				<li>
					xhr.<a href="">timeout</a>
					<span>
						等于一个整数，表示多少毫秒后，如果请求仍然没有得到结果，就会自动终止
					</span>
				</li>
				<li>
					xhr.<a href="">withCredentials</a>
					<span>
						withCredentials属性是一个布尔值，表示跨域请求时，用户信息（比如Cookie和认证的HTTP头信息）是否会包含在请求之中，默认为false。 <br>
						如果你需要通过跨域AJAX发送Cookie，需要打开withCredentials。 <br>
						为了让这个属性生效，服务器必须显式返回Access-Control-Allow-Credentials这个头信息
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]方法</h4>
			<ul>
				<li>
					xhr.<a href="">abort()</a>
					<span>
						终止已经发出的HTTP请求 <br>
						ajax.abort();<br>
    					ajax = null;
					</span>
				</li>
				<li>
					xhr.<a href="">getAllResponseHeaders()</a>
					<span>
						getAllResponseHeaders方法返回服务器发来的所有HTTP头信息。格式为字符串，每个头信息之间使用CRLF分隔，如果没有受到服务器回应，该属性返回null。
					</span>
				</li>
				<li>
					xhr.<a href="">getResponseHeader</a>(key)
					<span>
						返回HTTP头信息指定字段的值，如果还没有收到服务器回应或者指定字段不存在，则该属性为null。
					</span>
				</li>
				<li>
					xhr.<a href="">overrideMimeType()</a>
					<span>
						该方法用来指定服务器返回数据的MIME类型。该方法必须在send()之前调用。
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]状态</h4>
			<ul>
				<li>
					xhr.<a href="">readyState</a>
					<span>
						0: 请求未初始化 <br>
						1: 服务器连接已建立 <br>
						2: 请求已接收 <br>
						3: 请求处理中 <br>
						4: 请求已完成，且响应已就绪
					</span>
				</li>
				<li>
					xhr.<a href="">status</a>
					<span>
						200, OK，访问正常 <br>
						301, Moved Permanently，永久移动<br>
						302, Move temporarily，暂时移动<br>
						304, Not Modified，未修改<br>
						307, Temporary Redirect，暂时重定向<br>
						401, Unauthorized，未授权<br>
						403, Forbidden，禁止访问<br>
						404, Not Found，未发现指定网址<br>
						500, Internal Server Error，服务器发生错误
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>]响应</h4>
			<ul>
				<li>
					xhr.<a href="">response</a>
					<span>
						只读，返回接收到的数据体
					</span>
				</li>
				<li>
					xhr.<a href="">responseText</a>
					<span>
						获得字符串形式的响应数据
					</span>
				</li>
				<li>
					xhr.<a href="">responseXML</a>
					<span>
						获得 XML 形式的响应数据
					</span>
				</li>
				<li>
					xhr.<a href="">repsonseType</a>
					<span>
						“”：字符串（默认值）  <br>
						“arraybuffer”：ArrayBuffer对象<br>
						“blob”：Blob对象,blob类型适合读取二进制数据，比如图片文件<br>
						“document”：Document对象,document类型适合返回XML文档的情况<br>
						“json”：JSON对象<br>
						“text”：字符串
					</span>
				</li>
			</ul>
		</div>
	</div>
	<div class="u-block">
		<h3>调试<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>]错误处理</h4>
			<ul style="display: none;">
				<li><a href="">new Error</a>('msg')<span>
					错误对象属性：
					<table>
						<tr>
							<th>属性</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>err.message</td>
							<td>错误提示信息</td>
						</tr>
						<tr>
							<td>err.name</td>
							<td>错误名称（非标准属性）</td>
						</tr>
						<tr>
							<td>err.stack</td>
							<td>错误的堆栈（非标准属性）</td>
						</tr>
					</table>
					<br>
					原生错误类型：
					<table>
						<tr>
							<th>名称</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>SyntaxError</td>
							<td>解析代码时发生的语法错误</td>
						</tr>
						<tr>
							<td>ReferenceError</td>
							<td>引用一个不存在的变量时发生的错误；将一个值分配给无法分配的对象</td>
						</tr>
						<tr>
							<td>RangeError</td>
							<td>当一个值超出有效范围时发生的错误</td>
						</tr>
						<tr>
							<td>TypeError</td>
							<td>变量或参数不是预期类型时发生的错误</td>
						</tr>
						<tr>
							<td>URIError</td>
							<td>URI相关函数的参数不正确时抛出的错误</td>
						</tr>
						<tr>
							<td>EvalError</td>
							<td>eval函数没有被正确执行</td>
						</tr>
						<tr>
							<td>自定义错误</td>
							<td><a href="http://javascript.ruanyifeng.com/grammar/error.html">参考资料</a></td>
						</tr>
					</table>

					<br><br>
					如果在一个函数内部发生了错误，它自身没有捕获，错误就会被抛到外层调用函数，如果外层函数也没有捕获，该错误会一直沿着函数调用链向上抛出，直到被JavaScript引擎捕获，代码终止执行。所以，我们不必在每一个函数内部捕获错误，只需要在合适的地方来个统一捕获，一网打尽。<hr>
					涉及到异步代码，无法在调用时捕获，原因就是在捕获的当时，回调函数并未执行。<br>
					类似的，当我们处理一个事件时，在绑定事件的代码处，无法捕获事件处理函数的错误。
				</span></li>
				<li><a href="">throw</a> err<span>
					throw语句的作用是中断程序执行，抛出一个意外或错误。它接受一个表达式作为参数，可以抛出各种值。 <br>
					throw可以接受各种值作为参数。JavaScript引擎一旦遇到throw语句，就会停止执行后面的语句，并将throw语句的参数值，返回给用户。
				</span></li>
				<li><a href="">try{..}cath(e){..}finally{..}</a><span>
					<pre><code data-language="javascript">
						try {
						    //可能出错的语句
						    throw new Error('出错了!');
						} catch (e) {
						    //捕获e错误对象,try中抛出的错误对象
						} finally {
						    //总会执行
						    //执行finally代码块以后，程序就中断在错误抛出的地方。
						}
					</code></pre>
				</span></li>
				
				<li><em>source map</em><a href=""></a><span>
				Source map就是一个信息文件，里面储存着位置信息。也就是说，转换后的代码的每一个位置，所对应的转换前的位置。有了它，出错的时候，除错工具将直接显示原始代码，而不是转换后的代码。<a href="http://www.ruanyifeng.com/blog/2013/01/javascript_source_map.html">参考资料</a>
				</span></li>
			</ul>
			<h4>[<span>+</span>]控制台</h4>
			<ul style="display: none;">
				<li>
					console.<a href="">log</a>()
					<span>
						console.log() <br>
						console.debug() <br>
						console.info() - 蓝色图标 <br>
						console.warn() - 黄色三角 <br>
						console.error() - 红色叉叉 <br>
						console.table() - 表格显示 <br>
						console.clear() - 清空
					</span>
				</li>
				<li>
					console.<a href="">count</a>(var)
					<span>
						用于计数，输出它被调用了多少次
					</span>
				</li>
				<li>
					console.<a href="">dir</a>(dom)
					<span>
						该方法对于输出 DOM 对象非常有用，因为会显示 DOM 对象的所有属性。 <br>
						console.dirxml(dom) : 以目录树的形式，显示 DOM 节点
					</span>
				</li>
				<li>
					console.<a href="">assert</a>(false,'msg')
					<span>
						<a href="http://javascript.ruanyifeng.com/stdlib/console.html">参考资料</a>
					</span>
				</li>
				<li>
					console.<a href="">time/timeEnd</a>(name)
					<span>
						time方法表示计时开始，timeEnd方法表示计时结束。它们的参数是计时器的名称。 <br>
						放在一个需要计时的代码起始与末尾。
					</span>
				</li>
				<li>
					console.<a href="">profile/profileEnd</a>(name)
					<span>
						新建一个性能测试器。类同time，在profile面板中，可以看到这个性能调试器的运行结果
					</span>
				</li>
				<li>
					console.<a href="">group/groupend</a>(name)
					<span>
						分组展示，可用鼠标折叠展开。 <br>
						console.groupCollapsed() 默认第一次是折叠的。
					</span>
				</li>
				<li>
					console.<a href="">trace()</a>
					<span>
						显示当前执行的代码在堆栈中的调用路径
					</span>
				</li>
				<li>
					<a href="">debugger</a>
					<span>
						debugger语句主要用于除错，作用是设置断点
					</span>
				</li>
			</ul>
			<h4>[<span>+</span>]笔记</h4>
			<ul style="display:none;">
				<li><a href="">避免变量未定义报错</a><span>
					1.条件判断：取属性的时候可多加一层判断，以防属性值对象报错。 <br>
					if (banner && banner.length) <br>
					2.未定义检测：typeof v === "undefined" <br>
				</span></li>
				<li>
					<a href="">销毁变量释放内存</a>
					<span>
						当必要时，设置原变量为null来释放内存
					</span>
				</li>
			</ul>
		</div>
	</div>
	<div class="u-block">
		<h3>参考资料<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>]文档</h4>
			<ul style="display: none;">
				<li><a href="https://developer.mozilla.org/zh-CN/docs/Web">MDN Web技术文档</a></li>
				<li><a href="http://kangax.github.io/compat-table/es6/">ES6支持程度</a></li>
				<li><a href="http://yanhaijing.com/es5/">ECMAScript5规范</a></li>
				<li><a href="http://www.runoob.com/jsref/jsref-tutorial.html">Javascript参考手册</a></li>
				<li><a href="http://devdocs.io/">全栈API参考手册</a></li>
			</ul>
			<h4>[<span>+</span>]教程</h4>
			<ul style="display: none;">
				<li><a href="http://javascript.ruanyifeng.com">ES5教程</a></li>
				<li><a href="http://es6.ruanyifeng.com">ES6教程</a></li>
				<li><a href="https://www.tslang.cn/">TypeScript</a></li>
				<li><a href="http://coffee-script.org">CoffeeScript</a></li>
			</ul>
			<h4>[<span>+</span>]动态</h4>
			<ul style="display: none;">
				<li><a href="https://www.awesomes.cn/">前端库大全</a></li>
				<li><a href="https://juejin.im/welcome/frontend">掘金社区</a></li>
				<li><a href="https://www.zhihu.com/topic/19550901/hot">知乎话题</a></li>
			</ul>
			<h4>[<span>+</span>]工具</h4>
			<ul style="display: none;">
				<li><a href="https://codepen.io/pen">CodePen</a></li>
				<li><a href="http://www.bejson.com/">Bejson</a></li>
			</ul>
		</div>
	</div>
</div>