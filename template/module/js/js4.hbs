<!-- 数据交换 -->
<div class="u-col">
	<div class="u-block">
		<h3>数据<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]JSON</h4>
			<ul>
				<li><em>json</em><a href=""></a><span>
					概念：
					<br />它是一种表示结构化数据的形式，JSON是一个格式化的字符串，文件格式后缀为.json
					<hr>
					语法：
					<br />简单值：字符串、数值、布尔值、null，不支持undefined
					<br />对象：一组无序的键值对
					<br />数组：一组有序的值的列表，可以通过索引来访问
					<hr>
					JSON与JS的区别：
					<br />JSON字符串必须使用双引号（单引号会导致语法错误），且对象的属性必须加双引号
					<br />在JS中直接引入一段JSON数据应该用单引号将其括起来，因为它其实代表一个字符串
					<br />如：'{"name" : "Lee","age" : 100}' JSON数组与对象比普通JS少了分号与赋值，其本身表示的是字符串
					<hr>
					兼容性：
					<br>IE7及IE7-需要引用库文件 <a href="https://github.com/douglascrockford/JSON-js/">json-js</a>
					<textarea><!--[if lte IE 7]> json2.js <![endif]--></textarea>
					<hr>
					执行优先级：
					<br>toJSON() --> 过滤参数 --> 标准序列化 --> 缩进 
如在toJSON中已被过滤的键值则就算过滤参数中仍有设置也已无效
				</span></li>
				<li><a href="">JSON.stringify</a><em>(obj,[arr(key)|fn(key,val)|null],[space|num])</em><span>
					js对象 -> json字符串 <hr>
					参数1：传入的对象。<br>
					如有键值为函数时，会排除该成员。我们可以在转换前将函数用.toString()方法转换为字符串来避免以上问题的发生。<br>
					如有键值为日期对象时，会转为字符串。
					<hr>
					参数2：用于转换结果的函数或数组 <br>
					当为数组时，显示指定的key，['key1','key2'] <br>
					当为函数时，每个键值对根据函数规则处理，function(key,value){...return value}，<b>函数需返回新的value</b>。<b>如果此函数返回 undefined，则排除成员。</b>
					<hr>
					参数3：缩进空格，当不传入fn只设置缩进时，第2个参数传入null。如果space 是一个数字，则返回值文本在每个级别缩进指定数目的空格。
				</span></li>
				<li><a href="">JSON.parse</a>(json,[fn(key,val)])<span>
					json字符串 -> js对象 <br>
					转换函数需返回value值。
				</span></li>
				<li>obj.<a href="">toJSON</a><em>:fn(){return json}</em><span>
				   JS对象中添加toJSON()方法，自定义过滤一些数据，返回新的对象
<pre><code data-language="javascript">
	var xiaoming = {
	    name: '小明',
	    age: 14,
	    gender: true,
	    height: 1.65,
	    grade: null,
	    'middle-school': '\"W3C\" Middle School',
	    skills: ['JavaScript', 'Java', 'Python', 'Lisp'],
	    toJSON: function () {
	        return { // 只输出name和age，并且改变了key：
	            'Name': this.name,
	            'Age': this.age
	        };
	    }
	};

	JSON.stringify(xiaoming); // '{"Name":"小明","Age":14}'
</code></pre>
				</span></li>
			</ul>
			<h4>[<span>-</span>]Ajax</h4>
			<ul>
				<li></li>
			</ul>
			<h4>[<span>-</span>]Cookie</h4>
			<ul>
				<li></li>
			</ul>
		</div>
	</div>
</div>