<!-- 标准库 -->
<div class="u-col">
	<div class="u-block">
		<h3>标准对象<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]数学</h4>
			<ul>
				<li><a href="">Math.random()</a><span>
					返回 0 ~ 1 之间的随机数 <br>
					1.随机颜色16进制：Math.floor( Math.random() * 16777215 ).toString( 16 ) <br>
					2.2个值之间的随机值：function random(min,max){return min + (max-min)*Math.random();}
				</span></li>
				<li><a href="">Math.max/min</a>(x,y,z..n)<span>
					返回 x,y,z,...,n 中的最高/低值 <br>
					参数中最大的值。如果没有参数，则返回 -Infinity。如果有某个参数为 NaN，或是不能转换成数字的非数字值，则返回 NaN。
				</span></li>
				<li><a href="">Math.abs</a>(x)<span>返回 x 的绝对值</span></li>
				<li><a href="">Math.ceil/floor/round</a>(x)<span>对数进行上/下舍入/四舍五入</span></li>
				<li><a href="">Math.sqrt</a>(x)<span>返回x的平方根</span></li>
				<li><a href="">Math.pow</a>(x,y)<span>返回x的y次幂</span></li>
				<li><a href="">Math.exp</a>(x)<span>返回E(x)的指数</span></li>
				<li><a href="">Math.log</a>(x)<span>返回数的自然对数（底为e）</span></li>
				<li><a href="">Math.CONST</a><span>
					<table>
						<tr>
							<th>属性</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>E</td>
							<td>返回算术常量 e，即自然对数的底数（约等于2.718）</td>
						</tr>
						<tr>
							<td>LN2</td>
							<td>返回 2 的自然对数（约等于0.693）</td>
						</tr>
						<tr>
							<td>LN10</td>
							<td>返回 10 的自然对数（约等于2.302）</td>
						</tr>
						<tr>
							<td>LOG2E</td>
							<td>返回以 2 为底的 e 的对数（约等于 1.414）</td>
						</tr>
						<tr>
							<td>LOG10E</td>
							<td>返回以 10 为底的 e 的对数（约等于0.434）</td>
						</tr>
						<tr>
							<td>PI</td>
							<td>返回圆周率（约等于3.14159）</td>
						</tr>
						<tr>
							<td>SQRT1_2</td>
							<td>返回返回 2 的平方根的倒数（约等于 0.707）</td>
						</tr>
						<tr>
							<td>SQRT2</td>
							<td>返回 2 的平方根（约等于 1.414）</td>
						</tr>
					</table>
				</span></li>
				<li><a href="">Math.三角函数</a><span>
					<table>
						<tr>
							<th>函数</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>Math.sin(x)</td>
							<td>返回数的正弦</td>
						</tr>
						<tr>
							<td>>Math.asin(x)</td>
							<td>返回 x 的反正弦值</td>
						</tr>
						<tr>
							<td>Math.cos(x)</td>
							<td>返回数的余弦</td>
						</tr>
						<tr>
							<td>Math.acos(x)</td>
							<td>返回 x 的反余弦值</td>
						</tr>
						<tr>
							<td>Math.tan(x)</td>
							<td>返回角的正切</td>
						</tr>
						<tr>
							<td>Math.atan(x)</td>
							<td>以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值</td>
						</tr>
						<tr>
							<td>Math.atan2(y,x)</td>
							<td>返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）</td>
						</tr>
					</table>
				</span></li>
			</ul>
			<h4>[<span>-</span>]日期时间</h4>
			<ul>
				<li><a href="">new Date</a>([arg..,timestamp])<span>
					返回：日期对象 <hr>
					无参数时：创建计算机当前时间的日期对象 <br>
					var date = new Date(); <br>
					Sat Oct 07 2017 01:20:24 GMT+0800 (中国标准时间) <hr>
					有参数时：创建指定时间的日期对象 <br>
					var date = new Date(2015, 5, 19, 20, 15, 30, 123); <br>
					var date = new Date(1435146562875); <br>
					当前时间是浏览器从本机操作系统获取的时间，所以不一定准确，因为用户可以把当前时间设定为任何值。
				</span></li>
				<li>date.<a href="">getFullYear()</a>{2017}<span>年份</span></li>
				<li>date.<a href="">getMonth()</a>{0~11}<span>月份，范围0~11</span></li>
				<li>date.<a href="">getDate()</a>{1~31}<span>日期</span></li>
				<li>date.<a href="">getDay()</a>{1~7}<span>星期</span></li>
				<li>date.<a href="">getHours()</a>{0~24}<span>时，24小时制</span></li>
				<li>date.<a href="">getMinutes()</a>{0~60}<span>分</span></li>
				<li>date.<a href="">getSeconds()</a>{0~60}<span>秒</span></li>
				<li>date.<a href="">getMilliseconds()</a>{0~1000}<span>毫秒</span></li>
				<li><a href="">Date.now()</a>{timestamp}<span>当前时间戳</span></li>
				<li>date.<a href="">getTime()</a>{timestamp}<span>时间戳</span></li>
				<li><a href="">Date.parse(ISO)</a>{timestamp}<span>
					解析一个符合ISO 8601格式的字符串，并返回对应时间戳 <br>
					var d = Date.parse('2015-06-24T19:49:22.875+08:00'); <br>
					d; // 1435146562875
				</span></li>
				<li>date.<a href="">toString</a>()<span>
					Sat Oct 07 2017 01:36:58 GMT+0800 (中国标准时间)
				</span></li>
				<li>date.<a href="">toLocaleString</a>()<span>
					2017/10/7 上午1:33:06
				</span></li>
				<li>date.<a href="">toUTCString</a>()<span>
					Fri, 06 Oct 2017 17:33:06 GMT
				</span></li>
			</ul>
			<h4>[<span>-</span>]正则表达式</h4>
			<ul>
				<li><a href="">new RegExp</a>('exp')<span>
					第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp('正则表达式')创建一个RegExp对象。<br>
					var re1 = /ABC\-001/; <br>
					var re2 = new RegExp('ABC\\-001');<br>
					注意，如果使用第二种写法，因为字符串的转义问题，字符串的两个\\实际上是一个\。
				</span></li>
				<li>RegExp.<a href="">test</a>(str)<span>
					返回：true/false
				</span></li>
				<li>RegExp.<a href="">exec</a>(str)<span>
					返回：匹配值/null <br>
					全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。当我们指定g标志后，每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引。
				</span></li>
			</ul>
		</div>
	</div>
</div>