<!-- 标准库 -->
<div class="u-col">
	<div class="u-block">
		<h3>标准对象<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>+</span>]数学</h4>
			<ul style="display:none;">
				<li><a href="">Math.PI</a><span>
					<table>
						<tr>
							<th>属性</th>
							<th>描述</th>
						</tr>
						<tr>
							<td>E</td>
							<td>返回算术常量 e，即自然对数的底数（约等于2.718）</td>
						</tr>
						<tr>
							<td>LN2</td>
							<td>返回 2 的自然对数（约等于0.693）</td>
						</tr>
						<tr>
							<td>LN10</td>
							<td>返回 10 的自然对数（约等于2.302）</td>
						</tr>
						<tr>
							<td>LOG2E</td>
							<td>返回以 2 为底的 e 的对数（约等于 1.414）</td>
						</tr>
						<tr>
							<td>LOG10E</td>
							<td>返回以 10 为底的 e 的对数（约等于0.434）</td>
						</tr>
						<tr>
							<td>PI</td>
							<td>返回圆周率（约等于3.14159）</td>
						</tr>
						<tr>
							<td>SQRT1_2</td>
							<td>返回返回 2 的平方根的倒数（约等于 0.707）</td>
						</tr>
						<tr>
							<td>SQRT2</td>
							<td>返回 2 的平方根（约等于 1.414）</td>
						</tr>
					</table>
				</span></li>
				
				<li><a href="">Math.random()</a><span>
					返回 0 ~ 1 之间的随机数 <br>
					1.随机颜色16进制：Math.floor( Math.random() * 16777215 ).toString( 16 )
					2.2个值之间的随机值：function random(min,max){return min + (max-min)*Math.random();}
				</span></li>
				<li><a href="">Math.max</a>(x,y,z..n)<span>
					返回 x,y,z,...,n 中的最高值 <br>
					参数中最大的值。如果没有参数，则返回 -Infinity。如果有某个参数为 NaN，或是不能转换成数字的非数字值，则返回 NaN。
				</span></li>
				<li><a href="">Math.min</a>(x,y,z..n)<span>返回 x,y,z,...,n中的最低值</span></li>
				<li><a href="">Math.abs</a>(x)<span>返回 x 的绝对值</span></li>
				<li><a href="">Math.ceil</a>(x)<span>对数进行上舍入</span></li>
				<li><a href="">Math.floor</a>(x)<span>对 x 进行下舍入</span></li>
				<li><a href="">Math.round</a>(x)<span>把数四舍五入为最接近的整数</span></li>

				<li><a href="">Math.pow</a>(x,y)<span>返回 x 的 y 次幂</span></li>
				<li><a href="">Math.sqrt</a>(x,y)<span>返回数的平方根</span></li>
				<li><a href="">Math.exp</a>(x)<span>返回E(x)的指数</span></li>
				<li><a href="">Math.log</a>(x)<span>返回数的自然对数（底为e）</span></li>

				<li><a href="">Math.sin</a>(x)<span>返回数的正弦</span></li>
				<li><a href="">Math.asin</a>(x)<span>返回 x 的反正弦值</span></li>
				<li><a href="">Math.cos</a>(x)<span>返回数的余弦</span></li>
				<li><a href="">Math.acos</a>(x)<span>返回 x 的反余弦值</span></li>
				
				<li><a href="">Math.tan</a>(x)<span>返回角的正切</span></li>
				<li><a href="">Math.atan</a>(x)<span>以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值</span></li>
				<li><a href="">Math.atan2</a>(y,x)<span>返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）</span></li>
			</ul>
			<h4>[<span>+</span>]日期时间</h4>
			<ul style="display:none;">
				<li><a href="">new Date</a>([arg..,timestamp])<span>
					返回：日期对象 <hr>
					无参数时：创建计算机当前时间的日期对象 <br>
					var date = new Date(); <br>
					Sat Oct 07 2017 01:20:24 GMT+0800 (中国标准时间) <hr>
					有参数时：创建指定时间的日期对象 <br>
					var date = new Date(2015, 5, 19, 20, 15, 30, 123); <br>
					var date = new Date(1435146562875); <br>
					当前时间是浏览器从本机操作系统获取的时间，所以不一定准确，因为用户可以把当前时间设定为任何值。
				</span></li>
				<li>date.<a href="">getFullYear()</a>{2017}<span>年份</span></li>
				<li>date.<a href="">getMonth()</a>{0~11}<span>月份，范围0~11</span></li>
				<li>date.<a href="">getDate()</a>{1~31}<span>日期</span></li>
				<li>date.<a href="">getDay()</a>{1~7}<span>星期</span></li>
				<li>date.<a href="">getHours()</a>{0~24}<span>时，24小时制</span></li>
				<li>date.<a href="">getMinutes()</a>{0~60}<span>分</span></li>
				<li>date.<a href="">getSeconds()</a>{0~60}<span>秒</span></li>
				<li>date.<a href="">getMilliseconds()</a>{0~1000}<span>毫秒</span></li>
				<li><a href="">Date.now()</a>{timestamp}<span>当前时间戳</span></li>
				<li>date.<a href="">getTime()</a>{timestamp}<span>时间戳</span></li>
				<li><a href="">Date.parse(ISO)</a>{timestamp}<span>
					解析一个符合ISO 8601格式的字符串，并返回对应时间戳 <br>
					var d = Date.parse('2015-06-24T19:49:22.875+08:00'); <br>
					d; // 1435146562875
				</span></li>
				<li>date.<a href="">toString</a>()<span>
					Sat Oct 07 2017 01:36:58 GMT+0800 (中国标准时间)
				</span></li>
				<li>date.<a href="">toLocaleString</a>()<span>
					2017/10/7 上午1:33:06
				</span></li>
				<li>date.<a href="">toUTCString</a>()<span>
					Fri, 06 Oct 2017 17:33:06 GMT
				</span></li>
			</ul>
			<h4>[<span>+</span>]正则表达式</h4>
			<ul style="display:none;">
				<li><a href="">new RegExp</a>('exp')<span>
					第一种方式是直接通过/正则表达式/写出来，第二种方式是通过new RegExp('正则表达式')创建一个RegExp对象。<br>
					var re1 = /ABC\-001/; <br>
					var re2 = new RegExp('ABC\\-001');<br>
					注意，如果使用第二种写法，因为字符串的转义问题，字符串的两个\\实际上是一个\。
				</span></li>
				<li>RegExp.<a href="">test</a>(str)<span>
					返回：true/false
				</span></li>
				<li>RegExp.<a href="">exec</a>(str)<span>
					返回：匹配值/null <br>
					全局匹配可以多次执行exec()方法来搜索一个匹配的字符串。当我们指定g标志后，每次运行exec()，正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引。
				</span></li>
			</ul>
			<h4>[<span>-</span>]JSON</h4>
			<ul>
				<li><a href="">JSON概念</a><span>
					概念：
					<br />它是一种表示结构化数据的形式，JSON是一个格式化的字符串，文件格式后缀为.json
					<br /><br />语法：
					<br />简单值：字符串、数值、布尔值、null，不支持undefined
					<br />对象：一组无序的键值对
					<br />数组：一组有序的值的列表，可以通过索引来访问
					<br /><br />JSON与JS的区别：
					<br />JSON字符串必须使用双引号（单引号会导致语法错误），且对象的属性必须加双引号
					<br />在JS中直接引入一段JSON数据应该用单引号将其括起来，因为它其实代表一个字符串
					<br />如：'{"name" : "Lee","age" : 100}'
					<br />JSON数组与对象比普通JS少了分号与赋值，其本身表示的是字符串
				</span></li>
				<li><a href="">eval</a>('json_str')<span>
					<br />方法一：eval('json_str')
					<br />方法二：JSON对象内置方法(ECMA5)
					<br />*说明：IE7及IE7-需要引用库文件 https://github.com/douglascrockford/JSON-js/
					<br /><textarea name="" id="" cols="30" rows="10"><!--[if lte IE 7]> json2.js <![endif]--></textarea>
				</span></li>
				<li><a href="">JSON.parse</a>('json_str')<span>
					解析（JSON>JS）：把JSON字符串解析为原生JS值
					<br /><textarea name="" id="" cols="60" rows="10">
						JSON.parse('json_str',[还原函数])
						var box = '[{"name" : "a","age" : 1},{"name" : "b","age" : 2}]';
						var json = JSON.parse(box, function (key, value) {
						if (key == 'name') {
						return 'Mr. ' + value;
						} else {
						return value;
						}
						});
						alert(json[0].name);
					</textarea>
				</span></li>
				<li><a href="">JSON.stringify</a>(js_obj)<span>
					转换（JS>JSON）把JS对象序列化为JSON字符串
					<br />JSON.stringify(js_obj,[过滤函数/数组],[缩进])   
					<br />过滤器与缩进为可选 ，当只保留缩进但不过滤时，将过滤器设置为null
					<br />1. 过滤器数组：指定需要的键
					<br /><textarea name="" id="" cols="60" rows="10">
						var box = [{name : 'a', age : 1, height : 177},{name : 'b', age : 2, height : 188}];
						var json = JSON.stringify(box, ['name', 'age'] , 4);
						alert(json);
					</textarea>
					<br />2. 过滤函数：过滤函数与还原函数都接受两个参数，即键和值，都需要返回一个值
					<br /><textarea name="" id="" cols="60" rows="10">
						var box = [{name : 'a', age : 1, height : 177},{name : 'b', age : 2, height : 188}];
						var json = JSON.stringify(box, function (key, value) {
						switch (key) {
						case 'name' :
						return 'Mr. ' + value;
						case 'age' :
						return value + '岁';
						default :
						return value;
						}
						}, 4);
						alert(json);
					</textarea>
					<br />3. 缩进：可以为数字（空格）或指定符号
				</span></li>
				<li><a href="">toJSON()</a><span>
				   JS对象中添加toJSON()方法，自定义过滤一些数据<br />
					<textarea name="" id="" cols="60" rows="10">
						var box = [{name : 'a', age : 1, height : 177, toJSON : function () {
						return this.name;
						}},{name : 'b',age : 2, height : 188, toJSON : function () {
						return this.name;
						}}];
					</textarea>
				</span></li>
				<li><a href="">执行优先级</a><span>
					执行优先级：toJSON() --> 过滤参数 -->  标准序列化 -->  缩进
					<br />如在toJSON中已被过滤的键值则就算过滤参数中仍有设置也已无效
				</span></li>
				<li><a href=""></a><span></span></li>
			</ul>
			<h4>[<span>-</span>]Ajax</h4>
			<ul>
				<li></li>
			</ul>
		</div>
	</div>
	<div class="u-block">
		<h3>事件<span>+</span></h3>
		<div class="u-list" style="display:none;">
			<h4>[<span>-</span>]动画</h4>
			<ul>
				<li><a href="">手机端需添加-webkit-前缀</a><span></span></li>
				<li><a href="">transitionend</a><span>CSS 完成过渡后触发</span></li>
				<li><a href="">animationend</a><span>CSS动画结束播放时触发</span></li>
				<li><a href="">animationiteration</a><span>CSS 动画重复播放时触发</span></li>
				<li><a href="">animationstart</a><span>CSS 动画开始播放时触发</span></li>
			</ul>
			<h4>[<span>-</span>]移动端</h4>
			<ul>
				<li><a href="">onorientationchange</a><span>
					屏幕旋转事件，检测终端类型
					<br />var screenStatus = "onorientationchange" in window ? "orientationchange" : "resize";
					<br />window.orientation = 90/-90为横屏
					</span></li>
				<li><a href="">touchstart</a><span>当手指接触屏幕时触发</span></li>
				<li><a href="">touchmove</a><span>当已经接触屏幕的手指开始移动后触发</span></li>
				<li><a href="">touchend</a><span>当手指离开屏幕时触发</span></li>
				<li><a href="">gesturestart</a><span>当两个手指接触屏幕时触发</span></li>
				<li><a href="">gesturechange</a><span>当两个手指接触屏幕后开始移动时触发</span></li>
				<li><a href="">gestureend</a><span>当两个手指离开屏幕时触发</span></li>
				<li><a href="">orientationchange </a><span>检测触摸屏幕的手指何时改变方向</span></li>
				<li><a href=""></a><span></span></li>
				<li><a href=""></a><span></span></li>
				<li><a href=""></a><span></span></li>
				<li><a href=""></a><span></span></li>
				<li><a href=""></a><span></span></li>
			</ul>
			<h4>[<span>-</span>]Form</h4>
			<ul>
				<li><a href=""></a><span></span></li>
			</ul>
			<h4>[<span>-</span>]鼠标</h4>
			<ul>
				<li><a href=""></a><span></span></li>
			</ul>
			<h4>[<span>-</span>]键盘</h4>
			<ul>
				<li><a href=""></a><span></span></li>
			</ul>
		</div>
	</div>
</div>