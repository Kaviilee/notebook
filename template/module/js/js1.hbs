<!-- 字符串 -->
<div class="u-col">
	<div class="u-block">
		<h3>字符串<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]String</h4>
			<ul>
				<li>define<a href=""></a><span>
					多行字符串表示法：<br>
					ES5：'string1 \n' + 'string2' <br>
					ES6：`string1 <br>string2` 
					<hr>
					模板字符串：<br>
					var v_1 = 'string' ;
					var v_2 = 2;
					var msg = `test,${v_1},${v_2}` <hr>
					需要特别注意的是，字符串是不可变的，如果对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果。
				</span></li>
			</ul>
			<h4>[<span>-</span>]字符位置</h4>
			<ul>
				<li><a href="">charAt(N)</a><span>返回索引上的字符</span></li>
				<li><a href="">charCodeAt(N)</a><span>返回在指定的位置的字符的 Unicode 编码</span></li>
				<li><a href="">indexOf("A",n)</a><span>返回索引位置，正向查找字符所在的索引</span></li>
				<li><a href="">lastIndexOf("A",n)</a><span>返回索引位置，逆向查找</span></li>
			</ul>
			<h4>[<span>-</span>]位置筛选</h4>
			<ul>
				<li><a href="">slice / substring(n,m)</a><span>显示索引范围内的字符串，返回新字符串，包含起始不包含结尾</span></li>
				<li><a href="">substr(n,x)</a><span>显示指定索引起范围内的字符串，返回新字符串
					<br>slice / substring / substr 负数
					<br>单个负数：
					<br>alert(box.slice(-3)); //Lee，6+(-3)=3 位开始 length-n
					<br>alert(box.substring(-3)); //Mr.Lee 负数返回全部 返回全部
					<br>alert(box.substr(-3)); //Lee，6+(-3)=3 位开始 length-n
					<br>第二位负数：
					<br>alert(box.slice(3, -1)); //Le 6+(-1)=5, (3,5) a,length-n
					<br>alert(box.substring(3, -1)); //Mr. 第二参为负，直接转 0，并且方法会把较小的数字提前，(0,3) a,0
					<br>alert(box.substr(3, -1)); //'' 第二参数为负，直接转 0 ，(3,0) a,0
					</span></li>
			</ul>
			<h4>[<span>-</span>]匹配替换</h4>
			<ul>
				<li><a href="">match(正则/匹配值)</a><span>返回数组，没找到则返回null，正则识别全局</span></li>
				<li><a href="">search(正则/匹配值)</a><span>返回起始的索引，没找到则返回-1，始终从头开始找，找到一个即返回，正则无需全局设置 strt </span></li>
				<li><a href="">replace(正则/匹配值,"替换目标") </a><span>返回新字符串对象，识别正则全局，function可内含一个switch控制流</span></li>
			</ul>
			<h4>[<span>-</span>]串联分割</h4>
			<ul>
				<li><a href="">concat()</a><span>返回新字符串，串联</span></li>
				<li><a href="">split(*/正则,N)</a><span>返回数组，把字符串按指定符号或正则分割为字符串数组</span></li>
			</ul>
			<h4>[<span>-</span>]其他方法</h4>
			<ul>
				<li><a href="">trim()</a><span>返回新字符串，删除前置与后置空格</span></li>
				<li><a href="">toUpperCase()</a><span>返回新字符串，转换大写 toLocaleUpperCase()</span></li>
				<li><a href="">toLowerCase()</a><span>返回新字符串，转换小写 toLocaleLowerCase()  </span></li>
				<li><a href="">localeCompare()</a><span>大写小写，在之后（大于），返回1，在之前（小于），返回-1，相等，返回0</span></li>
				<li><a href="">String.fromCharCode(编码)</a><span>返回编码转回的字符串</span></li>
			</ul>
			<h4>[<span>-</span>]数字</h4>
			<ul>
				<li><a href="">Finity</a><span>
					Finity isFinite(---) 判断是否为无穷
						<table border="1" cellspacing="0" cellpadding="2">
						<tbody>
						<tr>
						<td valign="top">
						最大值</td>
						<td valign="top">
						Number.MAX_VALUE 1.79e+308</td>
						</tr>
						<tr>
						<td valign="top">
						<div>最小值</div></td>
						<td valign="top">
						Number.MIN_VALUE 5e-324</td>
						</tr>
						<tr>
						<td valign="top">
						<div>正无穷</div></td>
						<td valign="top">
						Number.POSITIVE_INFINITY</td>
						</tr>
						<tr>
						<td valign="top">
						<div>负无穷</div></td>
						<td valign="top">
						Number.NEGATIVE_INFINITY</td>
						</tr>
						</tbody>
						</table>
						<ul>
							<li>科学计数法，浮点数+e+10的指数</li>
							<li>0/0=NaN，正数/0=正无穷，负数/0=负无穷</li>
							<li>正无穷+正无穷=正无穷，负无穷+负无穷=负无穷，正无穷+负无穷=NaN</li>
							<li>无穷乘法操作得到无穷，无穷除法与求余操作得到NaN</li>
						</ul>
				</span></li>
				<li><a href="">NaN</a><span>
						NaN isNaN(---) 判断是否为NaN
							<table border="1" cellspacing="0" cellpadding="2">
							<tbody>
							<tr>
							<td valign="top">Number.NaN</td>
							<td valign="top">
							得到 NaN 值</td>
							</tr>
							<tr>
							<td valign="top">
							var box = 0 / 0; //NaN
							var box = 12 / 0; //Infinity
							var box = 12 / 0 * 0; //NaN</td>
							<td valign="top">
							任何与 NaN 进行运算的结果均为 NaN</td>
							</tr>
							<tr>
							<td valign="top">alert(NaN == NaN) //false</td>
							<td valign="top">NaN 与自身不相等(NaN 不与任何值相等)</td>
							</tr>
							</tbody>
							</table>
							<ul>
								<li>isNaN()函数也适用于对象。</li>
								<li>在调用 isNaN()函数过程中，首先会调用 valueOf()方法， 然后确定返回值是否能够转换成数值。如果不能，则基于这个返回值再调用 toString()方法，再测试返回值。</li>
								<li>只要NaN参与的运算均为NaN</li>
							</ul>
				</span></li>
				<li><a href="">toFixed(N)</a><span>把数字转换为字符串，结果的小数点后有指定位数的数字。</span></li>
				<li><a href="">toString(进制)</a><span>把数字转换为字符串，使用指定的基数。</span></li>
				<li><a href="">toLocaleString()</a><span>根据本地数字格式转换为字符串 1,000.789</span></li>
				<li><a href="">toExponential(N)</a><span>把对象的值转换为指数计数法。N小数点后位数</span></li>
				<li><a href="">toPrecision(N)</a><span>把数字格式化为指定的长度。N为显示位数，自动选择toFixed() toExponential(N)两者之一。</span></li>
			</ul>
			<h4>[<span>-</span>]编码</h4>
			<ul>
				<li><a href="">decodeURI()</a><span>解码某个编码的 URI。</span></li>
				<li><a href="">decodeURIComponent()</a><span>解码一个编码的 URI 组件。</span></li>
				<li><a href="">encodeURI()</a><span>把字符串编码为 URI。</span></li>
				<li><a href="">encodeURIComponent()</a><span>把字符串编码为 URI 组件。</span></li>
				<li><a href="">escape()</a><span>对字符串进行编码。</span></li>
				<li><a href="">unescape()</a><span>对由 escape() 编码的字符串进行解码。</span></li>
				<li><a href="">eval()</a><span>计算 JavaScript 字符串，并把它作为脚本代码来执行。</span></li>
			</ul>
		</div>
	</div>
</div>