<!-- 函数、对象 -->
<div class="u-col">
	<div class="u-block">
		<h3>函数<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]内部属性/对象</h4>
			<ul>
				<li><a href="">arguments</a><span>函数的参数对象
					<div><span style="font-size: small;"><b>argument<span style="color: #e30000;">s</span>对象</b> （类数组对象，但检测不是数组类型）</span></div>
						<div>
						<table width="100%" border="1" cellspacing="0" cellpadding="2">
						<tbody>
						<tr>
						<td valign="top">
						<div><span style="font-size: small;">arguments[0]</span></div></td>
						<td valign="top">
						<div><span style="font-size: small;">第一个参数名字</span></div></td>
						</tr>
						<tr>
						<td valign="top">
						<div><span style="font-size: small;">arguments.length</span></div></td>
						<td valign="top">
						<div><span style="font-size: small;">参数的个数</span></div></td>
						</tr>
						<tr>
						<td valign="top">
						<div><span style="font-size: small;">arguments.callee</span></div></td>
						<td valign="top">
						<div><span style="font-size: small;">主体函数本身，拥有这个参数对象的函数</span></div></td>
						</tr>
						</tbody>
						</table>
						<div><strong> </strong></div>
						</div></span></li>
				<li><a href="">this</a><span>函数执行的环境对象,函数里的函数中的this为window,闭包中调用父级函数指定var that = this</span></li>
				<li><a href="">caller</a><span>调用当前函数的函数</span></li>
				<li><a href="">length</a><span>函数希望接收的命名参数的个数</span></li>
				<li><a href="">prototype</a><span>原型属性，不可枚举</span></li>
			</ul>
			<h4>[<span>-</span>]方法</h4>
			<ul>
				<li>fn<a href="">.apply</a>(obj,arg)<span>func.apply(作用域，[传递参数]/arguments)</span></li>
				<li>fn<a href="">.call</a>(obj,arg)<span>func.call(作用域，[传递参数]),apply与call均让函数作用于特定作用域<br>call必须明确传入每一个参数</span></li>
				<li>fn<a href="">.bind</a>(obj)<span>bind(作用目标) 创建一个作用于某目标的函数实例</span></li>
			</ul>
			<h4>[<span>-</span>]其他</h4>
			<ul>
				<li><a href="">(function(){})()</a><span>匿名函数自执行,可以初始化各项值,但如果需要的变量并不是一开始初始化有的,则不可以,否则无法读取</span></li>
			</ul>
		</div>
	</div>	
	<div class="u-block">
		<h3>对象<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>]Object</h4>
			<ul>
				<li><a href="">new Object()</a><span>
					<table>
						<tr>
							<th>创建方法</th>
							<th>演示</th>
						</tr>
						<tr>
							<td>new 运算符</td>
							<td>var obj = new Object();
						obj.key = value;
						obj.key = function(){}</td>
						</tr>
						<tr>
							<td>字面量</td>
							<td>var obj ={
						key:value,
						key:function(){}
						}</td>
						</tr>
					</table>
				</span></li>
				<li>obj<a href=""></a>[key]<span>
					obj.property取对象的属性值
					<ol>
						<li><strong>中括号表示法时，key需要加上引号法</strong></li>
						<li><b>当属性含空格、关键字或为变量时，只能用中括号表示</b></li>
					</ol>
				</span></li>
				<li>obj.<a href="">hasOwnProperty()</a><span>判断某个是否非继承自属</span></li>
				<li>key <a href="">in</a> obj<span>
					in遍历访问对象的属性/属性值
<pre><code data-language="javascript">
	for (var property in obj) {
		console.log(property);  //遍历对象的全部属性
		console.log(obj[property]); //遍历所有对象的值
	} 
</code></pre>
				</span></li>
				<li><a href="">delete </a>obj.key<span>删除属性delete obj.key</span></li>
			</ul>
			<h4>[<span>+</span>]Map</h4>
			<ul>
				<li><a href="">new Map()</a><span>
					初始化Map需要一个二维数组，或者直接初始化一个空Map
					<pre><code data-language="javascript">var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);</code></pre>
				</span></li>
				<li>map.<a href="">get</a>(key)<span>取key的值，返回值</span></li>
				<li>map.<a href="">set</a>(key,val)<span>添加新的key-value</span></li>
				<li>map.<a href="">has</a>(key)<span>是否存在key，返回布尔值</span></li>
				<li>map.<a href="">delete</a>(key)<span>删除key</span></li>
			</ul>
		</div>
	</div>
</div>