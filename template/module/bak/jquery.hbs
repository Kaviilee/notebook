<div id="jQuery" class="content" style="display:none">
  <ul>
   <li>
    <h3>选择器<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 基本</h4>
     <ul>
      <li><a href="">*</a><span>通配</span></li>
      <li><a href="">#id</a><span>ID</span></li>
      <li><a href="">.class</a><span>样式</span></li>
      <li><a href="">tagName</a><span>标签元素名</span></li>
      <li><a href="">selector1,...,selectorN</a><span>逗号分隔多个</span></li>
     </ul>
     <h4>[<span>-</span>] 层级</h4>
     <ul>
      <li><a href="">E F</a><span>全后代</span></li>
      <li><a href="">E>F</a><span>子辈</span></li>
      <li><a href="">E+F</a><span>相邻</span></li>
      <li><a href="">E~F</a><span>兄弟</span></li>
     </ul>
     <h4>[<span>-</span>] 序列</h4>
     <ul>
      <li><a href="">:first</a><span>第一个</span></li>
      <li><a href="">:last</a><span>最后一个</span></li>
      <li><a href="">:eq</a>(index)<span>索引第N个</span></li>
      <li><a href="">:gt</a>(index)<span>索引大于</span></li>
      <li><a href="">:lt</a>(index)<span>索引小于</span></li>
      <li><a href="">:even</a><span>索引偶数，实际奇数</span></li>
      <li><a href="">:odd</a><span>索引奇数，实际偶数</span></li>
     </ul>
     <h4>[<span>-</span>] 条件</h4>
     <ul>
      <li><a href="">:not</a>(selector)<span>不含,无需引号,not(div,a)或not(div a)</span></li>
      <li><a href="">:has</a>(selector)<span>含</span></li>
      <li><a href="">:focus</a><span>获得焦点,有focus方法的,不只是表单</span></li>
      <li><a href="">:animated</a><span>正在执行动画</span></li>
      <li><a href="">:hidden</a><span>隐藏的</span></li>
      <li><a href="">:visible</a><span>可见的</span></li>
      <li><a href="">:lang</a>(zh-cn)<span>语言指定</span></li>
     </ul>
     <h4>[<span>-</span>] 内容</h4>
     <ul>
      <li><a href="">:root</a><span>等价html</span></li>
      <li><a href="">:header</a><span>H1~H6</span></li>
      <li><a href="">:target</a><span>HASH目标元素</span></li>
      <li><a href="">:contains</a>(text)<span>包含文本</span></li>
      <li><a href="">:empty</a><span>空/无子元素</span></li>
      <li><a href="">:parent</a><span>有子元素</span></li>
     </ul>
     <h4>[<span>-</span>] 属性</h4>
     <ul>
      <li><a href="">[att]</a><span>含属性</span></li>
      <li><a href="">[att=val]</a><span>为..</span></li>
      <li><a href="">[att!=val]</a><span>不为..</span></li>
      <li><a href="">[att^=val]</a><span>以..开始</span></li>
      <li><a href="">[att$=val]</a><span>以..结束</span></li>
      <li><a href="">[att*=val]</a><span>含..(str)</span></li>
      <li><a href="">[att1][attN]</a><span>同时满足..</span></li>
     </ul>
     <h4>[<span>+</span>] 子元素</h4>
     <ul style="display:none">
      <li><a href="">:first-child</a><span>第一个子元素</span></li>
      <li><a href="">:first-of-type</a><span>父元素中第一个此类元素</span></li>
      <li><a href="">:last-child</a><span></span>最后一个子元素</li>
      <li><a href="">:last-of-type</a><span>父元素中最后一个此类元素</span></li>
      <li><a href="">:nth-child(n)</a><span>第N个子元素</span></li>
      <li><a href="">:nth-of-type(n)</a><span>父元素中第N个此类元素</span></li>
      <li><a href="">:nth-last-child(n)</a><span>倒数第N个子元素</span></li>
      <li><a href="">:nth-last-of-type(n)</a><span>父元素中倒数第N个此类元素</span></li>
      <li><a href="">:only-child</a><span>唯一子元素</span></li>
      <li><a href="">:only-of-type</a><span>唯一同类子元素</span></li>
     </ul>
     <h4>[<span>+</span>] 表单</h4>
     <ul style="display:none">
      <li><a href="">:input</a><span>所有input</span></li>
      <li><a href="">:text</a><span>type为text</span></li>
      <li><a href="">:password</a><span>type为password</span></li>
      <li><a href="">:radio</a><span>type为radio</span></li>
      <li><a href="">:checkbox</a><span>type为checkbox</span></li>
      <li><a href="">:submit</a><span>type为submit</span></li>
      <li><a href="">:image</a><span>type为image</span></li>
      <li><a href="">:reset</a><span>type为reset</span></li>
      <li><a href="">:button</a><span>type为button</span></li>
      <li><a href="">:file</a><span>type为file</span></li>
      <li><a href="">:hidden</a><span>type为hidden</span></li>
     </ul>
     <h4>[<span>-</span>] 表单对象属性</h4>
     <ul>
      <li><a href="">:enabled</a><span>所有可用</span></li>
      <li><a href="">:disabled</a><span>所有禁用</span></li>
      <li><a href="">:checked</a><span>所有被多选/单选选中元素</span></li>
      <li><a href="">:selected</a><span>所有被下拉选中元素</span></li>
     </ul>
    </div>
   </li>
  </ul>
  <ul>
   <li>
    <h3>核心<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 基本</h4>
     <ul>
      <li><a href="">$(selector)</a>
       <span>返回匹配的元素集合
       <br><div><b>传入参数</b>
       <div>
       <table width="100%" border="1" cellspacing="0" cellpadding="2">
       <tbody>
       <tr>
       <td valign="top">selector,[context]</td>
       <td valign="top">选择器表达式,查找范围：返回选择器对象的引用对象

       $('div.foo').click(function() {
       $('span', this).addClass('bar'); // 限定查找范围
       });</td>
       </tr>
       <tr>
       <td valign="top">HttpTags,[props]</td>
       <td valign="top">创建DOM元素,元素属性：返回包含了这些DOM元素引用的JQ对象

       $("&lt;div/&gt;", {
       "class": "test",
       text: "Click me!",
       click: function(){
       $(this).toggleClass("test");
       }
       }).appendTo("body");</td>
       </tr>
       <tr>
       <td valign="top">element / elementArray</td>
       <td valign="top">DOM 元素或 DOM元素数组： 返回DOM封装到 jQuery 对象

       $('div.foo').click(function() {
       $(this).slideUp();
       });</td>
       </tr>
       <tr>
       <td valign="top">object</td>
       <td valign="top">普通 JavaScript 对象：封装成jQuery 对象并返回

       // 定义一个普通 JavaScript 对象
       var foo = {foo:'bar', hello:'world'};
       // 封装成 jQuery 对象
       var $foo = $(foo);
       // 绑定一个事件
       $foo.on('custom', function (){
       console.log('custom event was called');
       });
       // 触发这个事件
       $foo.trigger('custom');</td>
       </tr>
       <tr>
       <td valign="top">callback</td>
       <td valign="top"><b><span style="color: #e30000;">如果传入一个函数，则在 document 上绑定一个 ready 事件监听函数，当 DOM 结构加载完成时执行。</span>
       </b>
       jQuery(function($) {
       // 你可以在这里继续使用$作为别名...
       });</td>
       </tr>
       <tr>
       <td valign="top">jQuery Object</td>
       <td valign="top">如果传入一个 jQuery 对象，则创建该 jQuery 对象的一个副本并返回，副本与传入的jQuery 对象引用完全相同的 DOM 元素。</td>
       </tr>
       <tr>
       <td valign="top">空</td>
       <td valign="top">返回一个空的jQuery对象。</td>
       </tr>
       </tbody>
       </table>
       </div>
       </div>
       <a href="http://jquery.bootcss.com/jQuery/">more info &raquo;</a></span></li>
      <li><a href="">.length</a>(.size())<span>jQuery 对象中元素的个数</span></li>
      <li><a href="">.index([sel])</a><span>
       <br>无参数，那么返回值就是这个jQuery对象集合中第一个元素相对于其同辈元素的位置。
       <br>如果参数是一组DOM元素或者jQuery对象，那么返回值就是传递的元素相对于原先集合的位置。
             <br>如果参数是一个选择器，那么返回值就是原先元素相对于选择器匹配元素中的位置。如果找不到匹配的元素，则返回-1。</span></li>
      <li><a href="">.get(index)/[index]</a><span>取得其中一个匹配的元素</span></li>
      <li><a href="">.each</a>(fn[i,ele])
       <span>静态方法 jQuery.each() 是一个通用的遍历迭代方法，用于无缝地遍历对象和数组。
         <br>对于数组和含有 length 属性的类数组对象（如函数参数对象 arguments） ，该方法通过下标遍历，从 0 到 length-1 ；
         <br>对于其他对象则通过属性名遍历（for-in） 。
         <br>在遍历过程中，如果回调函数返回 false，则结束遍历。 
         <br>函数中的this关键字都指向一个不同的DOM元素（每次都是一个不同的匹配元素）
         <br>返回 'false' 将停止循环 (就像在普通的循环中使用 'break')。
         <br>返回 'true' 跳至下一个循环(就像在普通的循环中使用'continue')。
         <br>.each() 方法用来让DOM循环结构更简单更不易出错。它会迭代jQuery对象中的每一个DOM元素。每次回调函数执行时，会传递当前循环次数作为参数(从0开始计数)。更重要的是，回调函数是在当前DOM元素为上下文的语境中触发的。因此关键字 this 总是指向这个元素。
       </span></li>
      <li><a href="">.toArray()</a>
       <span>
        把jQuery集合中所有DOM元素恢复成一个数组。
       </span></li>
      <li><a href="">jQuery.noConflict()</a><span>
       <a href="http://jquery.bootcss.com/jQuery.noConflict/">more info &raquo;</a>
       <br>关于命名
       <br>1.将 jQuery 库在 Base 库之前引入，那么“$”的所有权就归 Base 库所有，而 jQuery 可以直接用 jQuery 对象调用，或者创建一个“$$”符给 jQuery 使用。
       <br>var $$ = jQuery; //创建一个$$的 jQuery 对象
       <br>$(function () { //这是 Base 的$
       <br>alert($('#box').ge(0)); //这是 Base 的$
       <br>alert($$('#box').width()); //这是 jQuery 的$$
       <br>});
       <br>2.如果将 jQuery 库在 Base 库之后引入， 那么 “$” 的所有权就归 jQuery 库所有， 而 Base库将会冲突而失去作用。这里，jQuery 提供了一个方法：
       <br>jQuery.noConflict(); //将$符所有权剔除
       <br>var $$ = jQuery;
       <br>$(function () {
       <br>alert($('#box').ge(0));
       <br>alert($$('#box').width());
       <br>});
       <br>3.继续内部使用$作为参数：
       <br>jQuery.noConflict(); //将$符所有权剔除
       <br>jQuery(function ($) {
       <br>alert($('#box').ge(0));
       <br>});</span></li></ul>
     <h4>[<span>-</span>] 数据</h4>
     <ul>
      <li><a href="">.date()</a><span>在匹配元素上存储任意相关数据 或 返回匹配的元素集合中的第一个元素的给定名称的数据存储的值<br><a href="http://jquery.bootcss.com/data/">more info &raquo;</a></span></li>
      <li><a href="">.removeDate()</a>
      <span>.removeData()方法允许我们移除用.data()绑定的值。
      <br>当带name参数调用的时候，.removeData()<br>将删除那个特有的值，当不带任何参数的时候，所有的值将被移除。
      <br>从jQuery的内部.data() 缓存不影响任何在文档中的HTML5的data-属性，使用.removeAttr()可以移除这些属性。
      <br>当使用.removeData("name")时，如果没有这个属性名字是在内部数据缓存，jQuery将试图在元素上找到一个 data-的属性。
      <br>为了避免重复查询 data- 属性，将这个名称设置为无论是null 或 undefined的值(例如 .data("name", undefined))，而不是使用.removeData()。<br><a href="http://jquery.bootcss.com/removeData/">more info &raquo;</a></span></li>
      </ul>
     <h4>[<span>-</span>] 队列</h4>
     <ul> 
      <li><a href="">.queue</a>([name],fn[next])<span>无名称则为fx动画队列,返回第一个元素关联的函数队列或修改</span></li>
      <li><a href="">.dequeue</a>([name])<span>出队(移除)并执行元素函数队列的下一个函数（非动画函数需要手动调用dequeue）</span></li>
      <li><a href="">.delay</a>(time,[name])<span>延迟</span></li>
      <li><a href="">.clearQueue</a>()<span>移除队列</span></li>
     </ul>
     <h4>[<span>-</span>] 插件</h4>
     <ul>
      <li><a href="">jQuery.extend</a>(obj)<span><a href="http://hemin.cn/jq/jQuery.extend_object.html">ex</a></span></li>
      <li><a href="">jQuery.fn.extend</a>(arg)<span><a href="http://hemin.cn/jq/jQuery.fn.extend.html">ex</a>
      <pre><code data-language="javascript">
      ;(function($){
       $.fn.extend({
         'method':function(){
           //some code
           return this;
         }
       })
      })(jQuery);
      </code></pre>
      <br>JQ插件中的this就是已经封装过的元素是JQ对象，在JQ插件内部进行JQ方法中的This是DOM元素需要自己再封装
      </span></li>
     </ul>
    </div>
   </li>

   <li>
    <h3>工具<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 数组/对象操作</h4>
     <ul>
      <li><a href="">$.each</a>(obj,fn[i,val])
       <span>遍历执行对象/数组,回调函数i为数组索引index或对象属性name,val为原值
       <br>不同于例遍 jQuery 对象的 $().each() 方法，此方法可用于例遍任何对象。
        回调函数拥有两个参数：第一个为对象的成员或数组的索引，第二个为对应变量或内容。
        如果需要退出 each 循环可使回调函数返回 false，其它返回值将被忽略。

       <br><a href="http://jquery.bootcss.com/jQuery.each/">more info &raquo;</a>
       </span></li>
      <li><a href="">$.map</a>(obj,fn[val,i])
       <span>遍历执行对象/数组,this为全局window对象,返回新的对象/数组
       <br><a href="http://jquery.bootcss.com/jQuery.map/">more info &raquo;</a>
       </span></li>
      <li><a href="">$.grep</a>(arr,fn[ele,index])
       <span>数组过滤,原始数组不受影响.回调函数ele为元素,index为索引
       <br><a href="http://jquery.bootcss.com/jQuery.grep/">more info &raquo;</a>
       </span></li>
      <li><a href="">$.inArray</a>(val,arr,fromi)
       <span>数组元素查找,类似indexOf,没有返回-1
       <br><a href="http://jquery.bootcss.com/jQuery.inArray/">more info &raquo;</a>
       </span></li>
      <li><a href="">$.merge</a>(arr1,arr2)
       <span>数组合并
       <br>第一个用于合并的数组，其中将会包含合并后的第二个数组的内容。
       <br>第二个用于合并的数组，该数组不会被修改，其中的内容将会被合并到第一个数组中。
       <br><a href="http://jquery.bootcss.com/jQuery.merge/">more info &raquo; </a>
       </span></li>
      <li><a href="">$.unique</a>(arrDOM)
       <span>数组DOM重复元素删除
       <br>排序数组，并移除任何重复的节点。 如果一个节点和已经在数组中的节点完全相同，那么它被认为是重复的;  两个不同的节点具有相同的属性是被认为不重复的.
       </span></li> 
     </ul>
     <h4>[<span>-</span>] 测试操作</h4>
     <ul>
      <li><a href="">$.type</a>(data)<span>判断数据类型</span></li>
      <li><a href="">$.isWindow</a>(data)<span>判断数据是否为 window 对象</span></li>
      <li><a href="">$.isNumeric</a>(data)<span>判断数据是否为数值</span></li>
      <li><a href="">$.isArray</a>(obj)
       <span>判断是否为数组对象，是返回 true</span>
       </li>
      <li><a href="">$.isFunction</a>(obj)
       <span>判断是否为函数，是返回 true</span>
       </li>
      <li><a href="">$.isEmptyObject</a>(obj)
       <span>判断是否为空对象，是返回 true</span>
       </li>
      <li><a href="">$.isPlainObjet</a>(obj)
       <span>判断是否为纯粹对象，是返回 true
       <br>通过 "{}" 或者 "new Object" 创建的</span></li>
      <li><a href="">$.contains</a>(obj)
       <span>判断 DOM 节点是否含另一个 DOM 节点， 是返回 true</span>
       </li> 
     </ul>
     <h4>[<span>-</span>] 其他</h4>
     <ul>
      <li><a href="">$.now()</a><span>$.now()方法是表达式(new Date).getTime()返回数值的一个简写</span></li>
      <li><a href="">$.trim(str)</a><span>等同字符串trim()方法,去掉前后空格</span></li>
      <li><a href="">$.noop</a><span>一个空函数<br>当你仅仅想要传递一个空函数的时候，就用他吧。<br>这对一些插件作者很有用，当插件提供了一个可选的回调函数接口，那么如果调用的时候没有传递这个回调函数，就用jQuery.noop来代替执行。</span></li> 
      <li><a href="">$.proxy</a>(obj,fn)<span>调整this指针
       <br><a href="http://jquery.bootcss.com/jQuery.proxy/">more info &raquo;</a></span></li> 
     </ul>
    </div>
   </li>
  </ul> 
  <ul>
   <li>
    <h3>属性<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 属性</h4>
     <ul>
      <li><a href="">attr</a>({key,[val|fn]})<span>attr('key') 获取第一个元素指定属性的值,如遍历获取则需each<br/>attr('key','value') 设置key的值为value<br/>attr('key',fn[index,old-value]) 回调参数:索引,原值 <br/>attr({key1:'value1',key2:'value2'}) 设置多个属性的值,用逗号分隔</span></li>
      <li><a href="">removeAttr</a>(key)<span>removeAttr('key') 从每一个匹配的元素中删除某个属性</span></li>
      <li><a href="">prop</a>({key,[true/false|fn]})<span>prop('key') 获取匹配元素中第一个元素的属性<br/>
      prop('key',true/false) 设置每一个匹配元素的一个属性<br/>
      prop('key',fn[index,old-value]) 回调参数:索引,原值 <br/>                  prop({key1:'value1',key2:'value2'})" </span></li>
      <li><a href="">removeProp</a>(key)<span>removeProp('key') 从每一个匹配的元素中删除某个属性</span></li>
     </ul>
     <h4>[<span>-</span>] CSS类</h4>
     <ul>
      <li><a href="">addClass</a>(class|fn)<span>addClass('name') 添加一个样式<br/>
      addClass('name1 name2') 添加多个样式,空格分开<br/>
      addClass(fn[index,old-value]) 回调参数:索引,原样式名;返回一个或空格隔开的class名</span></li>
      <li><a href="">removeClass</a>(class|fn)<span>removeClass('name') 移除一个样式<br/>                    removeClass('name1 name2') 移除多个样式,空格分开<br/>                    removeClass(fn[index,old-value]) 回调参数:索引,原样式名;返回一个或空格隔开的class名</span></li>
      <li><a href="">toggleClass</a>(class|fn[,sw])<span>toggleClass('name') 元素如果存在（不存在）就删除（添加）一个类<br/>                    toggleClass('name',switch) 要切换的CSS类名,用于决定元素是否包含class的switch case值<br/>                    toggleClass(fn[index,old-value],switch) 回调参数:索引,原样式名;返回一个或空格隔开的class名</span></li>
     </ul>
     <h4>[<span>-</span>] HTML代码/文本/值</h4>
     <ul>
      <li><a href="">html</a>([text|fn])<span>html() 无参数,返回元素集合中第一个元素的内容<br/>                    html('text') 设置所有选择器元素的内容<br/>                    html(fn[index,old-value]) 返回一个HTML字符串,回调参数:索引,原先的HTML值 <br/>                    *限HTML/XHTML </span></li>
      <li><a href="">text</a>([text|fn])<span>text() 无参数,返回元素集合中第一个元素的内容<br/>                    text('text') 设置所有选择器元素的内容<br/>                    text(fn[index,old-value]) 返回字符串,回调参数:索引,原先的值 <br/>                    *可用于XML  </span></li>
      <li><a href="">val</a>([val|fn|arr])<span>val() 无参数,返回元素集合中第一个元素的值<br/>                    val('text') 设置所有选择器元素属性值<br/>                    val(fn[index,old-value]) 返回要设置的值,回调参数:索引,原先的值 <br/>                    val('value') 设定一个select/checkbox的值<br/>                    val(['value1','value2']) 设定多选时的多个select/checkbox的值</span></li>
     </ul>
    </div>
   </li>
   <li>
    <h3>CSS<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] CSS</h4>
     <ul>
      <li><a href="">css</a>({key,[val|fn]})<span>css('key') 获取第一个元素的样式值<br/>                    css('key','value') 设置每一个匹配元素一个指定的样式<br/>                    prop('key',fn[index,old-value]) 回调参数:索引,原值 <br/>                    css({key1:'value1',key2:'value2'}) 设置每一个匹配元素多个指定的样式<br/>*<b>坐标和尺寸注意加px单位,属性值加引号!</b></span></li>
      <li><a href="">jQuery.cssHooks</a></li>
     </ul>
     <h4>[<span>-</span>] 元素位置[!px]</h4>
     <ul>
      <li><a href="">offset()</a>.l/t<span>offset() 计算元素在视窗中的坐标,返回值对对象<br/>                    offset().left 获得元素视窗水平坐标<br/>                    offset().top 获得元素视窗垂直坐标<br/>                    <b>*offset()值已包含scroll后实际视窗位置</b>  </span></li>
      <li><a href="">offset</a>({top:y,left:x})<span>offset({top:y,left:x}) 设置元素视窗坐标<br/>                    *计算的坐标以元素外围为起始点，包含padding和border，不包含margin<br/>                    *设置值对时不需要引号，且不带单位</span></li>
      <li><a href="">position()</a>.l/t [!arg]<span>position() 获取相对父元素的偏移值对对象<br/>                    position().left 水平位移<br/>                    position().top 垂直位移<br/>                    *<b>不能用于设置，只能获取，可通过获取后设置新的变量值赋值给css</b><br/>                    *计算的坐标以元素外围为起始点，包含padding和border，不包含margin<br/>                    *注意Body清空padding margin否则继承出问题</span></li>
      <li><a href="">scrollTop</a>([y])<span>获取/设置匹配元素相对滚动条垂直的偏移<br />
       通过offset可获取元素位置,设置$(document).scrollTop(num)跳转至对应锚点<br />
       </span></li>
      <li><a href="">scrollLeft</a>([x]) <span>获取/设置匹配元素相对滚动条水平的偏移</span></li>
     </ul>
     <h4>[<span>-</span>] 指针位置</h4>
     <ul>
      <li><a href="">e.pageX</a><span>鼠标指针所在文档位置,已计算scroll
      <br>event.screenX 原生JS:鼠标指针所在显示屏位置
      <br>event.screenY 原生JS:鼠标指针所在显示屏位置
      <hr>
      <br>event.clientX 原生JS:鼠标指针所在视窗位置,非文档位置<br/>计算文档位置：event.clientX+document.documentElement.scrollLeft || document.body.scrollLeft
      <br>event.clientY 原生JS:鼠标指针所在视窗位置,非文档位置<br/>计算文档位置：event.clientY+document.documentElement.scrollTop || document.body.scrollTop
      <hr>
      <br>clientWidth=document.documentElement.clientWidth|| document.body.clientWidth<br/>在页面上返回内容的可视宽度（不包括边框，边距或滚动条）
      <br>clientHeight= document.documentElement.clientHeight|| document.body.clientHeight <br/>                在页面上返回内容的可视高度（不包括边框，边距或滚动条）
      <hr>
      <br>scrollWidth=document.documentElement.scrollWidth|| document.body.scrollWidth <br/>                返回元素的整个宽度（包括带滚动条的隐蔽的地方）
      <br>scrollHeight=document.documentElement.scrollHeight|| document.body.scrollHeight <br/>                返回整个元素的高度（包括带滚动条的隐蔽的地方）
      </span></li>
      <li><a href="">e.pageY</a><span>鼠标指针所在文档位置,已计算scroll</span></li>
     </ul>
     <h4>[<span>+</span>] 元素尺寸</h4>
     <ul style="display:none">
      <li><a href="">height</a>([val|fn])<span>height() 无参数,获取第一个元素的高度<br/>                  height(y) 设置所有元素的高度,无单位                  height(fn[index,old-value]) 回调参数:索引,原值.返回一个数值</span></li>
      <li><a href="">width</a>([val|fn])<span>width() 无参数,获取第一个元素的宽度<br/>                  width(x) 设置所有元素的宽度,无单位                  width(fn[index,old-value]) 回调参数:索引,原值.返回一个数值</span></li>
      <li><a href="">innerHeight</a>([y])<span>获取/设置内高，含padding，不含边框和margin </span></li>
      <li><a href="">innerWidth</a>([x])<span>获取/设置内宽，含padding，不含边框和margin</span></li>
      <li><a href="">outerHeight</a>([y])<span>获取/设置外高,含padding,border,margin</span></li>
      <li><a href="">outerWidth</a>([x])<span>获取/设置外宽,含padding,border,margin</span></li>
     </ul>
    </div>
   </li>
   <li>
    <h3>效果<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 基本</h4>
     <ul>
      <li><a href="">show</a>([time,fn])<span>显示</span></li>
      <li><a href="">hide</a>([time,fn])<span>隐藏</span></li>
      <li><a href="">toggle</a>([time,fn])<span>开关</span></li>
      <li><a href="">ani</a>(arg..callee)<span>A.ani(fnX function(){$(this).pre/next.ani(fnX)}  <br>
              A.ani(function(){$(this).pre/next.ani(arguments.callee)})<br>
              所有动画额外参数:(回调函数前) linear匀速,swing缓动(默认)</span></li>
     </ul>
     <h4>[<span>-</span>] 滑动</h4>
     <ul>
      <li><a href="">slideDown</a>([time,fn])<span>向下展开</span></li>
      <li><a href="">slideUp</a>([time,fn])<span>向上折叠</span></li>
      <li><a href="">slideToggle</a>([time,fn])<span>滑块开关</span></li>
     </ul>
     <h4>[<span>-</span>] 隐现</h4>
     <ul>
      <li><a href="">fadeIn</a>([time,fn])<span>淡入</span></li>
      <li><a href="">fadeOut</a>([time,fn])<span>淡出</span></li>
      <li><a href="">fadeTo</a>([time,0-1,fn])<span>变换到指定透明度</span></li>
      <li><a href="">fadeToggle</a>([time,fn])<span>淡入淡出切换</span></li>
     </ul>
     <h4>[<span>-</span>] 自定义/队列</h4>
     <ul>
      <li><a href="">animate</a>({arg},time,[fn])<span>$(ele).animate({css:'value'},speed,fn)<br>
          $(ele).animate({css:+-some},speed,fn)<br>
          <b>单属性不能像css那样,简写！</b><br />
          <br />百分比不是一个整数,是字符串应添加引号!
          可以通过在属性值前面指定+=或-=来让元素做相对运动(注意是+=,而不是+,需要赋值)<br>
          <b>注意：所有指定的属性必须用骆驼形式</b><br>
          队列动画:<br>
          1.回调函数嵌套<br>
          2.连缀（同一目标）<br>
          3.顺序（同一目标）<br></span></li>
      <li><a href="">queue</a>(next)<span>支持连缀或非连缀<br>
          实现队列动画赋参数next,并在末尾执行next() <br>
          或不传参数在末尾添加$(this).dequeue() <br>
          当通过队列添加方法后再次连缀执行的动画如为基本动画(hide,show,toggle)必须赋参数!<br>
          取得当前+后续的队列动画长度,queue('fx').length</span></li>
      <li><a href="">clearQueue()</a><span>清理列队的功能方法：.clearQueue()。<br>
          把它放入一个列队的回调函数或.queue()方法里，就可以把剩下为执行的列队给移除。<br>
          <b>*而非在连缀中书写！</b></span></li>
      <li><a href="">stop</a>([true],[true])<span>无参数: <br>  
          普通动画,暂停动画,恢复动画后继续完成动画<br> 
          列队动画,停止列队动画中的第一个动画,并停留在停止时的位置<br> 
          有参数：<br> 
          第一个参数:true,停止并清除后续队列动画,默认为false<br> 
          第二个参数:true,停止并立即跳到动画完成所在的位置(中间队列进行的特性改变等不执行)</span></li>
      <li><a href="">finish()</a><span>类同stop,但会导致所有排队的动画的CSS属性跳转到他们的最终值。</span></li>
      <li><a href="">delay</a>(time,[fx])<span>延迟,支持连缀,时间参数</span></li>
     </ul>
     <h4>[<span>-</span>] 设置</h4>
     <ul>
      <li><a href="">jQuery.fx.interval</a><span>设置每秒运行的帧数,默认13,数值越大频率越慢</span></li>
      <li><a href="">jQuery.fx.off</a><span>关闭所有动画效果,关闭true,开启false</span></li>
     </ul>
    </div>
   </li>
  </ul>
  <ul>
   <li>
    <h3>文档处理<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 内部插入</h4>
     <ul>
      <li><a href="">append()</a><span></span></li>
      <li><a href="">appendTo()</a><span>如果jquery选择器中的元素不存在,则会创建,直接appendTo目标元素即可。</span></li>
      <li><a href="">prepend()</a><span></span></li>
      <li><a href="">prependTo()</a><span></span></li>
     </ul>
     <h4>[<span>-</span>] 外部插入</h4>
     <ul>
      <li><a href="">after()</a><span></span></li>
      <li><a href="">insertAfter()</a><span></span></li>
      <li><a href="">before()</a><span></span></li>
      <li><a href="">insertBefore()</a><span></span></li>
     </ul>
     <h4>[<span>-</span>] 替换</h4>
     <ul>
      <li><a href="">replaceWith</a>(content|fn|$)<span></span></li>
      <li><a href="">replaceAll</a>($|selector)<span></span></li>
      <li><a href="">end()</a><span></span></li>
      <li>[ 主动插入与替换会先注销原节点 ]</li>
     </ul>
     <h4>[<span>-</span>] 复制删除</h4>
     <ul>
      <li><a href="">clone</a>([true/false])<span>复制节点,true复制事件处理程序,false不复制 </span></li>
      <li><a href="">remove</a>([expr])<span>删除A或满足某条件的A,移除事件,返回被删除的节点 </span></li>
      <li><a href="">detach</a>([expr])<span>删除A或满足某条件的A,保留事件,返回被删除的节点</span></li>
      <li><a href="">empty()</a><span>删除A所有子节点,不接收参数 </span></li>
     </ul>
     <h4>[<span>-</span>] 包裹</h4>
     <ul>
      <li><a href="">wrap</a>(html|ele|fn)<span>对每个元素外层逐层包裹</span></li>
      <li><a href="">wrapInner</a>(html|ele|fn)<span>对每个元素内部逐层包裹 </span></li>
      <li><a href="">wrapAll</a>(html|ele)<span>对所有匹配元素外层整体包裹 </span></li>
      <li><a href="">unwrap()</a><span>移除一层包裹,从最内包裹层脱起,多个移除则需移除多次,无参数</span></li>
     </ul>
    </div>
   </li>
   <li>
    <h3>筛选<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 层级筛选</h4>
     <ul>
      <li><a href="">find()</a><span>等价后代选择器E F</span></li>
      <li><a href="">children()</a><span>等价子代选择器</span></li>
      <li><a href="">next()</a><span>
       next() / nextall() / nextUntil()
       <br>类似E+F 但只返回后面那个紧邻的同辈元素/所有/直到但不包含
      </span></li>
      <li><a href="">parent()</a><span>
       offsetParent() 返回第一个匹配元素用于定位的父节点
       <br>parent() / parents() / parentsUntil()
       取得一个包含着所有匹配元素的唯一父元素的元素集合/所有（不包含根元素）/直到但不包含
      </span></li>
      <li><a href="">prev()</a><span>
       prev() / prevall() / prevUntil()
       <br>取得一个包含匹配的元素集合中每一个元素紧邻的前一个同辈元素的元素集合/所有/直到某个但不包含
      </span></li>
      <li><a href="">siblings</a>([expr])<span>
       取得一个包含匹配的元素集合中每一个元素的所有唯一同辈元素的元素集合
      </span></li>
     </ul>
     <h4>[<span>-</span>] 序列筛选</h4>
     <ul>
      <li><a href="">first()</a><span>第一个</span></li>
      <li><a href="">last()</a><span>最后一个</span></li>
      <li><a href="">eq</a>(index|-index)<span>第N个/倒数第N个</span></li>
      <li><a href="">slice</a>(start,[end])<span>第N~M个</span></li>
     </ul>
     <h4>[<span>-</span>] 条件过滤</h4>
     <ul>
      <li><a href="">filter</a>(expr|obj|ele|fn)<span></span></li>
      <li><a href="">has</a>(expr|ele)<span></span></li>
      <li><a href="">not</a>(expr|ele|fn)<span></span></li>
      <li><a href="">contents()</a><span>查找匹配元素内部所有的子节点（包括文本节点）</span></li>
     </ul>
     <h4>[<span>-</span>] 串联</h4>
     <ul>
      <li><a href="">add</a>(e|e|h|o[,c])<span></span></li>
      <li>addBack()<a href=""></a><span></span></li>
     </ul>
     <h4>[<span>-</span>] 检测</h4>
     <ul>
      <li><a href="">is</a>(selector)<span>根据选择器、DOM元素或 jQuery 对象来检测匹配元素集合，如果其中至少有一个元素符合这个给定的表达式就返回true。
      <br />$("#checbox").is(:checked)</span></li>
      <li><a href="">hasClass</a>(class)<span>检查当前的元素是否含有某个特定的类，如果有，则返回true。里面只写class名称不要加点</span></li>
     </ul>
    </div>
   </li>
  </ul>
  <ul>
   <li>
    <h3>事件<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 事件处理</h4>
     <ul>
      <li><a href="">on</a>(type,[sel],[data],fn)<span><b>事件绑定</b>：<br/>
          on('type',[data],fn) 绑定一个事件处理函数<br/>
          on('type1 type2',[data],fn) 为多个事件绑定一个处理函数<br/>                  
          on({type1:fn1,type2:fn2}) 为多个事件绑定不同的处理函数<br/>
          on('type',[data],false) 取消默认行为和冒泡,注意在表单中取消的目标是form而非submit行为!<br/>
          on('type.namespace',[...,fn]) 绑定指定命名空间事件<br/>
          on('itype',...,fn).trigger() 绑定一个自定义事件加载时默认触发一次<br/>
          <b>事件委托</b>：<br/>
          $(parent).on('type','selector',[data],fn)<br/>
          *<strong>事件委托时的selector为parent的子元素选择器</strong><br/>
          *依旧绑定在指定父元素上,触发目标写在第2个参数,data数据在第3个参数 <br />
          <b>*selector必须为选择器字符串,不可传递冗余复杂的CSS表达式变量!内部this是指选择器触发元素!</b></span></li>
      <li><a href="">off</a>(type,[sel],[fn])<span><b>事件移除</b>：<br/>
          off() 无参数删除所有事件绑定<br/>
          off('type') 删除某个事件<br/>
          off('type',fn) 删除指定事件和处理函数<br/>
          <b>取消事件委托</b>：<br/>
          off() 无参数,删除所有委托事件<br>
          off('type') 删除所有type事件<br>
          off('type','selector') *注意委托元素写在第2个参数，删除指定目标的一个或多个事件委托,事件类型由空格分隔<br>
          off('type','selector',fn) 删除指定的事件触发的执行函数<br>
          off('type.namespace',[...,fn]) 删除指定命名空间事件</span></li>
      <li><a href="">one</a>(type,[sel],[data],fn)<span>类似on,但仅触发一次的事件!</span></li>
     </ul>
     <h4>[<span>+</span>] 旧事件处理</h4>
     <ul style="display:none">
      <li><a href="">bind</a>({type,[data],fn})<span>bind('type',fn) 绑定一个事件处理函数<br/>
         bind('type1 type2',fn) 为多个事件绑定一个处理函数<br/>                  
         bind({type1:fn1,type2:fn2}) 为多个事件绑定不同的处理函数<br/>
         bind(type,false) 取消默认行为和冒泡,注意取消的目标是form而非submit行为!</span></li>
           <li><a href="">unbind</a>([type,fn])<span>unbind() 删除所有事件绑定<br/>
         unbind('type') 删除某个事件<br/>
         unbind('type',fn) 删除指定事件和处理函数</span></li>
           <li><a href="">delegate</a>(ele,type,[d],fn)<span>在统一级父元素上绑定事件，分配给触发事件的目标。<br>
         1.在 DOM 中很多元素绑定相同事件时；<br>
         2.在 DOM 中尚不存在即将生成的元素绑定事件时；<br>
         我们推荐使用事件委托的绑定方式，否则推荐使用.bind()的普通绑定<br>
         $(parent).delegate(target,type,fn)</span></li>
           <li><a href="">undelegate()</a><span>undelegate() 无参数,删除所有委托事件<br>
         undelegate(ele,type) 删除指定的一个或多个事件,事件类型由空格分隔<br>
         undelegate(ele,type,fn) 删除指定的事件触发执行函数<br>
         undelegate(type) 删除所有type事件<br>
         undelegate(type.namespace) 删除指定命名空间事件</span></li>
     </ul>
     <h4>[<span>-</span>] 事件模拟</h4>
     <ul>
      <li><a href="">trigger</a>(type,[datas])<span>模拟事件:让该事件在页面加载时便模拟执行一次,可连缀写法<br>
          $(ele).type(fn[data]).trigger(type) <br>
          简写方案:【限JQ封装的常用事件】想让某个事件执行模拟用户行为,直接再调用一个空的同名事件即可<br>
          $(ele).type(fn).type()
          单fn数据:可以传入数据，此处数据为事件函数传入的数据，而非e.data<br>
          $(ele).type(fn[e,data]).trigger(type,data)<br>
          多fn数据:可传入多个data数据,用[]将其包围<br>
          $(ele).type(fn[e,data1,data2]).trigger(type,[data1,data2])</span></li>
            <li><a href="">triggerHandler</a>(type, [data])<span>与trigger的区别：<br>
          1.不会触发事件的默认行为，如表单提交<br>
          2.只会影响第一个匹配到的元素，而.trigger()会影响所有。<br>
          3.返回当前事件执行的返回值，如果没有返回值，则返回undefined；而.trigger()则返回当前包含事件触发元素的 jQuery 对象(方便链式连缀调用)<br>
          4.对于自定义事件，.triggerHandler()不会冒泡，trigger()则默认会冒泡</span></li>
     </ul>
     <h4>[<span>-</span>] 命名空间/自定义事件</h4>
     <ul>
      <li><a href="">on(itype,fn).trigger(itype)</a><span>除了通过 JavaScript 事件名触发trigger，也可以通过自定义的事件触发。<br>
      所谓自定义事件其实就是一个被.bind()绑定的任意函数</span></li>
      <li><a href="">e.namespace</a><span>
      对匿名函数的移除,以及批量移除相同命名空间的不同事件<br>
      适用于bind绑定事件与模拟事件,不能用于JQ封装的常用事件<br>
      $(ele).bind(type.name1,fn)<br>
      $(ele).trigger(type.name1)<br>
      e.namespace返回命名空间的名称</span></li>
     </ul>
     <h4>[<span>-</span>] 浏览器/文档事件</h4>
     <ul>
      <li><a href="">ready(fn)</a><span>文档就绪,DOM结构完成时即执行,如果某些行为必须等待图片或css加载完成再执行则应绑定到load事件</span></li>
      <li><a href="">load</a>([[data],fn])<span>必须完全加载完成,而ready只判定DOM结构<br>当所有子元素已经被完全加载完成时，load事件被发送到这个元素。<br>此事件适用于任何可使用 URL关联的任何元素：images, scripts, frames, iframes,  window 对象。</span></li>
      <li><a href="">unload</a>([[data],fn])<span>
      unload事件部分浏览器不支持,可用于放置清理内存.<br/>                            点击某个离开页面的链接<br/>                            
      在地址栏中键入了新的 URL<br/>                            
      使用前进或后退按钮<br/>                            
      关闭浏览器<br/>                            重
      新加载页面 </span></li>
      <li><a href="">scroll</a>([[data],fn])<span>
      scroll 事件适用于所有可滚动的元素和 window 对象（浏览器窗口）
      <br /><b>调式IE的过程中，需要去掉console.log命令，否则会因为前面不识别而不运行，改为alert命令</b>
      <br />1.动态监听浏览器拖曳滚动条scroll事件应使用document绑定事件（而非html或body）
      <br />$(document).scroll(function(){
      <br /> nowscroll = $(document).scrollTop();
      <br />})
      <br />2.绑定点击触发页面滚动事件，要设置'html'和'body'元素滚动，设置document无效
      <br />设置body在IE中无效,设置html在webkit某些时候无效,尽量不要用window,未知报错
      <br />$(selector).click(function(){
      <br /> $('body,html').animate({'scrollTop':val},speed)
      <br />})
      <br /><b>当为a元素带#时，默认会跳到顶部，需要阻止默认行为！</b></span></li>
      <li><a href="">resize</a>([[data],fn])<span>浏览器window的尺寸发生改变时</span></li>
      <li><a href="">error</a>([[data],fn])<span>可用于设置window错误时返回true而不报错<br/>设置图片错误时隐藏图片<br/>或将(window)错误传递给服务器端记录文件</span></li>
     </ul>
     <h4>[<span>+</span>] 鼠标事件</h4>
     <ul style="display:none">
      <li><a href="">click</a>([[data],fn])<span>click(fn) 绑定一个函数到点击<br>                  click(data,fn) 绑定一个函数并传入eventData<br>                  click() 触发此事件,可能由其他事件触发此事件发生<br>                  *click要素：鼠标指针在元素里面时点击，鼠标指针在元素里面时释放，如果这些不被满足，mousedown 或 mouseup事件可能更加合适。    </span></li>
      <li><a href="">dblclick</a>([[data],fn])<span>双击</span></li>
      <li><a href="">mousedown</a>([[data],fn])<span>鼠标按下</span></li>
      <li><a href="">mouseup</a>([[data],fn])<span>鼠标弹起</span></li>
      <li><a href="">mouseover</a>([[data],fn])<span>鼠标经过</span></li>
      <li><a href="">mouseout</a>([[data],fn])<span>鼠标移出</span></li>
      <li><a href="">mousemove</a>([[data],fn])<span>鼠标移动</span></li>
      <li><a href="">mouseenter</a>([[data],fn])<span>鼠标穿入,穿过子元素而非本体内容时不触发</span></li>
      <li><a href="">mouseleave</a>([[data],fn])<span>鼠标穿出,穿过子元素而非本体内容时不触发</span></li>
      <li><a href="">hover</a>(enter,leave)<span>组合mouseenter与mouseleave</span></li>
     </ul>
     <h4>[<span>-</span>] 键盘事件</h4>
     <ul>
      <li><a href="">keydown</a>([[data],fn])<span>键盘按下,返回键码e.keyCode</span></li>
      <li><a href="">keypress</a>([[data],fn])<span>键盘按下,返回字符编码e.charCode </span></li>
      <li><a href="">keyup(</a>([[data],fn])<span>键盘按下并弹起</span></li>
      <li><a href="">e.which</a><span>鼠标事件监听绑定[click]等<br>
        原生鼠标事件event.button [右键事件oncontextmenu] 左0中1右2<br><br>
        键盘事件监听绑定[keyup]等,且必须绑定在可键入元素中,如input等<br>
        原生键盘事件keyCode[keydown]与charCode[keypress] (charCode区分大小写或上标)<br><br>
        JQ中组合他们：<br>
        鼠标为左1中2右3,键码为keyCode<br> </span></li>
            <li><a href="">e.altKey/ctrlKey/shiftKey</a><span>JS原生和JQ都可以使用的对象event.xKey / e.xKey  <br>
          同样需要绑定鼠标或者键盘事件(均可) <br>
          需要在鼠标或键盘事件触发时同时按下(单独按下无效) <br>
          返回true/false</span></li>
     </ul>
     <h4>[<span>-</span>] 表单事件</h4>
     <ul>
      <li><a href="">focus</a>([[data],fn])<span>获取焦点,必须为当前元素</span></li>
      <li><a href="">blur</a>([[data],fn])<span>丢失焦点,必须为当前元素 </span></li>
      <li><a href="">focusin</a>([[data],fn])<span>获取焦点,可以为当前元素的子元素</span></li>
      <li><a href="">focusout</a>([[data],fn])<span>获取焦点,可以为当前元素的子元素</span></li>
      <li><a href="">change</a>([[data],fn])<span>下拉选择,单选多选,文本框/域值发生变化时<br>                  仅限用于input、textarea、select元素。<br>                  对于下拉选择框，复选框和单选按钮，当用户用鼠标作出选择，该事件立即触发<br>                  但对于其他类型的input元素，该事件触发将推迟，直到元素失去焦点才会触点</span></li>
      <li><a href="">select</a>([[data],fn])<span>文本被选择事件!而非下拉列表选择</span></li>
      <li><a href="">submit</a>([[data],fn])<span>注意绑定的对象是form!而非submit </span></li>
     </ul>
    </div>
   </li>
   <li>
    <h3>事件对象<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 事件对象属性</h4>
     <ul>
      <li><a href="">e.data</a><span>传入指定值绑定到事件函数里,可以为变量,如为函数会打印函数字符串,需要()执行函数返回函数返回的内容</span></li>
      <li><a href="">e.result</a><span>返回同一个元素上一个事件绑定函数的返回值</span></li>
      <li><a href="">e.timeStamp</a><span>返回事件触发时的时间戳</span></li>
      <li><a href="">e.type</a><span>事件类型</span></li>
      <li><a href="">e.target</a><span>触发事件的DOM元素</span></li>
      <li><a href="">e.currentTarget</a><span>事件监听的元素,即被绑定事件的元素</span></li>
      <li><a href="">e.relatedTarget</a><span>对于 mouseout 事件，它指向被进入的元素；<br/> 对于 mousein 事件，它指向被离开的元素。</span></li>
      <li><a href="">e.delegateTarget</a><span>事件委托目标</span></li>
     </ul>
     <h4>[<span>-</span>] 冒泡与默认行为</h4>
     <ul>
      <li><a href="">action(return false)</a><span>给JQ对象绑定事件的返回值设为false，则既阻止默认行为也会阻止冒泡</span></li>
      <li><a href="">e.stopPropagation()</a><span>阻止冒泡</span></li>
      <li><a href="">e.preventDefault()</a><span>阻止默认行为 <br>
       *阻止表单提交应对按钮绑定事件click,或表单绑定submit</span></li>
      <li><a href="">e.stopImmediatePropagation()</a><span>取消事件冒泡，并取消该事件的后续事件处理函数【并未取消默认行为】</span></li>
      <li><a href="">e.isDefaultPrevented()</a><span></span></li>
      <li><a href="">e.isPropagationStopped()</a><span></span></li>
      <li><a href="">e.isImmediatePropagation()</a><span></span></li>
     </ul>
    </div>
   </li>
  </ul>
  <ul>
   <li>
    <h3>ajax<span>-</span></h3>
    <div>
      <h4>[<span>-</span>] 底层接口</h4>
      <ul>
       <li><a href="">$.ajax</a>({setting})
        <span>
        $.ajax({  <br>
         url:'url.php', <br>
         type:'POST',    //默认为'GET' <br>
         data:{name:'value',name:'value'}, <br>
         success:function(response,status,xhr){//something} <br>
        }) <br>
        <a href="http://jquery.bootcss.com/jQuery.ajax/" title="">more info &raquo;</a>

        </span></li>
       <li><a href="">$.ajaxSetup</a>({setting})
        <span>同$.ajax(),初始化设置重复应用的一些属性和方法<br>
        <a href="http://jquery.bootcss.com/jQuery.ajaxSetup/" title="">more info &raquo;</a>
        </span> 
        </li>
       <li><a href="">$.ajaxPrefilter</a>([datatype],fn)
        <span>jQuery.ajaxPrefilter( [dataTypes], handler(options, originalOptions, jqXHR) )<br>
        在每个请求之前被发送和$.ajax()处理它们前处理，设置自定义Ajax选项或修改现有选项。<br>
        options 是请求的选项<br>
        originalOptions 值作为提供给Ajax方法未经修改的选项，因此，没有ajaxSettings设置中的默认值<br>
        jqXHR 是请求的jqXHR对象<br>
        <a href="http://jquery.bootcss.com/jQuery.ajaxPrefilter/" title="">more info &raquo;</a>
        </span> 
       </li>
       <li><a href="">$.ajaxTransport</a>([datatype],fn)
        <span>处理自定义数据类型<br>
        传输（transport）是一个对象，它提供了两种方法，send 和 abort，内部使用由$.ajax()发出请求。传输（transport）是最高级的方法用来增强$.ajax()并且应仅作为当预过滤器（prefilters）和转换器（converters）无法满足你的需求的时候的最后的手段。<br>
        由于每个请求需要有自己的传输（transport）对象实例，传输不能直接注册。因此，你应该提供一个函数代替返回传输（transport）。<br>
        <a href="http://jquery.bootcss.com/jQuery.ajaxTransport/" title="">more info &raquo;</a>
        </span> 
       </li></ul>       
      <h4>[<span>-</span>] 表单序列化</h4>
      <ul>
       <li><a href="">serialize()</a>
        <span>$('form').serialize() 获取到 name=value&name=value 格式<br>
        当对整体表单进行序列化时,注意被序列对象为form,会自动编码. <br>
        注意: 只有 "successful controls"可以被序列化成字符串。其中，提交按钮的值不会被序列化。<br>
        另外，如果想要一个表单元素的值被序列化成字符串，这个元素必须含有 name属性。<br>此外，复选框（checkbox）和单选按钮（radio）(input 类型为 "radio" 或 "checkbox")的值只有在被选中时才会被序列化。<br>另外，文件选择元素的数据也不会被序列化。<br> 
        <a href="http://jquery.bootcss.com/serialize/">more info &raquo;</a>
        </span> 
        </li>
       <li><a href="">$.param</a>({obj})
        <span>将复杂的对象键值对转为name=value格式. <br>
        因为一些框架解析序列化的数字的能力有限， 在传递 obj 参数时我们应该谨慎，尽量不要传递含有对象的数组，或者数组中嵌套其它数组。<br>
        <a href="http://jquery.bootcss.com/jQuery.param/">more info &raquo;</a>
        </span> 
       </li></ul>
      <h4>[<span>-</span>] 快捷方法</h4>
      <ul>
       <li><a href="">load</a>(url [.sel],[data],fn)
        <span>
         url .selector对载入的HTML进行筛选，那么只要在 url 参数后面跟着一个选择器即可<br>
         $(box).load('http://domain.com/test.html .some')  <strong>//注意加.号</strong><br>
         一般用于静态文件加载
        </span>
        </li>
       <li><a href="">$.get</a>(url,[data],fn,type)
        <span>
         传参方式: <br>
         $.get('url?name=value') <br>
         $.get('url','name=value&name=value') <br>
         $.get('url',{name:'value',name:'value'}) <br>
         type指定异步返回的类型: xml/html/script/json/jsonp/text<br>
         一般情况下 type参数是智能判断,并不需要我们主动设置,如果主动设置,则会强行按照指定类型格式返回.<br>
         XML: $(response).find('xmltag1').find('xmltag2').text() <br>
         <br>
        </span>
        </li>
       <li><a href="">$.post</a>(url,[data],fn,type)
        <span>
         传参方式：<br>
         $.get('url','name=value&name=value') <br>
         $.get('url',{name:'value',name:'value'}) <br>
        </span>
        </li>
       <li><a href="">fn</a>(response,status,xhr)
        <span>
         回调参数：<br>
         response（请求返回的原文本）<br>
         status（请求状态):成功 success | 失败 error<br>
         xhr（XMLHttpRequest对象）【属性见XHR条目】<br>
        </span>

        </li>
       <li><a href="">$.getScript</a>(url,fn)
        <span>
         一般只需第一个参数,用于过多JS动画等分次按需加载
        </span></li>
       <li><a href="">$.globalEval(code)</a><span>
        此方法的表现不同于正常使用的JavaScript eval()，因为它是在全局上下文下执行（这对加载外部动态脚本很重要）。
        <br><a href="http://jquery.bootcss.com/jQuery.globalEval/">more info &raquo;</a>
       </span></li>  
      <h4>[<span>-</span>] JSON/JSONP</h4>
      <ul>
       <li><a href="">Response Examples</a>(PHP)
        <span>
         <b>GET：test.php?name=value</b><br>
         <pre><code data-language="php">
          <?php
            if ($_GET['name'] == 'value') {
            echo 'some';
            } else {
            echo 'other';
            }
          ?>  
         </code></pre>
         <b>POST：{name:'value'}</b><br>
         <pre><code data-language="php">
           <?php
             if ($_POST['name'] == 'value') {
             echo 'some';
             } else {
             echo 'other';
             }
           ?>  
         </code></pre>
         <b>JSONP：http://domain.com/test.php?callback=? </b><br>
         <b>dataType : 'jsonp'</b><br>         
         <pre><code data-language="php">
            //跨域的 PHP 端文件
            <?php
              $arr = array('a'=>1,'b'=>2,'c'=>3,'d'=>4,'e'=>5);
              $result = json_encode($arr);
              $callback = $_GET['callback'];
              echo $callback."($result)";
            ?>  
         </code></pre>
        </span></li>
       <li><a href="">JSON/JSONP</a>
        <span>对于PHP文件输出的JSON格式数据,需要强制设置dataType为json类型<br />
         <pre><code data-language="javascript">
            //$.ajax()方法跨域获取 JSON
            $.ajax({
             url : 'http://www.li.cc/test.php?callback=?',
             dataType : 'jsonp',
             success : function (response, status, xhr) {
              console.log(response);
              alert(response.a);
             }
            });  
         </code></pre>
        </span></li></ul>
       <li><a href="">$.parseJSON</a>(json)<span>接受一个JSON字符串，返回解析后的对象。</span></li>
       <li><a href="">serializeArray()</a>
        <span>表单序列化：创建一个对象组成的javascript数组，用来编码成一个JSON一样的字符串。<br>
        [
          {
            name: "a",
            value: "1"
          },
          {
            name: "b",
            value: "2"
          }
        ] <br>
        <a href="http://jquery.bootcss.com/serializeArray/">more info &raquo;</a>
        </span>
        </li>
       <li><a href="">$.getJSON</a>(url,[data],fn)
        <span>快捷方法获取JSON文件：<br>
         JSON:$(response)[index].prop
        </span></li></ul>
      <h4>[<span>-</span>] ajax事件</h4>
      <ul>
       <li><a href="">ajaxSend</a>(fn)<span>请求发送前执行函数</span></li>
       <li><a href="">ajaxStart</a>(fn)
        <span>绑定在document上.ajax请求提交<br>
        例：$('document').ajaxStart(funtion(){<br>
         $('隐藏提示盒').show();<br>
        }).ajaxStop(function(){<br>
         $('隐藏提示盒').hide();<br>
        })<br>
        </span></li>
       <li><a href="">ajaxSuccess</a>(fn)<span>请求成功时执行函数,局部方法.success()和.done()</span></li>
       <li><a href="">ajaxComplete</a>(fn)<span>请求完成时执行函数,不管是否成功,局部方法.complete()和.always()</span></li>
       <li><a href="">ajaxError</a>(fn)<span>请请求发生错误时执行函数,局部方法.error()和.fail()</span></li>
       <li><a href="">ajaxStop</a>(fn)
        <span>ajax请求结束</span></li></ul>
      <h4>[<span>-</span>] 错误处理</h4>
      <ul>
       <li><a href="">$.ajax({error:fn})</a>
        <span>调用ajax全局方法之局部对象属性:<br>
        error : function (xhr,errorText,errorType){}
        </span></li>
       <li><a href="">$.post().error(fn)</a>
        <span>ajax快捷方法.error()连缀提示<br>
        $.post().error(function(){xhr,status,info})
        </span></li>
       <li><a href="">$(doc).$.ajaxError(fn)</a>
        <span>全局.ajaxError()事件<br>
        $(document).ajaxError(function (event, xhr, settings, infoError) {}
        </span></li>
       <li><a href="">XHR/jqXHR/$.when()</a>
        <span>
        使用 jqXHR 的连缀方式比$.ajax()的属性方式有三大好处：<br>
         1.可连缀操作，可读性大大提高；<br>
         2.可以多次执行同一个回调函数；<br>
         jqXHR.done().done(); //同时执行多个成功后的回调函数<br>
         3.为多个操作指定回调函数；<br>
         //多个操作指定回调函数<br>
         var jqXHR = $.ajax('test.php');<br>
         var jqXHR2 = $.ajax('test2.php');<br>
         $.when(jqXHR, jqXHR2).done(function (r1,r2) {  //传入参数<br>
         alert(r1[0]);  //需要指定[0]获取jqXHR对象数据,而不是jqXHR<br>
         alert(r2[0]);<br>
         });<hr>
        XMLHttpRequest属性<br>
         <table width="100%" border="1" cellspacing="0" cellpadding="2">
          <tbody>
          <tr>
          <td valign="top">xhr.responseText</td>
          <td valign="top">作为响应主体被返回的文本</td>
          </tr>
          <tr>
          <td valign="top">xhr.responseXML</td>
          <td valign="top">如果响应主体内容类型是"text/xml"或"application/xml" ，则返回包含响应数据的 XML DOM 文档</td>
          </tr>
          <tr>
          <td valign="top">xhr.status</td>
          <td valign="top">响应的 HTTP 状态，成功为200</td>
          </tr>
          <tr>
          <td valign="top">xhr.statusText</td>
          <td valign="top">HTTP 状态的说明(成功为ok)
          <div>
          <ul>
           <li>200 OK 服务器成功返回了页面</li>
           <li>400 Bad Request 语法错误导致服务器不识别</li>
           <li>401 Unauthorized 请求需要用户认证</li>
           <li>404 Not found 指定的 URL 在服务器上找不到</li>
           <li>500 Internal Server Error 服务器遇到意外错误，无法完成请求</li>
           <li>503 ServiceUnavailable 由于服务器过载或维护导致无法完成请求</li>
          </ul>
          </div></td>
          </tr>
          <tr>
           <td valign="top">xhr.readyState</td>
           <td valign="top">请求/相应过程的当前活动阶段
            <div>
            <ul>
             <li>0 未初始化 尚未调用 open()方法</li>
             <li>1 启动 已经调用 open()方法，但尚未调用 send()方法</li>
             <li>2 发送 已经调用 send()方法，但尚未接受响应</li>
             <li>3 接受 已经接受到部分响应数据</li>
             <li>4 完成 已经接受到全部响应数据，而且可以使用</li>
            </ul>
            </div>
           </td>
          </tr>
          </tbody>
         </table>
        </span> 
       </li>
       
      </ul>
    </div>
   </li>
  </ul>
  <ul>
   <li>
    <h3>延迟对象<span>+</span></h3>
    <div style="display:none">
     <ul>
      <li><a href="">def.done</a>(d,[d])<span></span></li>
      <li><a href="">def.fail</a>(failCallbacks)<span></span></li>
      <li><a href="">def.reject</a>(args)<span></span></li>
      <li><a href="">def.rejectWith</a>(c,[a])<span></span></li>
      <li><a href="">def.resolve</a>(args)<span></span></li>
      <li><a href="">def.resolveWith</a>(c,[a])<span></span></li>
      <li><a href="">def.promise</a>([ty],[ta])<span></span></li>
      <li><a href="">def.always</a>(al,[al])<span></span></li>
      <li><a href="">def.notify</a>(args)<span></span></li>
      <li><a href="">def.notifyWith</a>(c,[a])<span></span></li>
      <li><a href="">def.progress</a>(proCal) <span></span></li>
      <li><a href="">def.state()</a><span></span></li>
     </ul>
    </div>
   </li>
   <li>
    <h3>回调函数<span>+</span></h3>
    <div style="display:none">
     <ul>
      <li><a href="">cal.add</a>(callbacks)<span></span></li>
      <li><a href="">cal.disable()</a><span></span></li>
      <li><a href="">cal.empty()</a><span></span></li>
      <li><a href="">cal.fire</a>(arguments)<span></span></li>
      <li><a href="">cal.fired()</a><span></span></li>
      <li><a href="">cal.fireWith</a>([c] [,a])<span></span></li>
      <li><a href="">cal.has</a>(callback)<span></span></li>
      <li><a href="">cal.lock()</a><span></span></li>
      <li><a href="">cal.locked()</a><span></span></li>
      <li><a href="">cal.remove</a>(callbacks)<span></span></li>
      <li><a href="">$.callbacks</a>(flags)<span></span></li>
     </ul>
    </div>
   </li>
   <li>
    <h3>参考资料<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 扩展</h4>
     <ul>
      <li><a href="http://plugins.jquery.com/?s=">官方插件库</a></li>
      <li><a href="http://www.jq22.com/">中文插件库</a></li>
      <li><a href="http://www.jeasyui.com/index.php">Esay UI</a></li>
      <li><a href="http://jqueryui.com/download/">jQuery UI</a></li>
     </ul>
     <h4>[<span>-</span>] 资料</h4>
     <ul>
      <li><a href="http://jquery.bootcss.com/">中文API文档</a></li>
      <li><a href="http://hemin.cn/jq/">JQ中文手册</a></li>
      <li><a href="http://pan.baidu.com/s/1i35lmlf">jQuery源码分析</a><span> jQuery技术内幕：深入解析jQuery架构设计与实现原理</span></li>
      <li><a href="http://study.163.com/course/courseMain.htm?courseId=501006">李炎恢jQuery视频教程</a></li>
     </ul>
     <h4>[<span>-</span>] 浏览器API</h4>
     <ul>
      <li><a href="http://msdn.microsoft.com/zh-cn/ie">IE API</a><span></span></li>
      <li><a href="https://developer.mozilla.org/zh-CN/">FireFox API</a><span></span></li>
     </ul>
     
    </div>
   </li>
   <li>
    <h3>提醒<span>-</span></h3>
    <div>
     <h4>[<span>-</span>] 粗心大魔王</h4>
     <ul>
      <li><a href="">JQ需要先执行ready函数内</a></li>
      <li><a href="">坐标位置与宽度加px</a></li>
      <li><a href="">字符串与属性值要引号</a></li>
      <li><a href="">属性与CSS的回调可用index</a></li>
      <li><a href="">动画中可用options</a></li>
      <li><a href="">使用slow等内置参数时加引号</a></li>
      <li><a href="">事件中可用e和data</a></li>
      <li><a href="">a弹出应用注意先阻止默认行为或+冒泡</a></li>
     </ul>
    </div>
   </li>
  </ul>
 </div>