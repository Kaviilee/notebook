<div class="u-col">
    <div class="u-block">
        <h3>Javascript<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>] 数据类型</h4>
            <ul style="display:none">
                <li>
                    <a href="">Boolean</a>
                    <span>
                        布尔:原始类型
                    </span>
                </li>
                <li>
                    <a href="">Number</a>
                    <span>
                        数值：原始类型 <br>
                        根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(263 -1) 到 263 -1） <br>
                        数字类型只有一个整数: 0
                    </span>
                </li>
                <li>
                    <a href="">String</a>
                    <span>
                        字符串：原始类型 <br>
                        JavaScript 字符串是不可更改的
                    </span>
                </li>
                <li>
                    <a href="">Symbol</a>
                    <span>
                        符号：原始类型 <br>
                        符号类型是唯一的并且是不可修改的,可以用来作为Object的key的值
                    </span>
                </li>
                <li>
                    <a href="">Undefined</a>
                    <span>
                        未定义：原始类型 <br>
                        一个没有被赋值的变量会有个默认值 undefined
                    </span>
                </li>
                <li>
                    <a href="">Null</a>
                    <span>
                        空：原始类型 <br>
                        Null 类型只有一个值： null <br>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management">内存优化</a>
                    </span>
                </li>
                <li>
                    <a href="">Object</a>
                    <span>
                        对象：引用类型（包括数组、函数、标准对象等）
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 变量与常量</h4>
            <ul>
                <li>
                    <a href="">var</a>
                    <span>
                        x1 = 1;<br />
                        var x2 = 2;<br />
                        window.x3 = 3;<br />
                        <a href="http://snandy.iteye.com/blog/720816">3种全局变量的异同</a> <hr>
                        1.变量会提升，在没有声明前调用，会输出undefined <br>
                        2.假设声明a、b、c,且c=a+b，且均为非引用类型，当ab发生变化时，c不会改变，应设为c=fn(return a+b)
                    </span>
                </li>
                <li>
                    <a href="">let</a>
                    <span>
                        let i = 1;<br>
                        1.申明一个块级作用域的变量 <br>
                        2.不能使用let重复定义一个变量 <br>
                        3.只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响，暂时性死区。<br>
                    </span>
                </li>
                <li>
                    <a href="">const</a>
                    <span>
                        const PI = 3.14 <br>
                        1.const来定义常量，在声明时就必须赋值。<br>
                        2.const与let都具有块级作用域。 <br>
                        2.一旦声明，常量的指针就不能改变（仅指针，非值本身）
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 表达式与运算符</h4>
            <ul>
                <li>
                    <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Expressions_and_Operators">运算符</a>
                </li>
                <li>
                    <a href="">void</a>
                    <span>
                        void运算符对给定的表达式进行求值，然后返回 undefined <br>
                        在使用立即执行的函数表达式时，可以利用 void 运算符让 JavaScript 引擎把一个function关键字识别成函数表达式而不是函数声明（语句）
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 流程控制</h4>
            <ul>
                <li>
                    <a href="">if..else..</a>
                    <span>
                        if.. <br>
                        if..else.. <br>
                        if..else if..else..
                    </span>
                </li>
                <li>
                    <a href="">switch</a>
                    <span>
                        switch(expression){ <br>
                            case ex:<br>
                                ..<br>
                            break;<br>
                            default:<br>
                                ..<br>
                        }<br>
                        1.switch中的case为全等判断<br>
                        2.多个case使用同一个执行块应写为case 1: case2: ... <br>
                        3.每个case代码块内部的break不能少，否则会接着执行下一个case
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 循环与迭代</h4>
            <ul>
                <li>
                    <a href="">for</a>
                    <span>
                        设置循环变量的部分和循环体内部有各自单独的作用域，变量彼此不影响（使用let时）。
                    </span>
                </li>
                <li>
                    <a href="">for..in</a>
                    <span>
                        循环一个对象所有可枚举的属性
                    </span>
                </li>
                <li>
                    <a href="">for..of</a>
                    <span>
                        在可迭代的对象上创建了一个循环 <br>
                        包括Array, Map, Set, 参数对象（ arguments） 等等
                    </span>
                </li>
                <li>
                    <a href="">do..while</a>(exp)
                    <span>
                        一直重复直到指定的条件求值得到假
                    </span>
                </li>
                <li>
                    <a href="">while</a>(exp)..
                    <span>
                        一个 while 语句只要指定的条件求值为真（true）就会一直执行它的语句块
                    </span>
                </li>
                <li>
                    <a href="">label</a>:
                    <span>
                        使用 break 或者 continue 来指出程序是否该停止循环还是继续循环
                    </span>
                </li>
                <li>
                    <a href="">break</a> [label]
                    <span>
                        跳出(内部/指定)循环 
                    </span>
                </li>
                <li>
                    <a href="">continue</a> [label]
                    <span>
                        跳至(内部/指定)循环 <hr>
                        不带参数的break和continue语句都只针对最内层的循环，如continue语句后面不使用标签，则进入下一轮的内层循环 <br>
                        带参数的break和continue语句，满足条件时，会跳过当前循环，直接进入下一轮外层循环
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 模块引入与导出</h4>
			<ul>
                <li>
                    <a href="">import $path</a>
                    <span>
                        引入某个模块
                    </span>
                </li>
                <li>
                    <a href="">export default $mod</a>
                    <span>
                        输出某个模块
                    </span>
                </li>
                <li>
                    <a href="">import $mod from $path</a>
                    <span>
                        引入某个模块
                    </span>
                </li>
				<li>
            		<a href="">export {mods,..}</a>
            		<span>
            			导出多个模块 <br>
                        也可以将其导出时更换为别的名称：<br>
                        export {<br>
                            $inner as $outer,<br>
                            .. <br>
                        }
            		</span>
            	</li>
            	<li>
            		<a href="">import {mods,..} from $path</a>
            		<span>
            			导入多个模块 <br>
                        也可以在导入时将其重命名：<br>
                        import {
                            $old as $new,<br>
                            .. <br>
                        } <hr>
                        也可以将其全部导入在一个对象下： <br>
                        import * as $modc from $path <br>
            		</span>
            	</li>
			</ul>
        </div>
    </div>
</div>