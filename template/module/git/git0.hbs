<div class="u-col">
  <div class="u-block">
      <h3>配置</a><span>-</span></h3>
      <div class="u-list">
            <h4>[</a><span>-</span>] 账户</h4>
            <ul>
                <li>
                    <em>config</em><a href=""></a>
                    <span>
                        <b>/etc/gitconfig</b><br>
                        系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件。<br>
                        <b>~/.gitconfig</b><br>
                        用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。<br>
                        <b>.git/config</b><br>
                        当前项目的 Git 目录中的配置文件（也就是工作目录中的）<br>
                        这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。
                    </span>
                </li>
                <li>
                    git <a href="">config --list</a>
                    <span>查看各项设置值。<br>
                    </span>
                </li>
                <li>
                    git <a href="">config user.[option]</a>
                    <span>
                        $ git config --global user.name "username" <br>
                        $ git config --global user.email user@example.com <br>

                        使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。
                    </span>
                </li>
                <li>
                    <em>ssh key</em><a href=""></a>
                    <span>
                        1.查看是否已存在ssh密钥：cd ~/.ssh <br>
                        2.生成密钥： ssh-keygen -t rsa -C "username@mail.com" 按3个回车,密码为空 <br>
                        3.得到文件：id_rsa私钥和id_rsa.pub公钥 <br>
                        4.添加密钥到ssh：ssh-add $file.name
                    </span>
                </li>
                <li>
                    <em>.gitignore</em><a href=""></a>
                    <span>需要被忽略的文件<br>
                        <a href="https://github.com/github/gitignore">查看多语言范本</a><br>
                        .gitignore 的格式规范如下：
                        <hr>
                        所有空行或者以 ＃ 开头的行都会被 Git 忽略。<br>
                        可以使用标准的 glob 模式匹配。<br>
                        匹配模式可以以（/）开头防止递归。<br>
                        匹配模式可以以（/）结尾指定目录。<br>
                        要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。<br>
                        <hr>
                        所谓的 glob 模式是指 shell 所使用的简化了的正则表达式。 <br>
                        星号（*）匹配零个或多个任意字符；<br>
                        [abc] 匹配任何一个列在方括号中的字符（这个例子要么匹配一个 a，要么匹配一个 b，要么匹配一个 c）；<br>
                        问号（?）只匹配一个任意字符；<br>如果在方括号中使用短划线分隔两个字符，表示所有在这两个字符范围内的都可以匹配（比如 [0-9] 表示匹配所有 0 到 9 的数字）。 <br>
                        使用两个星号（*) 表示匹配任意中间目录，比如`a/**/z` 可以匹配 a/z, a/b/z 或 `a/b/c/z`等。
                    </span>
                </li>
            </ul>
            <h4>[</a><span>-</span>] 帮助</h4>
            <ul>
                <li>git <a href="">help</a><span></span></li>
            </ul>
      </div>
      <h3>自定义</a><span>-</span></h3>
      <div class="u-list">
            <h4>[</a><span>-</span>] 别名</h4>
            <ul>
                <li>git <a href="">config</a> --global alias.$new $old<span>
                    $ git config --global alias.st status <br>
                    用st替代status
                </span></li>
                <li>git <a href="">last</a><span>
                    $ git config --global alias.last 'log -1' <br>
                    配置显示最后一次提交信息 <br>
                    <a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375234012342f90be1fc4d81446c967bbdc19e7c03d3000">参考资料</a>
                </span></li>
            </ul>
      </div>
  </div>
</div>