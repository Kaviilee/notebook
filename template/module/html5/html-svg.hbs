<div class="u-col">
    <div class="u-block">
        <h3>SVG<span>-</span></h3>
        <div class="u-list">
			<h4>[<span>+</span>]概念资料</h4>
            <ul style="display:none">
                <li><a href="">插入方式</a><span>
                    <a href="http://www.w3cplus.com/html5/svg-introduction-and-embedded-html-page.html">嵌入方式：</a>
                    <br />1.img标签:<input type="text" style="width:200px" value='<img src="demo.svg" alt=""/>'/>
                    <br />2.css背景:<input type="text" style="width:200px" value=' background: url("http://www.w3cplus.com/sites/default/files/blogs/2014/1411/girls.svg") no-repeat center;'/>
                    <br />3.svg标签
                    <textarea name="" id="" cols="30" rows="10">
                        <svg xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                        </svg>
                    </textarea>
                    <br />4.iframe标签:<input type="text" style="width:200px" value='<iframe src="http://www.w3cplus.com/sites/default/files/blogs/2014/1411/girls.svg" width="200" height="200" ></iframe>'/>
                    <br />5.使用embed标签(早期将SVG图像嵌入到HTML页面中都是通过embed元素。当时并不是所有的浏览器都支持原生SVG。)<input type="text" style="width:200px" value='<embed src="http://www.w3cplus.com/sites/default/files/blogs/2014/1411/girls.svg" width="300" height="220" type="image/svg+xml" pluginspage="http://www.adobe.com/svg/viewer/install/" />'/>
                    <br />6.使用object标签(object元素是HTML4的标准标签元素，被所有较新的流星器支持。它只不过是不允许使用脚本。)<input type="text" style="width:200px" value='<object data="http://www.w3cplus.com/sites/default/files/blogs/2014/1411/girls.svg" width="300" height="200" type="image/svg+xml" codebase="http://www.adobe.com/svg/viewer/install/" />'/>
                    <br />没有单位时总是以px作为单位,即使父级设置了其他类型单位,子级未设置单位的依然按px绘制。
                </span></li>
                <li><a href="http://www.w3cschool.cc/svg/svg-reference.html">W3school参考手册</a></li>
                <li><a href="http://www.imooc.com/learn/143">视频教程</a></li>
                <li><a href="http://www.w3.org/TR/SVG11/">W3C规范</a></li>
            </ul>
            <h4>[<span>+</span>]工具素材</h4>
            <ul  style="display:none">
                <li><a href="http://filterfactory.mobi/">SVG Filter生成</a></li>
                <li><a href="http://cssplant.com/clip-path-generator">Clip Path生成</a></li>
                <li><a href="http://www.flaticon.com/">Flaticon</a></li>
                <li><a href="https://icomoon.io/app/#/select">Icomoon</a></li>
                <li><a href="http://svg-edit.googlecode.com/svn/branches/2.6/editor/svg-editor.html">SVG Editor</a></li>
            </ul>
            <h4>[<span>-</span>]基本属性</h4>
            <ul>
                <li><a href="">viewBox</a><span>
                    viewBox="x, y, width, height"  // x:左上角横坐标，y:左上角纵坐标，width:宽度，height:高度
                </span></li>
                <li><a href="">preserveAspectRatio</a><span>
                    preserveAspectRatio="xMidYMid meet" <a href="http://www.zhangxinxu.com/wordpress/2014/08/svg-viewport-viewbox-preserveaspectratio/">参考资料</a>
                    <br />第1个值表示，viewBox如何与SVG viewport对齐，自由组合；
                    <br />xMin  viewport和viewBox左边对齐
                    <br />xMid  viewport和viewBox x轴中心对齐
                    <br />xMax  viewport和viewBox右边对齐
                    <br />YMin  viewport和viewBox上边缘对齐。注意Y是大写。
                    <br />YMid  viewport和viewBox y轴中心点对齐。注意Y是大写。
                    <br />YMax  viewport和viewBox下边缘对齐。注意Y是大写。
                    <br />第2个值表示，如何维持高宽比（如果有）。
                    <br />meet  保持纵横比缩放viewBox适应viewport
                    <br />slice 保持纵横比同时比例小的方向放大填满viewport
                    <br />none  扭曲纵横比以充分适应viewport
                </span></li>
                <li><a href="">g</a><span>编组</span></li>
                <li><a href="">defs</a><span>引用的元素容器</span></li>
                <li><a href="">pattern</a><span>定义一个可用于平铺的图案,fill:url(#id)</span></li>
                <li><a href="">use</a><span>svg画布铺满整个浏览器,需要设置html+body~font-size:0;line-height:0;<br />
                    use xlink:href="#id"</span></li>
                <li><a href="">clipPath</a><span>clipPath定义一个用于剪裁的形状,clip-path="url(#id)"通过引用对某个图像进行剪裁
                    <br /><b>单词！！【定义】clipPath 《=》 【引用】clip-path="url(#id)"</b>
                    <br /><b>被剪裁形状内的区间为显示区间！！</b>
                    <br />css制作遮罩动画中,遮罩图形的尺寸不可操作,只有transform属性
                    </span></li>
                <li><a href="">mask</a><span>蒙版
                    <br />maskUnits="'userSpaceOnUse' or 'objectBoundingBox'.设定裁剪面是否是相对完整的视窗或对象（默认：'objectBoundingBox'）"
                    <br />maskContentUnits="第二个掩码相对对象的图形位置使用百分比'userSpaceOnUse'或'objectBoundingBox'（默认：'userSpaceOnUse'）"
                    <br />x="裁剪面掩码（默认值：-10％）" 
                    <br />y="裁剪面掩码（默认值：-10％）" 
                    <br />width="裁剪面掩码（默认是：120％）"
                    <br />height="裁剪面掩码（默认是：120％）"</span></li>
                <li><a href="">image</a><span>
                    定义图像    
                    <br />x="图像的左上角的x轴坐标"
                    <br />y="图像的左上角的y轴坐标"
                    <br />width="图像的宽度". 必须.
                    <br />height="图像的高度". 必须.
                    <br />xlink:href="图像的路径". 必须.
                </span></li>
            </ul>
            <h4>[<span>-</span>]绘制图形</h4>
            <ul>
                <li><a href="">rect</a><span>矩形 x,y,width,height,rx,ry</span></li>
                <li><a href="">circle</a><span>圆形 cx,cy,r</span></li>
                <li><a href="">ellipse</a><span>椭圆 cx,cy,rx,ry</span></li>
                <li><a href="">line</a><span>直线 x1,y1,x2,y2</span></li>
                <li><a href="">polygon</a><span>多边形 points="x1,y1 x2,y2 ...,xN,yN"</span></li>
                <li><a href="">polyline</a><span>折线 points="x1,y1 x2,y2 ...,xN,yN"</span></li>
                <li><a href="">path</a><span>路径 d=". . ."</span></li>
                <li><a href="">text</a><span>文字 x,y</span></li>
            </ul>
            <h4>[<span>-</span>]图形属性</h4>
            <ul>
                <li><a href="">width/height</a><span>宽高</span></li>
                <li><a href="">x/y</a><span>矩形/文字起始点水平/垂直坐标</span></li>
                <li><a href="">rx/ry</a><span>
                    矩形水平圆角 / 椭圆水平半径
                    <br />矩形垂直圆角 / 椭圆垂直半径
                    </span></li>
                <li><a href="">cx/cy</a><span>圆心水平/垂直坐标</span></li>
                <li><a href="">r</a><span>圆半径</span></li>
                <li><a href="">x1,y1,x2,y2</a><span>线条的起始与结束坐标点</span></li>
                <li><a href="">points</a><span>定义多边形/折线每个角的x和y坐标,每一组数x,y xn,yn每一组点之间用空格分开</span></li>
                <li><a href="">d</a><span>定义路径数据：
                    <br />所有命令均允许小写字母。大写表示绝对定位，小写表示相对定位。
                    <br />M = moveto （移动到）
                    <br />L = lineto （连线）
                    <br />H = horizontal lineto （水平连线）
                    <br />V = vertical lineto （垂直连线）
                    <br />C = curveto （曲线）
                    <br />S = smooth curveto （平滑曲线）
                    <br />Q = quadratic Bézier curve （二次贝塞尔曲线）
                    <br />=》M x0 y0 q x1 y1 x2 y2 小写代表相对,即后面的值表示正数+水平向下/负数-水平向上
                    <br />T = smooth quadratic Bézier curveto （平滑贝塞尔曲线）
                    <br />A = elliptical Arc （椭圆弧形）
                    <br />Z = closepath （闭合路径）
                    </span></li>
                <li><a href="">style</a><span>CSS样式</span></li>
            </ul>
            <h4>[<span>-</span>]样式属性</h4>
            <ul>
                <li><a href="">fill</a>(#fff)<span>填充颜色</span></li>
                <li><a href="">fill-opacity</a>(0-1)<span>填充透明度</span></li>
                <li><a href="">stroke</a>(#f39)<span>轮廓颜色</span></li>
                <li><a href="">stroke-opacity</a>(0-1)<span>轮廓线透明度</span></li>
                <li><a href="">stroke-width</a>(8)<span>轮廓宽度(可不要单位)</span></li>
                <li><a href="">stroke-linecap</a>(round)<span>轮廓笔触样式
                    <br />butt:结尾柄
                    <br />round:圆
                    <br />square:方
                    </span></li>
                <li><a href="">stroke-dasharray</a><span>虚线样式
                    <br />自定义虚线的结构
                    <br />stroke-dasharray="5,5" 
                    <br />stroke-dasharray="20,10,5,5,5,10"
                    <br />SVG描边动画,设置stroke-dasharray: 1000;stroke-dashoffset: 1000;设置keyframe{ to{stroke-dashoffset: 0;}}
                    </span></li>
                <li><a href="">transform</a><span>变换是基于自身坐标系！矩阵等同线性代数矩阵</span></li>
            </ul>
            <h4>[<span>-</span>]字体</h4>
            <ul>
                <li><a href="">text</a><span>文字，基于基线对齐</span></li>
                <li><a href="">textPath</a><span>
                    路径文字 textPath xlink:href="#id"
                    <br />超出路径的部分不会被渲染
                    <br />位移控制：
                    <br />水平：x(起始位置点),text-anchor:start/end/middle(文字的哪个点对齐文本x起始点),startOffset:%(文本以哪个开始作为与路径对齐的点),dx(切线起点)
                    <br />垂直：y(无),dy(法线位置,dx/dy会对后续字符一起影响)
                    <textarea name="" id="" cols="30" rows="10">
                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink">
                          <defs>
                            <path id="path1" d="M75,20 a1,1 0 0,0 100,0" />
                          </defs>
                          <text x="10" y="100" style="fill:red;">
                            <textPath xlink:href="#path1">I love SVG I love SVG</textPath>
                          </text>
                        </svg>
                    </textarea>
                <li><a href="">tspan</a><span>text中多行文本,可拥有单独样式</span></li>
                <li><a href="">a</a>xlink:href<span>
                    a标签可以添加到任意图形上<br />
                    链接文本,应包围在text外面,xlink:title提示<br />
                    <textarea name="" id="" cols="30" rows="10">
                        <a xlink:href="http://www.w3schools.com/svg/" target="_blank">
                            <text x="0" y="15" fill="red">I love SVG</text>
                        </a>
                    </textarea>
                </span></li>
            </ul>
            <h4>[<span>-</span>]渐变</h4>
            <ul>
                <li><a href="">linearGradient</a><span>线性渐变
                    <br />id="id 属性可为渐变定义一个唯一的名称。引用必须"
                    <br />gradientUnits="'userSpaceOnUse' or 'objectBoundingBox'.使用视图框或对象，以确定相对位置矢量点。 （默认为'objectBoundingBox）"
                    <br />gradientTransform="适用于渐变的转变"
                    <br />x1="渐变向量x启动点（默认0％）"
                    <br />y1="渐变向量y启动点（默认0％）" 
                    <br />x2="渐变向量x的终点。 （默认100％）"
                    <br />y2="渐变向量y的终点。 （默认0％）" 
                    <br />spreadMethod="'pad' or 'reflect' or 'repeat'"
                    <br />xlink:href="reference to another gradient whose attribute values are used as defaults and stops included. Recursive"
                    <textarea name="" id="" cols="30" rows="10">
                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
                          <defs>
                            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                              <stop offset="0%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
                              <stop offset="100%" style="stop-color:rgb(255,0,0);stop-opacity:1" />
                            </linearGradient>
                          </defs>
                          <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />
                        </svg>
                    </textarea>
                </span></li>
                <li><a href="">radialGradient</a><span>径向渐变
                    <br />gradientUnits="'userSpaceOnUse' or 'objectBoundingBox'. 使用视图框或对象以确定相对位置的矢量点。 （默认为'objectBoundingBox）"
                    <br />gradientTransform="适用于渐变的变换" 
                    <br />cx="渐变的中心点（数字或％ - 50％是默认）"
                    <br />cy="渐变的中心点。 （默认50％）"
                    <br />r="渐变的半径。 （默认50％）" 
                    <br />fx="渐变的焦点。 （默认0％）"
                    <br />fy="渐变的焦点。 （默认0％）"
                    <br />spreadMethod="'pad' or 'reflect' or 'repeat'"
                    <br />xlink:href="引用到另一个渐变，其属性值作为默认值。递归"
                    <textarea name="" id="" cols="30" rows="10">
                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
                          <defs>
                            <radialGradient id="grad1" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                              <stop offset="0%" style="stop-color:rgb(255,255,255);
                              stop-opacity:0" />
                              <stop offset="100%" style="stop-color:rgb(0,0,255);stop-opacity:1" />
                            </radialGradient>
                          </defs>
                          <ellipse cx="200" cy="70" rx="85" ry="55" fill="url(#grad1)" />
                        </svg>
                    </textarea>
                </span></li>
            </ul>
            <h4>[<span>+</span>]滤镜</h4>
            <ul style="display:none">
                <li><a href="">filter</a><span>滤镜<br />
                    所有互联网的SVG滤镜定义在defs元素中。defs元素定义短并含有特殊元素（如滤镜）定义。
                    filter标签用来定义SVG滤镜。filter标签使用必需的id属性来定义向图形应用哪个滤镜
                </span></li>
                <li><a href="">示例</a><span>
                    <textarea name="" id="" cols="30" rows="10">
                        <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
                          <defs>
                            <filter id="f1" x="0" y="0">
                              <feGaussianBlur in="SourceGraphic" stdDeviation="15" />
                            </filter>
                          </defs>
                          <rect width="90" height="90" stroke="green" stroke-width="3"
                          fill="yellow" filter="url(#f1)" />
                        </svg>
                    </textarea>
                    <br />filter元素id属性定义一个滤镜的唯一名称
                    <br />feGaussianBlur元素定义模糊效果
                    <br />in="SourceGraphic"这个部分定义了由整个图像创建效果
                    <br />stdDeviation属性定义模糊量
                    <br />rect元素的滤镜属性用来把元素链接到"f1"滤镜
                </span></li>
                <li><a href="">feBlend</a><span>与图像相结合的滤镜</span></li>
                <li><a href="">feOffset</a><span>过滤阴影</span></li>
                <li><a href="">feGaussianBlur</a>高斯模糊<span></span></li>
                <li><a href="">feColorMatrix</a><span>用于彩色滤光片转换</span></li>
                <li><a href="">feComponentTransfer</a><span></span></li>
                <li><a href="">feComposite</a><span></span></li>
                <li><a href="">feConvolveMatrix</a><span></span></li>
                <li><a href="">feDiffuseLighting</a><span></span></li>
                <li><a href="">feDisplacementMap</a><span></span></li>
                <li><a href="">feFlood</a><span></span></li>
                <li><a href="">feImage</a><span></span></li>
                <li><a href="">feMerge</a><span></span></li>
                <li><a href="">feMorphology</a><span></span></li>
                <li><a href="">feSpecularLighting</a><span>feTile</span></li>
                <li><a href="">feTurbulence</a><span></span></li>
                <li><a href="">feDistantLight</a><span>用于照明过滤</span></li>
                <li><a href="">fePointLight</a><span>用于照明过滤</span></li>
                <li><a href="">feSpotLight</a><span>用于照明过滤</span></li>
            </ul>
            <h4>[<span>-</span>]动画</h4>
            <ul>
                <li><a href="">参数详解</a><span><a href="http://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/">参考资料</a>
                    <br />attributeName : 可以是元素直接暴露的属性，可以是CSS属性
                    <br />attributeType : CSS/XML/auto
                    <br />from = 动画的起始值。
                    <br />to = 指定动画的结束值,如果to,by同时出现，则by打酱油，只识别to.
                    <br />by = 动画的相对变化值。
                    <br />values = "a,b,c,d"用分号分隔的一个或多个值，可以看出是动画的多个关键值点。
                    <br />begin = "3s;6s" 动画开始的时间。begin的定义是分号分隔的一组值；
                    <br />      相对时间：-3s；
                    <br />      关联其他：id.end/begin +/-3s；
                    <br />      绑定事件：id.click +/-3s；
                    <br />      重复次数：id.repeat(整数) +/-3s；
                    <br />      某个按键：accessKey(" character ")
                    <br />      无线等待：indefinite  需要beginElement()方法触发或者指向该动画元素的超链接(SVG中的a元素)
                    <br />dur = "3s" 动画执行的时间
                    <br />calcMode = discrete离散，from值直接跳到to值。
                    <br />         linear线性，动画从头到尾的速率都是一致的
                    <br />         paced踏步，通过插值让动画的变化步调平稳均匀
                    <br />         spline样条，插值定义贝塞尔曲线
                    <br />repeatCount:表示动画执行次数,合法数值或者indefinite
                    <br />repeatDur:定义重复动画的总时间,可以是普通时间值或者indefinite
                    <br />fill:freeze元素保持了动画结束之后的状态 | remove表示动画结束直接回到开始的地方
                    <br />accumulate:是累积的意思。支持参数有：none | sum. 默认值是none. 如果值是sum表示动画结束时候的位置作为下次动画的起始位置。
                    <br />additive:控制动画是否附加。支持参数有：replace | sum. 默认值是replace. 如果值是sum表示动画的基础知识会附加到其他低优先级的动画上
                    <br />restart:always | whenNotActive | never.always是默认值，表示总是，也就是点一次圈圈，马儿跑一下。whenNotActive表示动画正在进行的时候，是不能重启动画的。never表示动画是一波流。
                        </span></li>
                <li><a href="">set</a><span>
                    <a href="http://www.zhangxinxu.com/wordpress/2014/08/so-powerful-svg-smil-animation/">参考资料</a>
                    <textarea name="" id="" cols="30" rows="10">
                        <set attributeName="x" attributeType="XML" to="60" begin="3s" />
                    </textarea>
                        </span></li>
                <li><a href="">animate</a><span>随时间动态改变属性
                    <br />attributeName="目标属性名称"
                    <br />from="起始值"
                    <br />to="结束值"
                    <br />dur="持续时间"
                    <br />repeatCount="动画时间将发生"</span></li>
                <li><a href="">animateColor</a><span>定义随着时间的推移颜色转换
                    <br />by="相对偏移值"
                    <br />from="起始值"
                    <br />to="结束值"</span></li>
                <li><a href="">animateMotion</a><span>使元素沿着动作路径移动
                    <br />calcMode="动画的插补模式。可以是'discrete', 'linear', 'paced', 'spline'"
                    <br />path="运动路径"
                    <br />keyPoints="沿运动路径的对象目前时间应移动多远"
                    <br />rotate="应用旋转变换"
                    <br />xlink:href="一个URI引用<path>元素，它定义运动路径"</span></li>
                <li><a href="">animateTransform</a><span>动画上一个目标元素变换属性，从而使动画控制平移，缩放，旋转或倾斜
                    <br />by="相对偏移值"
                    <br />from="起始值"
                    <br />to="结束值"
                    <br />type="类型的转换其值是随时间变化。可以是 'translate', 'scale', 'rotate', 'skewX', 'skewY'"</span></li>
            </ul>
            <h4>[<span>-</span>]Javascript API</h4>
            <ul>
                <li><a href="">创建图形</a><span>document.creatElementNS(ns,tagName)</span></li>
                <li><a href="">SVG_NS</a><span>'http://www.w3.org/2000/svg'</span></li>
                <li><a href="">XLINK_NS</a><span>'http://www.w3.org/1999/xlink'</span></li>
                <li><a href="">Morpheus</a><span> 平滑复杂动画的补间动画创建
                    <a href="https://github.com/alexk111/SVG-Morpheus">Git</a> | 
                    <a href="http://www.zhangxinxu.com/wordpress/?p=4480">参考资料</a>
                    <br />用法：
                    <br />1.引入库,创建SVG,给SVG画布定义id,内部元素必须为g分组,不支持symbol,同样给定id
                    <br />2.实例化SVG为对象，此处为整个svg画布。var myIcons = new SVGMorpheus('#icon');不设置参数时默认显示最后一个g。
                    <br />3.切换目标，注意此处引入的id不再加“#”号！myIcons.to('icon-pacman');结合事件切换
                    <hr />SVGMorpheus构造方法
                    <br />var myIcons = new SVGMorpheus(element, options, callback);
                    <br />1.element
                    <br />SVG元素，可以是选择器（字符串）、也可以直接就是SVG元素、Object元素或IFrame元素（对象）。
                    <br />2.options
                    <br />可选参数们。具体见下：
                    <br />options.iconId – 可选。表示初始化之后，默认显示的图标id, 如果不使用默认值，则使用最后一个图标。
                    <br />options.duration – 可选。动画持续时间，单位是毫秒。默认是750ms.
                    <br />options.easing – 可选。设置默认缓动类型（缓动关键字后面有陈列）。默认是：quad-in-out.
                    <br />options.rotation – 可选。设置动画旋转方向，顺时针还是逆时针，支持下面4个关键字clock, counterclock, random以及none, 分别表示顺时针，逆时针，随机时针以及没有旋转。默认值是clock也就是顺时针变旋转变补间。
                    <br />3.callback
                    可选。设置所有图标变换动画结束后的回调。
                    <hr />SVGMorpheus.to()方法
                    <br />myIcons.to(iconId, options, callback);
                    <br />1.iconId
                    <br />要变换的图标的id, 在<g>元素上。【不需要#】
                    <br />2.options
                    <br />可选参数们。具体见下：
                    <br />options.iconId – 可选。表示初始化之后，默认显示的图标id, 如果不使用默认值，则使用最后一个图标。
                    <br />options.duration – 可选。当前动画持续时间，单位是毫秒。默认是750ms.
                    <br />options.easing – 可选。设置当前动画缓动类型（缓动关键字后面有陈列）。默认是：quad-in-out.
                    <br />circ-in, circ-out, circ-in-out, cubic-in, cubic-out, cubic-in-out, elastic-in, elastic-out, elastic-in-out, expo-in, expo-out, expo-in-out, linear, quad-in, quad-out, quad-in-out, quart-in, quart-out, quart-in-out, quint-in, quint-out, quint-in-out, sine-in, sine-out, sine-in-out
                    <br />options.rotation – 可选。设置当前动画旋转方向，顺时针还是逆时针，支持下面4个关键字clock, counterclock, random以及none, 分别表示顺时针，逆时针，随机时针以及没有旋转。默认值是clock也就是顺时针变旋转变补间。
                    <br />3.callback
                    可选。设置当前图标变换动画结束后的回调。
                </span></li>
                <li><a href="http://snapsvg.io/">Snap.svg</a></li>
                <li><a href="http://www.zhangxinxu.com/GitHub/demo-Snap.svg/demo/basic/">Snap API</a></li>
            </ul>
        </div>
    </div>
</div>