<div class="u-col">
    <div class="u-block">
        <h3>Other<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] Application Cache</h4>
            <ul>
                <li>
                    <a href="http://www.runoob.com/html/html5-app-cache.html">Manifest</a>
                </li>
            </ul>
            <h4>[<span>-</span>] Web Workers</h4>
            <ul>
                <li>
                    <a href="">new Worker</a>(file.js)
                    <span>
                        当在 HTML 页面中执行脚本时，页面的状态是不可响应的，直到脚本已完成。 <br>
                        web worker 是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行。
                    </span>
                </li>
                <li>
                    wk.<a href="">terminate()</a>
                    <span>
                        终止 web worker，并释放浏览器/计算机资源
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] CORS</h4>
            <ul>
                <li><a href="http://javascript.ruanyifeng.com/bom/cors.html">CORS</a></li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>Web API<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] postMessage (窗口间)</h4>
            <ul>
                <li>
                    window.<a href="">postMessage</a>
                    <span>
                        跨文档通信 API（Cross-document messaging）。
                        
                    </span>
                </li>
                <li>
                    otherWindow.<a href="">postMessage</a><em>(msg,target)</em>
                    <span>
                        给其他窗口发送消息。<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/postMessage">参考资料</a>
                    </span>
                </li>
                <li>
                    <em>[event]</em><a href="">message</a>
                    <span>
                        window.postMessage() 方法被调用时，会在所有页面脚本执行完毕之后（e.g., 在该方法之后设置的事件、之前设置的timeout 事件,etc.）向目标窗口派发一个  MessageEvent 消息。 该MessageEvent消息有四个属性需要注意： message 属性表示该message 的类型； data 属性为 window.postMessage 的第一个参数；origin 属性表示调用window.postMessage() 方法时调用页面的当前状态； source 属性记录调用 window.postMessage() 方法的窗口信息。
                    </span>
                </li>
                <li>
                    e.<a href="">source</a>
                    <span>
                        发消息的窗口
                    </span>
                </li>
                <li>
                    e.<a href="">origin</a>
                    <span>
                        消息发向的网址
                    </span>
                </li>
                <li>
                    e.<a href="">data</a>
                    <span>
                        消息内容
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] SSE (服务器->页面)</h4>
            <ul>
                <li>
                    <a href="">new EventSource</a>('url')
                    <span>
                        EventSource 对象用于接收服务器发送事件通知，url规定发送更新的页面
                    </span>
                </li>
                <li>
                    sse.<a href="">onmessage</a>(fn)
                    <span>
                        e.data 接受的数据 <br>
                        <a href="http://www.runoob.com/html/html5-serversentevents.html">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] Notifications (页面->桌面)</h4>
            <ul>
                <li>
                    Notification.<a href="">permission</a>
                    <span>
                        用于读取用户给予的权限，它是一个只读属性，它有三种状态 <br>
                        default：用户还没有做出任何许可，因此不会弹出通知。 <br>
                        granted：用户明确同意接收通知。 <br>
                        denied：用户明确拒绝接收通知。
                    </span>
                </li>
                <li>
                    Notification.<a href="">requestPermission()</a>
                    <span>
                        Notification.requestPermission方法用于让用户做出选择，到底是否接收通知。它的参数是一个回调函数，该函数可以接收用户授权状态作为参数。
                    </span>
                </li>
                <li>
                    <a href="">new Notification</a><em>(title,[option])</em>
                    <span>
                        Notification构造函数的title属性是必须的，用来指定通知的标题，格式为字符串。options属性是可选的，格式为一个对象，用来设定各种设置。 <hr>
                        body：通知内容，格式为字符串，用来进一步说明通知的目的。<br>
                        dir：文字方向，可能的值为 auto、ltr（从左到右）和rtl（从右到左），一般是继承浏览器的设置。 <br>
                        lang：使用的语种，比如 en-US、zh-CN。<br>
                        tag：通知的 ID，格式为字符串。一组相同tag的通知，不会同时显示，只会在用户关闭前一个通知后，在原位置显示。<br>
                        icon：图标的 URL，用来显示在通知上。
                    </span>
                </li>
                <li>
                    nt.<a href="">onshow</a>
                    <span>
                        通知显示给用户时触发该事件
                    </span>
                </li>
                <li>
                    nt.<a href="">onclick</a>
                    <span>
                        用户点击通知时触发
                    </span>
                </li>
                <li>
                    nt.<a href="">onclose</a>
                    <span>
                        用户关闭通知时触发
                    </span>
                </li>
                <li>
                    nt.<a href="">error</a>
                    <span>
                        通知出错时触发（大多数发生在通知无法正确显示时）
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>移动设备 API<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] Permissions API</h4>
            <ul>
                <li>
                    navigator.<a href="">permissions</a>.query(option)
                    <span>
                        查询某个接口的许可情况
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] Geolocation API</h4>
            <ul>
                <li>
                    navigator.<a href="">getCurrentPosition</a>(sfn,efn)
                    <span>
                        用来获取用户的地理位置 <br>
                        参数为接受或拒绝的回调函数，回调函数的参数是一个event对象
                    </span>
                </li>
                <li>
                    e.<a href="">timestamp</a>
                    <span>
                        返回获得位置信息的具体时间
                    </span>
                </li>
                <li>
                    e.<a href="">coords</a>
                    <span>
                        coords属性指向一个对象，包含了用户的位置信息 <br>
                        coords.latitude：纬度<br>
                        coords.longitude：经度<br>
                        coords.accuracy：精度<br>
                        coords.altitude：海拔<br>
                        coords.altitudeAccuracy：海拔精度（单位：米）<br>
                        coords.heading：以360度表示的方向<br>
                        coords.speed：每秒的速度（单位：米）<br>
                        大多数桌面浏览器不提供上面列表的后四个值。
                    </span>
                </li>
                <li>
                    e.<a href="">code</a>
                    <span>
                        geoError的参数也是一个event对象。event.code属性表示错误类型，有四个值 <br>
                        0：未知错误，浏览器没有提示出错的原因，相当于常量event.UNKNOWN_ERROR。<br>
                        1：用户拒绝授权，相当于常量event.PERMISSION_DENIED。<br>
                        2：没有得到位置，GPS或其他定位机制无法定位，相当于常量event.POSITION_UNAVAILABLE。<br>
                        3：超时，GPS没有在指定时间内返回结果，相当于常量event.TIMEOUT。<br>
                    </span>
                </li>
                <li>
                    navigator.geolocation.<a href="">watchPosition</a><em>(sfn,efn,option)</em>
                    <span>
                        可以用来监听用户位置的持续改变
                    </span>
                </li>
                <li>
                    navigator.geolocation.<a href="">clearWatch</a>(watchID)
                    <span>
                        取消监听
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] Vibration API</h4>
            <ul>
                <li>
                    navigator.<a href="">vibrate</a>(time)
                    <span>
                        用于在浏览器中发出命令，使得设备振动 <br>
                        vibrate方法可以使得设备振动，它的参数就是振动持续的毫秒数。 <br>
                        vibrate方法还可以接受一个数组作为参数，表示振动的模式。偶数位置的数组成员表示振动的毫秒数，奇数位置的数组成员表示等待的毫秒数。 <br>
                        vibrate是一个非阻塞式的操作，即手机振动的同时，JavaScript代码继续向下运行。要停止振动，只有将0毫秒或者一个空数组传入vibrate方法。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] Orientation API</h4>
            <ul>
                <li>
                    <em>[event]</em><a href="">deviceorientation</a>
                    <span>
                        一旦设备的方向发生变化，会触发deviceorientation事件，可以对该事件指定回调函数。
                    </span>
                </li>
                <li>
                    e.<a href="">alpha</a>
                    <span>
                        表示围绕z轴的旋转，从0到360度。当设备水平摆放时，顶部指向地球的北极，alpha此时为0。
                    </span>
                </li>
                <li>
                    e.<a href="">beta</a>
                    <span>
                        表示围绕x轴的旋转，从-180度到180度。当设备水平摆放时，beta此时为0。
                    </span>
                </li>
                <li>
                    e.<a href="">gramma</a>
                    <span>
                        表示围绕y轴的选择，从-90到90度。当设备水平摆放时，gramma此时为0。
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>