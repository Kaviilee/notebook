<div class="u-col">
    <div class="u-block">
        <h3>Canvas<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 核心</h4>
            <ul>
                <li>
                    ele.<a href="">getContext</a>('2d')
                    <span>
                        获得渲染上下文和它的绘画功能
                    </span>
                </li>
                <li>
                    ctx.<a href="">save()</a>
                    <span>
                        保存当前环境的状态 <br>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Transformations">参考资料</a>
                    </span>
                </li>
                <li>
                    ctx.<a href="">restore()</a>
                    <span>
                        返回之前保存过的路径状态和属性
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 绘制-矩形</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">fillRect</a><em>(x,y,w,h)</em>
                    <span>
                        绘制一个填充的矩形 <br>
                        x,y起始坐标，w,y宽度和高度
                    </span>
                </li>
                <li>
                    ctx.<a href="">strokeRect</a><em>(x,y,w,h)</em>
                    <span>
                        绘制一个矩形的边框（镂空的矩形）
                    </span>
                </li>
                <li>
                    ctx.<a href="">clearRect</a><em>(x,y,w,h)</em>
                    <span>
                        清除指定矩形区域，让清除部分完全透明
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 绘制-路径</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">beginPath()</a>
                    <span>
                        新建一条路径，生成之后，图形绘制命令被指向到路径上生成路径。 <hr>
                        图形的基本元素是路径。路径是通过不同颜色和宽度的线段或曲线相连形成的不同形状的点的集合。一个路径，甚至一个子路径，都是闭合的。使用路径绘制图形需要一些额外的步骤。 <br>
                        1.创建路径起始点。<br>
                        2.你使用画图命令去画出路径。<br>
                        3.把路径封闭。<br>
                        4.通过描边或填充路径区域来渲染图形。<br>
                    </span>
                </li>
                <li>
                    ctx.<a href="">closePath()</a>
                    <span>
                        闭合路径之后图形绘制命令又重新指向到上下文中
                    </span>
                </li>
                <li>
                    path.<a href="">moveTo</a>(x,y)
                    <span>
                        将笔触移动到指定的坐标x以及y上
                    </span>
                </li>
                <li>
                    path.<a href="">lineTo</a>(x,y)
                    <span>
                        绘制一条从当前位置到指定x以及y位置的直线
                    </span>
                </li>
                <li>
                    path.<a href="">arc</a><em>(x,y,radius,startAngle,endAngle,aniclockwise)</em>
                    <span>
                        x:圆心x坐标 <br>
                        y:圆心y坐标 <br>
                        radius:半径 <br>
                        startAngle: 起始弧度(x基准) <br>
                        endAngle: 结束弧度 <br>
                        anticlockwise:true(逆时针)/false(顺时针) <hr>
                        弧度，不是度数。 radians(弧度)=(Math.PI/180)*degrees(角度) <br>
                        360度圆：2*Math.PI <br>
                        180度半圆：Math.PI
                    </span>
                </li>
                <li>
                    path.<a href="">arcTo</a><em>(x1,y1,x2,y2,radius)</em>
                    <span>
                        创建两切线之间的弧/曲线 <a href="http://www.runoob.com/tags/canvas-arcto.html">参考资料</a>
                    </span>
                </li>
                <li>
                    path.<a href="">quadraticCurveTo</a><em>(cp1x,cp1y,x,y)</em>
                    <span>
                        绘制二次贝塞尔曲线 <br>
                        cp1x,cp1y为一个控制点，x,y为结束点
                    </span>
                </li>
                <li>
                    path.<a href="">bezierCurveTo</a><em>(cp1x,cp1y,cp2x,cp2y,x,y)</em>
                    <span>
                        绘制三次贝塞尔曲线 <br>
                        cp1x,cp1y为控制点一，cp2x,cp2y为控制点二，x,y为结束点。
                    </span>
                </li>
                <li>
                    ctx.<a href="">stroke()</a>
                    <span>
                        通过线条来绘制图形轮廓
                    </span>
                </li>
                <li>
                    ctx.<a href="">fill()</a>
                    <span>
                        通过填充路径的内容区域生成实心的图形 <br>
                        使用fill方法会自动闭合
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 绘制-Path2D</h4>
            <ul style="display:none;">
                <li>
                    <a href="">new Path2D</a>([path/svg])
                    <span>
                        新建一个Path2D对象 <br>
                        可能将某一个路径作为变量——创建一个它的副本，或者将一个包含SVG path数据的字符串作为变量<br>
                        var path = new Path2D();     // 空的Path对象<br>
                        var path = new Path2D(path); // 克隆Path对象<br>
                        var path = new Path2D(d);    // 从SVG建立Path对象
                    </span>
                </li>
                <li>
                    ctx.<a href="">stroke</a>(path2d)
                    <span>
                        通过线条来绘制图形轮廓
                    </span>
                </li>
                <li>
                    ctx.<a href="">fill</a>(path2d)
                    <span>
                        通过填充路径的内容区域生成实心的图形 <br>
                        使用fill方法会自动闭合
                    </span>
                </li>
                <li>
                    path2d.<a href="">rect</a>(x,y,w,h)
                    <span>
                        不同于SVG，HTML中的元素canvas只支持一种原生的图形绘制：矩形。所有其他的图形的绘制都至少需要生成一条路径。不过，我们拥有众多路径生成的方法让复杂图形的绘制成为了可能。 <br>
                        此方法绘制的是空的矩形，需使用stroke或fill方法进行描边或填充。 <br>
                        当该方法执行的时候，moveTo()方法自动设置坐标参数（0,0）。也就是说，当前笔触自动重置回默认坐标。 
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 绘制-文本</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">fillText</a><em>(text,x,y,[maxw])</em>
                    <span>
                        在指定的(x,y)位置填充指定的文本，绘制的最大宽度是可选的
                    </span>
                </li>
                <li>
                    ctx.<a href="">strokeText</a><em>(text,x,y,[maxw])</em>
                    <span>
                        在指定的(x,y)位置绘制文本边框，绘制的最大宽度是可选的
                    </span>
                </li>
                <li>
                    ctx.<a href="">measure</a>('text')
                    <span>
                        将返回一个 TextMetrics对象的宽度、所在像素，这些体现文本特性的属性 <br>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/TextMetrics">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-模式</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">fillStyle</a>
                    <span>
                        设置图形的填充样式
                    </span>
                </li>
                <li>
                    ctx.<a href="">strokeStyle</a>
                    <span>
                        设置图形轮廓的样式
                    </span>
                </li>
                
                <li>
                    ctx.<a href="">fill</a>(mode)
                    <span>
                        nonzero : 全部填充，默认 <br>
                        evenodd : 奇偶交替
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-颜色</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">fillStyle</a>
                    <span>
                        ctx.fillStyle = '#ff3399' <br>
                        <b>样式设置必须在绘制之前</b>
                    </span>
                </li>
                <li>
                    ctx.<a href="">globalAlpha</a>
                    <span>
                        透明度 0-1
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-图案</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">creatPattern</a><em>(img,type)</em>
                    <span>
                        img:Image对象引用或另一个canvas <br>
                        type: repeat / repeat-x / repeat-y / no-repeat <br>

                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-渐变</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">creatLinearGradient</a><em>(x1,y1,x2,y2)</em>
                    <span>
                        创建一个canvasGradient对象，并且赋给图形的 fillStyle 或 strokeStyle 属性 <hr>
                        线性渐变 <br>
                        渐变的起点 (x1,y1) 与终点 (x2,y2) <br>
                        var lineargradient = ctx.createLinearGradient(0,0,150,150);
                    </span>
                </li>
                <li>
                    ctx.<a href="">creatRadialGradient</a><em>(x1,y1,r1,x2,y2,r2)</em>
                    <span>
                        径向渐变 <br>
                        前三个定义一个以 (x1,y1) 为原点，半径为 r1 的圆，后三个参数则定义另一个以 (x2,y2) 为原点，半径为 r2 的圆。 <br>
                        var radialgradient = ctx.createRadialGradient(75,75,0,75,75,100);
                    </span>
                </li>
                <li>
                    gradient.<a href="">addColorStop</a><em>(position,color)</em>
                    <span>
                        position 参数必须是一个 0.0 与 1.0 之间的数值，表示渐变中颜色所在的相对位置。例如，0.5 表示颜色会出现在正中间。 <br>
                        color 参数必须是一个有效的 CSS 颜色值（如 #FFF， rgba(0,0,0,1)，等等）。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-阴影</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">shadowOffsetX</a>
                    <span>
                        设置或返回阴影与形状的水平距离
                    </span>
                </li>
                <li>
                    ctx.<a href="">shadowOffsetY</a>
                    <span>
                        设置或返回阴影与形状的垂直距离
                    </span>
                </li>
                <li>
                    ctx.<a href="">shadowBlur</a>
                    <span>
                        设置或返回用于阴影的模糊级别
                    </span>
                </li>
                <li>
                    ctx.<a href="">shadowColor</a>
                    <span>
                        设置或返回用于阴影的颜色
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-线条</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">lineWidth</a>
                    <span>
                        设置线条宽度 <br>
                        位置 x.5 来获取精确1px效果<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial/Applying_styles_and_colors">参考资料</a>
                    </span>
                </li>
                <li>
                    ctx.<a href="">lineCap</a>
                    <span>
                        设置线条末端样式 <br>
                        butt:平直 <br>
                        round:圆角 <br>
                        square:向线条的每个末端添加正方形线帽,端点处加上了等宽且高度为一半线宽的方块。
                    </span>
                </li>
                <li>
                    ctx.<a href="">lineJoin</a>
                    <span>
                        设定线条与线条间接合处的样式 <br>
                        miter:创建尖角 <br>
                        round:创建圆角 <br>
                        bevel:创建斜角  <br>
                        <a href="http://www.runoob.com/tags/canvas-linejoin.html">参考资料</a>
                    </span>
                </li>
                <li>
                    ctx.<a href="">miterLimit</a>
                    <span>
                        斜接长度：限制当两条线相交时交接处最大长度； <br>
                        <a href="http://www.runoob.com/tags/canvas-miterlimit.html">参考资料</a>
                    </span>
                </li>
                <li>
                    ctx.<a href="">setLineDash</a>([len,space])
                    <span>
                        设置当前虚线样式 <br>
                        参数接受一个数组，来指定线段与间隙的交替
                    </span>
                </li>
                <li>
                    ctx.<a href="">lineDashOffset</a>
                    <span>
                        设置虚线样式的起始偏移量
                    </span>
                </li>
                <li>
                    ctx.<a href="">getLineDash()</a>
                    <span>
                        返回一个包含当前虚线样式的数组
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 样式-文本</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">font</a>
                    <span>
                        字体属性 '10px Arial'
                    </span>
                </li>
                <li>
                    ctx.<a href="">textAlign</a>
                    <span>
                        文本对齐方式 <br>
                        start(默认), end, left, right , center
                    </span>
                </li>
                <li>
                    ctx.<a href="">textBaseline</a>
                    <span>
                        基线对齐方式 <br>
                        top, hanging, middle, alphabetic(默认), ideographic, bottom
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 图像</h4>
            <ul>
                <li>
                    ctx.<a href="">drawImage</a><em>(img,x,y)</em>
                    <span>
                        渲染图片在canvas里 <br>
                        image如果是svg图像必须在svg根指定元素的宽高 <br>
                        x,y为目标在canvas里的起始坐标
                    </span>
                </li>
                <li>
                    ctx.<a href="">drawImage</a><em>(img,x,y,w,h)</em>
                    <span>
                        指定大小，缩放
                    </span>
                </li>
                <li>
                    ctx.<a href="">drawImage</a><em>(img,sx,sy,sw,sh,dx,dy,dw,dh)</em>
                    <span>
                        图片切片。 <br>
                        前一组表示切片源位置和大小，后一组表示目标显示的位置和大小
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 变换</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">translate</a>(x,y)
                    <span>
                        移动
                    </span>
                </li>
                <li>
                    ctx.<a href="">rotate</a>(angle)
                    <span>
                       以原点为中心旋转  <br>
                       这个方法只接受一个参数：旋转的角度(angle)，它是顺时针方向的，以弧度为单位的值。
                    </span>
                </li>
                <li>
                    ctx.<a href="">scale</a>(x,y)
                    <span>
                        缩放 <br>
                        水平/垂直缩放,0~1,1~+
                    </span>
                </li>
                <li>
                    ctx.<a href="">transform</a><em>(m11,m12,m21,m22,dx,dy)</em>
                    <span>
                        替换绘图的当前转换矩阵 <br>
                        m11：水平方向的缩放<br>
                        m12：水平方向的偏移<br>
                        m21：竖直方向的偏移<br>
                        m22：竖直方向的缩放<br>
                        dx：水平方向的移动<br>
                        dy：竖直方向的移动<br>
                    </span>
                </li>
                <li>
                    ctx.<a href="">setTransform</a><em>(m11,m12,m21,m22,dx,dy)</em>
                    <span>
                        这个方法会将当前的变形矩阵重置为单位矩阵，然后用相同的参数调用 transform 方法。如果任意一个参数是无限大，那么变形矩阵也必须被标记为无限大，否则会抛出异常。从根本上来说，该方法是取消了当前变形,然后设置为指定的变形,一步完成。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 合并与剪裁</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">globalCompositeOperation</a>
                    <span>
                        设置或返回如何将一个源（新的）图像绘制到目标（已有的）的图像上 <br>
                        <a href="http://www.runoob.com/tags/canvas-globalcompositeoperation.html">参考资料</a>
                    </span>
                </li>
                <li>
                    ctx.<a href="">clip()</a>
                    <span>
                        剪切
<pre><code data-language="javascript">
    function drawStar(ctx,r){
      ctx.save();
      ctx.beginPath();
      ctx.moveTo(r,0);
      for (var i=0;i<9;i++){
        ctx.rotate(Math.PI/5);
        if(i%2 == 0) {
          ctx.lineTo((r/0.525731)*0.200811,0);
        } else {
          ctx.lineTo(r,0);
        }
      }
      ctx.closePath();
      ctx.fill();
      ctx.restore();
    }
</code></pre>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] ImageData对象</h4>
            <ul style="display:none;">
                <li>
                    ctx.<a href="">creatImageData</a>(w,h/img)
                    <span>
                        ImageData对象中存储着canvas对象真实的像素数据，它包含以下几个只读属性: <br>
                        width：图片宽度，单位是像素 <br>
                        height：图片高度，单位是像素 <br>
                        data：Uint8ClampedArray类型的一维数组，包含着RGBA格式的整型数据，范围在0至255之间（包括255）。
                    </span>
                </li>
                <li>
                    ctx.<a href="">getImageData</a>(x,y,w,h)
                    <span>
                        获得一个包含画布场景像素数据的ImageData对像
                    </span>
                </li>
                <li>
                    ctx.<a href="">putImageData</a>(data,x,y)
                    <span>
                        对场景进行像素数据写入
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 其它更多</h4>
            <ul style="display:none;">
                <li>
                    <a href="">canvas</a>
                    <span>
                        <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial">MDN参考资料</a> <br>
                        可直接在canvas标签中的内容来提示不支持canvas时的显示内容。 <br>
                        Canvas 的默认大小为300像素×150像素 <br>
                        IE9+
                    </span>
                </li>
                <li><a href="https://www.awesomes.cn/repo/chartjs/chart-js">Chart.js</a></li>
                <li><a href="https://www.awesomes.cn/repo/ecomfe/echarts">echarts</a></li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>SVG<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>+</span>] 其它更多</h4>
            <ul style="display:none;">
                <li><a href="https://www.awesomes.cn/repo/adobe-webplatform/snap-svg">snap.svg</a></li>
                <li><a href="https://www.awesomes.cn/repo/d3/d3">D3</a></li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>MathML<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] MathML</h4>
            <ul>
                <li><a href="https://developer.mozilla.org/en-US/docs/Web/MathML">MathML</a></li>
                <li><a href="https://github.com/Khan/KaTeX">KaTeX</a></li>
            </ul>
        </div>
    </div>
</div>