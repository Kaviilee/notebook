<!-- 系统、进程 -->
<div class="u-col">
    <div class="u-block">
        <h3>os<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 特征</h4>
            <ul>
                <li>
                    os.<a href="">hostname()</a>
                    <span>
                        返回操作系统的主机名
                    </span>
                </li>
                <li>
                    os.<a href="">release()</a>
                    <span>
                        返回操作系统的发行版本
                    </span>
                </li>
                <li>
                    os.<a href="">platform()</a>
                    <span>
                        返回操作系统平台. <br>
                        可能的值'aix','darwin','freebsd','linux','openbsd','sunos','win32'
                    </span>
                </li>
                <li>
                    os.<a href="">arch()</a>
                    <span>
                        返回操作系统 CPU 架构 <br>
                        可能的值'arm', 'arm64', 'ia32', 'mips', 'mipsel', 'ppc', 'ppc64', 's390', 's390x', 'x32', 'x64', 和 'x86'
                    </span>
                </li>
                <li>
                    os.<a href="">type()</a>
                    <span>
                        返回操作系统类型. <br>
                        <table>
                            <tr>
                                <th>系统</th>
                                <th>返回值</th>
                            </tr>
                            <tr>
                                <td>linux</td>
                                <td>'Linux'</td>
                            </tr>
                            <tr>
                                <td>macOS</td>
                                <td>'Darwin'</td>
                            </tr>
                            <tr>
                                <td>Windows</td>
                                <td>'Windows_NT'</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 性能</h4>
            <ul style="display:none;">
                <li>
                    os.<a href="">uptime()</a>
                    <span>
                        返回操作系统运行的时间，以秒为单位。
                    </span>
                </li>
                <li>
                    os.<a href="">loadavg()</a>
                    <span>
                        返回一个包含 1、5、15 分钟平均负载的数组。 <br>
                        平均负载是系统活动的测量,由操作系统计算得出,表达为一个分数. 一般来说,平均负载应该理想地比系统的逻辑CPU的数目要少. 平均负载是UNIX相关的概念,在Windows平台上没有对应的概念. 在Windows上,其返回值总是[0, 0, 0].
                    </span> 
                </li>
                <li>
                    os.<a href="">totalmen()</a>
                    <span>
                        返回系统内存总量，单位为字节。
                    </span>
                </li>
                <li>
                    os.<a href="">freemem()</a>
                    <span>
                        返回操作系统空闲内存量，单位是字节。
                    </span>
                </li>
                <li>
                    os.<a href="">cpus()</a>
                    <span>
                        返回一个对象数组，包含所安装的每个 CPU/内核的信息：型号、速度（单位 MHz）、时间（一个包含 user、nice、sys、idle 和 irq 所使用 CPU/内核毫秒数的对象）。
                        <a href="http://nodejs.cn/api/os.html#os_os_cpus">参考资料</a>
                    </span>
                </li>
                <li>
                    os.<a href="">networkInterfaces()</a>
                    <span>
                        获得网络接口列表。
                        <a href="http://nodejs.cn/api/os.html#os_os_networkinterfaces">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 数据</h4>
            <ul style="display:none;">
                <li>
                    os.<a href="">tmpdir()</a>
                    <span>
                        返回操作系统的默认临时文件夹。 <br>
                        C:\Users\iRuxu\AppData\Local\Temp
                    </span>
                </li>
                <li>
                    os.<a href="">homedir()</a>
                    <span>
                        返回当前用户的home目录
                    </span>
                </li>
                <li>
                    os.<a href="">userInfo</a>([opt])
                    <span>
                        os.userInfo()方法当前有效用户的信息 <hr>
                        1.在 POSIX平台上, 这通常是password 文件的子集. 返回的对象包括 username, uid, gid, shell, 和 homedir. <br>
                        2.在Windows系统上, uid 和 gid 域是 -1, and shell是 null.
                    </span>
                </li>
                <li>
                    os.<a href="">endianness()</a>
                    <span>
                        返回 CPU 的字节序，可能的是 "BE" 或 "LE"。
                    </span>
                </li>
                <li>
                    os.<a href="">constants</a>
                    <span>
                        返回一个包含错误码,处理信号等通用的操作系统特定常量的对象
                        <a href="http://nodejs.cn/api/os.html#os_os_constants_1">参考资料</a>
                    </span>
                </li>
                <li>
                    os.<a href="">EOL</a>
                    <span>
                        一个定义了操作系统的一行结束的标识的常量 <br>
                        <table>
                            <tr>
                                <th>系统</th>
                                <th>标志</th>
                            </tr>
                            <tr>
                                <td>POSIX</td>
                                <td>\n</td>
                            </tr>
                            <tr>
                                <td>Windows</td>
                                <td>\r\n</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>path<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 路径信息</h4>
            <ul>
                <li>
                    path.<a href="">dirname</a>(path)
                    <span>
                        返回路径中代表文件夹的部分，同 Unix 的dirname 命令类似。 <br>
                        不要以\\结尾，总是返回上一级目录
                    </span>
                </li>
                <li>
                    path.<a href="">basename</a>(path,[ext])
                    <span>
                        返回路径中的最后一部分。同 Unix 命令 bashname 类似。 <br>
                        ext:可选的文件扩展名，使用了时，返回的数据不带扩展名
                    </span>
                </li>
                <li>
                    path.<a href="">extname</a>(path)
                    <span>
                        返回路径中文件的后缀名，即路径中最后一个'.'之后的部分。 <br>
                        如果一个路径中并不包含'.'或该路径只包含一个'.' 且这个'.'为路径的第一个字符，则此命令返回空字符串。
                    </span>
                </li>
                <li>
                    path.<a href="">parse</a>(path)
                    <span>
                        返回路径字符串的对象 <br>
                        root:根目录,dir:目录,base:文件名,name:文件名称,ext:扩展名
                    </span>
                </li>
                <li>
                    path.<a href="">format</a>(obj)
                    <span>
                        从对象中返回路径字符串，和 path.parse 相反。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 路径操作</h4>
            <ul>
                <li>
                    path.<a href="">relative</a>(from,to)
                    <span>
                        返回从 from 到 to 的相对路径（基于当前工作目录）
                    </span>
                </li>
                <li>
                    path.<a href="">resolve</a>([...paths])
                    <span>
                        会返回当前工作目录的绝对路径
                    </span>
                </li>
                <li>
                    path.<a href="">isAbsolute</a>(path)
                    <span>
                        判断参数 path 是否是绝对路径
                    </span>
                </li>
                <li>
                    path.<a href="">join</a>([...paths])
                    <span>
                        用于连接路径。 <br>
                        该方法的主要用途在于，会正确使用当前系统的路径分隔符，Unix系统是"/"，Windows系统是"\"。 <br>
                        当出现..自动跳至上一级目录
                    </span>
                </li>
                <li>
                    path.<a href="">normalize</a>(path)
                    <span>
                        规范化路径
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 平台特性</h4>
            <ul style="display:none;">
                <li>
                    path.<a href="">sep</a>
                    <span>
                        平台的文件路径分隔符，'\\' 或 '/'
                    </span>
                </li>
                <li>
                    path.<a href="">delimiter</a>
                    <span>
                        平台特定的路径分隔符 <br>
                        windows为;  posix为:
                    </span>
                </li>
                <li>
                    path.<a href="">posix</a>
                    <span>
                        提供了 path 方法针对 POSIX 的实现
                    </span>
                </li>
                <li>
                    path.<a href="">win32</a>
                    <span>
                        提供上述 path 的方法，不过总是以 win32 兼容的方式交互
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>child_process<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 创建</h4>
            <ul>
                <li>
                    ipc.<a href="">spawn</a><em>(cmd,[args],[opt])</em>
                    <span>
                        通过当前命令启动一个新的进程 <hr>
                        cmd - str,要运行的命令行 <br>
                        args - arr,字符串参数列表 <br>
                        opt - obj,设置 <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options">参考资料</a>
                    </span>
                </li>
                <li>
                    ipc.<a href="">fork</a><em>(modulePath,[arg],[opt])</em>
                    <span>
                        child_process.fork() 方法是 child_process.spawn() 的一个特殊情况，专门用于衍生新的 Node.js 进程。 跟 child_process.spawn() 一样返回一个 ChildProcess 对象。 返回的 ChildProcess 会有一个额外的内置的通信通道，它允许消息在父进程和子进程之间来回传递。
                        <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options">参考资料</a>
                    </span>
                </li>
                <li>
                    ipc.<a href="">exec</a><em>(cmd,[opt],[fn])</em>
                    <span>
                        在shell中运行一个命令，并缓存其输出 <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_exec_command_options_callback">参考资料</a>
                    </span>
                </li>
                <li>
                    ipc.<a href="">execFile</a><em>(file,[arg],[opt],[fn])</em>
                    <span>
                        指定的可执行的 file 被直接衍生为一个新进程 <a href="http://nodejs.cn/api/child_process.html#child_process_child_process_execfile_file_args_options_callback">参考资料</a>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 事件</h4>
            <ul style="display:none;">
                <li>
                    [evt]<a href="">close</a>
                    <span>
                        当子进程的 stdio 流被关闭时会触发 'close' 事件。 这与 'exit' 事件不同，因为多个进程可能共享同一 stdio 流。
                    </span>
                </li>
                <li>
                    [evt]<a href="">disconnect</a>
                    <span>
                        在父进程中调用 subprocess.disconnect() 或在子进程中调用 process.disconnect() 后会触发 'disconnect' 事件。 断开后就不能再发送或接收信息，且 subprocess.connected 属性会被设为 false。
                    </span>
                </li>
                <li>
                    [evt]<a href="">error</a>
                    <span>
                        每当出现以下情况时触发 'error' 事件： <br>
                        1.进程无法被衍生；<br>
                        2.进程无法被杀死；<br>
                        3.向子进程发送信息失败。<br>
                        注意，在错误发生后，'exit' 事件可能会也可能不会触发。 当同时监听了 'exit' 和 'error' 事件，谨防处理函数被多次调用。
                    </span>
                </li>
                <li>
                    [evt]<a href="">exit</a>
                    <span>
                        子进程结束后会触发 'exit' 事件。 如果进程退出了，则 code 是进程的最终退出码，否则为 null。 如果进程是收到的信号而终止的，则 signal 是信号的字符串名称，否则为 null。 这两个总有一个是非空的。 <br>注意，当 'exit' 事件被触发时，子进程的 stdio 流可能依然是打开的。
                    </span>
                </li>
                <li>
                    [evt]<a href="">message</a>
                    <span>
                        当一个子进程使用 process.send() 发送消息时会触发 'message' 事件。
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 子进程</h4>
            <ul style="display:none;">
                <li>
                    subp.<a href="">channel</a>
                    <span>
                        当前子进程的 IPC 通道的引用。如果当前没有 IPC 通道，则该属性为 undefined。
                    </span>
                </li>
                <li>
                    subp.<a href="">connected</a>
                    <span>
                        表明是否仍可以从一个子进程发送和接收消息。 当 subprocess.connected 为 false 时，则不能再发送或接收的消息。
                    </span>
                </li>
                <li>
                    subp.<a href="">disconnect()</a>
                    <span>
                        关闭父进程与子进程之间的 IPC 通道，一旦没有其他的连接使其保持活跃，则允许子进程正常退出。 调用该方法后，父进程和子进程上各自的 subprocess.connected 和 subprocess.connected 属性都会被设为 false，且进程之间不能再传递消息。
                    </span>
                </li>
                <li>
                    subp.<a href="">kill</a>([signal])
                    <span>
                        向子进程发送一个信号。 如果没有给定参数，则进程会发送 'SIGTERM' 信号。
                    </span>
                </li>
                <li>
                    subp.<a href="">killed</a>
                    <span>
                        表明该子进程是否已成功接收到 subprocess.kill() 的信号。 该属性不代表子进程是否已被终止。
                    </span>
                </li>
                <li>
                    subp.<a href="">pid</a>
                    <span>
                        返回子进程的进程标识（PID）
                    </span>
                </li>
                <li>
                    subp.<a href="">send</a>(msg,[handle],[opt],[fn])
                    <span>
                        发送消息到子进程
                    </span>
                </li>
                <li>
                    subp.<a href="">stderr</a>
                    <span>
                        一个代表子进程的 stderr 的可读流。
                    </span>
                </li>
                <li>
                    subp.<a href="">stdin</a>
                    <span>
                        一个代表子进程的 stdin 的可写流。
                    </span>
                </li>
                <li>
                    subp.<a href="">stdio</a>
                    <span>
                        一个到子进程的管道的稀疏数组
                    </span>
                </li>
                <li>
                    subp.<a href="">stdout</a>
                    <span>
                        一个代表子进程的 stdout 的可读流
                    </span>
                </li>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>cluster<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 集群</h4>
            <ul>
            </ul>
        </div>
    </div>
    <div class="u-block">
        <h3>tty<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 终端</h4>
            <ul>
            </ul>
        </div>
    </div>
</div>