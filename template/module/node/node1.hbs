<!-- 文件 -->
<div class="u-col">
    <div class="u-block">
        <h3>fs<span>-</span></h3>
        <div class="u-list">
            <h4>[<span>-</span>] 基本参数</h4>
            <ul>
                <li>
                    <a href="">flags</a>
                    <span>
                        文件打开行为
                        <table>
                            <tr><th>Flag</th><th>描述</th></tr>
                            <tr><td>r</td><td>以读取模式打开文件。如果文件不存在抛出异常。</td></tr>
                            <tr><td>r+</td><td> 以读写模式打开文件。如果文件不存在抛出异常。</td></tr>
                            <tr><td>rs</td><td>以同步的方式读取文件。</td></tr>
                            <tr><td>rs+</td><td>以同步的方式读取和写入文件。</td></tr>
                            <tr><td>w</td><td>以写入模式打开文件，如果文件不存在则创建。</td></tr>
                            <tr><td>wx</td><td>类似 'w'，但是如果文件路径存在，则文件写入失败。</td></tr>
                            <tr><td>w+</td><td>以读写模式打开文件，如果文件不存在则创建。</td></tr>
                            <tr><td>wx+</td><td>类似 'w+'， 但是如果文件路径存在，则文件读写失败。</td></tr>
                            <tr><td>a</td><td>以追加模式打开文件，如果文件不存在则创建。</td></tr>
                            <tr><td>ax</td><td>类似 'a'， 但是如果文件路径存在，则文件追加失败。</td></tr>
                            <tr><td>a+</td><td>以读取追加模式打开文件，如果文件不存在则创建。</td></tr>
                            <tr><td>ax+</td><td>类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。</td></tr>
                        </table>
                    </span>
                </li>
                <li>
                    <a href="">mode</a>
                    <span>
                        文件/文件夹权限
                        <table>
                            <tr>
                                <th></th>
                                <th></th>
                            </tr>
                            <tr>
                                <td></td>
                                <td></td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 获取文件信息</h4>
            <ul style="display:none">
                <li>
                    fs.<a href="">stat</a><em>(path,fn(err,stats))</em>
                    <span>
                        不建议在调用 fs.open() 、fs.readFile() 或 fs.writeFile() 之前使用 fs.stat() 检查一个文件是否存在。 作为替代，用户代码应该直接打开/读取/写入文件，当文件无效时再处理错误。<br>
                        如果要检查一个文件是否存在且不操作它，推荐使用 fs.access()。 <hr>
                        如果发生错误，则 err.code 会是常见系统错误之一。
                    </span>
                </li>
                <li>
                    fs.<a href="">statSync</a><em>(path)</em>
                    <span>
                        同步的 stat(2)。 返回一个 fs.Stats 实例。
                    </span>
                </li>
                <li>
                    fs.<a href="">fstat</a><em>(fd,fn(err,stats))</em>
                    <span>
                        异步的 fstat(2)。 回调获得两个参数 (err, stats)，其中 stats 是一个 fs.Stats 对象。 fstat() 与 stat() 类似，除了文件是通过文件描述符 fd 指定的。 <hr>
                        fstat系统调用接受的是 一个“文件描述符”，而另外两个则直接接受“文件全路径”。文件描述符是需要我们用open系统调用后才能得到的，而文件全路经直接写就可以了。
                    </span>
                </li>
                <li>
                    fs.<a href="">fstatSync</a><em>(fd)</em>
                    <span>
                        同步的 fstat(2)。返回一个 fs.Stats 实例。
                    </span>
                </li>
                <li>
                    fs.<a href="">lstat</a><em>(path,fn(err,stats))</em>
                    <span>
                        当文件是一个符号链接时，lstat返回的是该符号链接本身的信息；而stat返回的是该链接指向的文件的信息。
                        <a href="http://www.cnitblog.com/guopingleee/archive/2008/11/13/51411.aspx">参考资料</a>
                    </span>
                </li>
                <li>
                    fs.<a href="">lstatSync</a><em>(path)</em>
                    <span>
                        同步的 lstat(2)。返回一个 fs.Stats 实例。
                    </span>
                </li>
                <li>
                    stats.<a href="">isFile()</a>
                    <span>
                        如果是文件返回 true，否则返回 false。
                    </span>
                </li>
                <li>
                    stats.<a href="">isDirectory()</a>
                    <span>
                        如果是目录返回 true，否则返回 false。
                    </span>
                </li>
                <li>
                    stats.<a href="">isBlockDevice()</a>
                    <span>
                        如果是块设备返回 true，否则返回 false。
                    </span>
                </li>
                <li>
                    stats.<a href="">isCharacterDevice()</a>
                    <span>
                        如果是字符设备返回 true，否则返回 false。
                    </span>
                </li>
                <li>
                    stats.<a href="">isSymbolicLink()</a>
                    <span>
                        如果是软链接返回 true，否则返回 false。
                    </span>
                </li>
                <li>
                    stats.<a href="">isFIFO()</a>
                    <span>
                        如果是FIFO，返回true，否则返回 false。FIFO是UNIX中的一种特殊类型的命令管道。
                    </span>
                </li>
                <li>
                    stats.<a href="">isSocket()</a>
                    <span>
                        如果是 Socket 返回 true，否则返回 false。
                    </span>
                </li>
                <li>
                    stats.<a href=""></a>value
                    <span>
                        <table>
                            <tr>
                                <th>属性</th>
                                <th>描述</th>
                            </tr>
                            <tr>
                                <td>atime</td>
                                <td>文件数据最近被访问的时间</td>
                            </tr>
                            <tr>
                                <td>mtime</td>
                                <td>文件数据最近被修改的时间</td>
                            </tr>
                            <tr>
                                <td>ctime</td>
                                <td>文件状态最近更改的时间</td>
                            </tr>
                            <tr>
                                <td>birthtime</td>
                                <td>文件创建的时间</td>
                            </tr>
                        </table>
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 检查文件状态</h4>
            <ul style="display:none">
                <li>
                    fs.<a href="">access</a><em>(path,[mode],fn)</em>
                    <span>
                        异步测试指定的文件或目录的用户权限 <hr>
                        fs.constants.F_OK - path 文件对调用进程可见。 这在确定文件是否存在时很有用，但不涉及 rwx 权限。 如果没指定 mode，则默认为该值。 <br>
                        fs.constants.R_OK - path 文件可被调用进程读取。 <br>
                        fs.constants.W_OK - path 文件可被调用进程写入。<br>
                        fs.constants.X_OK - path 文件可被调用进程执行。 对 Windows 系统没作用（相当于 fs.constants.F_OK）
                    </span>
                </li>
                <li>
                    fs.<a href="">accessSync</a><em>(path,[mode])</em>
                    <span>
                        同步测试指定的文件或目录的用户权限
                    </span>
                </li>
            </ul>
            <h4>[<span>+</span>] 文件系统常量</h4>
            <ul>
                <li>
                    fs.<a href="">constants</a>
                    <span>
                        返回一个包含常用文件系统操作的常量的对象。
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 打开文件</h4>
            <ul>
                <li>
                    fs.<a href="">open</a><em>(path,flag,[mode],fn(err,fd))</em>
                    <span>
                        异步打开文件 <hr>
                        path - 文件的路径。 <br>
                        flags - 文件打开的行为。 <br>
                        mode - 设置文件模式(权限)，文件创建默认权限为 0666(可读，可写)。<br>
                        callback - 回调函数，带有两个参数如：callback(err, fd)。fd为文件描述符。
                    </span>
                </li>
                <li>
                    fs.<a href="">openSync</a><em>(path,flags,[mode])</em>
                    <span>
                        同步打开文件。 <br>
                        返回一个表示文件描述符的整数。
                    </span>
                </li>
                <li>
                    fs.<a href="">ftruncate</a><em>(fd,len,fn)</em>
                    <span>
                        异步截取文件 <br>
                        使用文件描述符来读取文件。 <hr>
                        fd - 通过 fs.open() 方法返回的文件描述符。<br>
                        len - 文件内容截取的长度。<br>
                        callback - 回调函数，没有参数。
                    </span>
                </li>
                <li>
                    fs.<a href="">ftruncateSync</a><em>(fd,len)</em>
                    <span>
                        同步截取文件
                    </span>
                </li>
                <li>
                    fs.<a href="">read</a><em>(fd,buffer,offset,length,postion,fn)</em>
                    <span>
                        异步读取文件 <br>
                        该方法使用了文件描述符来读取文件。 <hr>
                        fd - 通过 fs.open() 方法返回的文件描述符。 <br>
                        buffer - 数据写入的缓冲区。<br>
                        offset - 缓冲区写入的写入偏移量。<br>
                        length - 要从文件中读取的字节数。<br>
                        position - 文件读取的起始位置，如果 position 的值为null，则会从当前文件指针的位置读取。<br>
                        callback - 回调函数，有三个参数err, bytesRead, buffer，err 为错误信息，bytesRead 表示读取的字节数，buffer 为缓冲区对象。
                    </span>
                </li>
                <li>
                    fs.<a href="">readSync</a><em>(fd,buffer,offset,length,postion,fn)</em>
                    <span>
                        同步读取文件。 <br>
                        返回 bytesRead 的数量。
                    </span>
                </li>
                <li>
                    fs.<a href="">close</a><em>(fd,fn)</em>
                    <span>
                        异步关闭文件。 <br>
                        使用了文件描述符来读取文件
                    </span>
                </li>
                <li>
                    fs.<a href="">closeSync</a><em>(fd)</em>
                    <span>
                        同步关闭文件
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 读取文件</h4>
            <ul>
                
            </ul>
            <h4>[<span>-</span>] 写入文件</h4>
            <ul>
                <li>
                    fs.<a href="">writeFile</a><em>(file,data,[opt],fn(err))</em>
                    <span>
                        异步写入文件。  <hr>
                        file - 文件名或文件描述符。 <br>
                        data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象。<br>
                        options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 'w' <br>
                        callback - 回调函数，回调函数只包含错误信息参数(err)，在写入失败时返回。
                    </span>
                </li>
                <li>
                    fs.<a href="">writeFileSync</a><em>(file,data,[opt])</em>
                    <span>
                        同步写入文件
                    </span>
                </li>
                <li>
                    fs.<a href="">appendFile</a><em>(file,data,[opt],fn(err))</em>
                    <span>
                        异步地追加数据到一个文件，如果文件不存在则创建文件。 <br>
                        data 可以是一个字符串或 buffer。
                    </span>
                </li>
                <li>
                    fs.<a href="">appendFileSync</a><em>(file,data,[opt])</em>
                    <span>
                        同步地追加数据到一个文件，如果文件不存在则创建文件。 
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 复制文件</h4>
            <ul>
                <li>
                    fs.<a href="">copyFile</a><em>(from,to,[flags],fn(err))</em>
                    <span>
                        异步复制文件(v8.5.0+) <hr>
                        默认情况下，如果 dest 已经存在会被覆盖 <br>
                        flags 是一个可选的整数，用于指定行为的拷贝操作。唯一支持的 flag 是 fs.constants.COPYFILE_EXCL ，如果 dest 已经存在，则会导致拷贝操作失败。
                    </span>
                </li>
                <li>
                    fs.<a href="">copyFileSync</a><em>(from,to,[flags])</em>
                    <span>
                        同步复制文件(v8.5.0+)
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 删除文件</h4>
            <ul>
                <li>
                    fs.<a href="">unlink</a>(path,fn)
                    <span>
                        异步删除文件
                    </span>
                </li>
                <li>
                    fs.<a href="">unlinkSync</a>(path)
                    <span>
                        同步删除文件
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 文件权限</h4>
            <ul>
                <li>
                    fs.<a href="">chmod</a><em>(path,mode,fn(err))</em>
                    <span>
                        异步修改指定路径的权限
                    </span>
                </li>
                <li>
                    fs.<a href="">chmodSync</a><em>(path,mode)</em>
                    <span>
                        同步修改指定路径的权限
                    </span>
                </li>
                <li>
                    fs.<a href="">chown</a><em>(path,uid,gid,fn(err))</em>
                    <span>
                        异步修改指定路径的用户权限
                    </span>
                </li>
                <li>
                    fs.<a href="">chownSync</a><em>(path,uid,gid)</em>
                    <span>
                        同步修改指定路径的用户权限
                    </span>
                </li>
            </ul>
            <h4>[<span>-</span>] 目录操作</h4>
            <ul>
                <li>
                    fs.<a href="">mkdir</a><em>(path,[mode],fn)</em>
                    <span>
                        异步创建目录 <hr>
                        path - 文件路径。 <br>
                        mode - 设置目录权限，默认为 0777。<br>
                        callback - 回调函数，没有参数。
                    </span>
                </li>
                <li>
                    fs.<a href="">mkdirSync</a><em>(path,[mode])</em>
                    <span>
                        同步创建目录
                    </span>
                </li>
                <li>
                    fs.<a href="">readdir</a><em>(path,fn(err,files))</em>
                    <span>
                        异步读取目录 <hr>
                        path - 文件路径。 <br>
                        callback - 回调函数，回调函数带有两个参数err, files，err 为错误信息，files 为 目录下的文件数组列表。
                    </span>
                </li>
                <li>
                    fs.<a href="">readdirSync</a><em>(path)</em>
                    <span>
                        同步读取目录
                    </span>
                </li>
                <li>
                    fs.<a href="">rmdir</a><em>(path,fn)</em>
                    <span>
                        异步删除目录
                    </span>
                </li>
                <li>
                    fs.<a href="">rmdirSync</a><em>(path)</em>
                    <span>
                        同步删除目录
                    </span>
                </li>
            </ul>
        </div>
    </div>
</div>