<div class="u-col">
	<div class="u-block">
		<h3>布局I<span>-</span></h3>
		<div class="u-list">
			<h4>[<span>-</span>] 定位</h4>
			<ul>
				<li><a href="">float</a><span>
					<a href="http://www.zhangxinxu.com/wordpress/?p=583">浮动详解</a> <a href="http://www.imooc.com/view/121">视频版</a>
					<br>【特性】：
					<br>1.浮动内置设置：设置了float的元素则自动转换display为block.只有块级元素具有宽高等特性.
					<br>2.浮动原理1.环绕特性本质，2.脱离文本流特性
					<br>3.与非浮动元素的margin问题：如果浮动并未被闭合处理，下级非浮动元素默认还是以“环绕”浮动元素，其margin会作用在空的区域，此时应在浮动元素上设置margin
					<br>【浮动闭合与BFC】 <a href="http://www.cnblogs.com/dolphinX/p/3508869.html">参考文档</a>
					<br>1.清除浮动解决方案：
					<br>.clearfix:after {content:"\200B"; display:block; height:0; clear:both; }
					<br>.clearfix:after {content:"";display:table;clear:both;}
					<br>.clearfix { *zoom:1; }
					<br><a href="http://www.w3cfuns.com/article-1287-1.html">完整参考资料</a>
					<br>2.BFC条件：
					<br>float为 left|right
					<br>overflow为 hidden|auto|scroll
					<br>display为 table-cell|table-caption|inline-block
					<br>position为 absolute|fixed
					<br>【IE BUG】
					<br>1:IE6 双倍margin BUG
					<br>对块状容器元素设置了float和与float相同方向的margin值就会出现双倍margin
					<br>解决方法：设置BUG元素：display:inline;
					<br>由于当元素float的时候，display样式的值就会自动转换为“block”,无论display先前设置的属性是什么都会失去效果，不会影响块级特性。
					<br>2.IE6下3像素bug：
					<br>当浮动元素与非浮动元素相邻时,会发生3像素间隙,可设置浮动元素_margin-right:-3px;或使非浮动元素浮动.
					<br><a href="http://pewper.blog.163.com/blog/static/2970860820126261195866/">详细参考资料</a>
					<br>中间列自适应布局方案:左右各浮动（层级需要都在不浮动之前！），需要解决3px bug
					<br>3.IE6-7浮动自适应布局
					<br>IE6-7中浮动创建的自适应布局,需要主动给定父级高度，否则绝对定位的元素无法正常定位。
				</span></li>
				<li><a href="">clear</a><span>清除浮动：none,left,right,both
					<br />清除浮动只影响自己，而不影响其他元素；
					<br />对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。
					<br /><a href="http://www.dabaoku.com/jiaocheng/wangye/css/2013040918035.shtml">参考资料1</a>
					<br /><a href="http://www.zhangxinxu.com/wordpress/2014/06/understand-css-clear-left-right-and-use/">参考资料2</a>
					</span></li>
				<li><a href="">position:static</a><span>对象遵循常规流</span></li>
				<li><a href="">position:relative</a><span>
					相对定位：对象遵循常规流，并且参照自身在常规流中的位置通过top，right，bottom，left属性进行偏移时不影响常规流中的任何元素
					<br>1.相对定位不同于margin-left/top,不会改变原先文档流,html后者层级默认仍然比前者高
					<br>2.相对定位可设置z-index改变层级
					</span></li>
				<li><a href="">position:absolute</a><span>绝对定位：<a href="http://www.imooc.com/learn/192">【参考资料】</a>
					<br />特征：
					<br>1.对象脱离常规流,会在正常文档流之上,也可以通过z-index改为负值在正常流之下
					<br>2.使用top，right，bottom，left等属性进行绝对定位，坐标总是以最近的被定位的父级元素为基准,如没有则以window窗口.
					<br>3.盒子的偏移位置不影响常规流中的任何元素，其margin不与其他任何margin折叠。
					<br>4.当元素设置为绝对定位时,则该元素变为inline-block块级.（不再占据100%）
					<br>特殊用法：
					<br>1.(未定义坐标)：绝对定位的元素，在top，right，bottom，left属性未设置时，会紧随在其前面的兄弟元素之后，但在位置上不影响常规流中的任何元素。如无兄弟元素则贴在父元素起点。<b>即绝对定位在不赋值位置属性时，可作为脱离文档流的相对定位。</b>
					<br />无依赖的绝对定位主要通过margin来实现位移.
					<br />可配合text-align+&nbsp；实现一些自动布局。
					<br />关于跟随性,默认会跟在图片的顶端,由于200B baseline对齐会错位,可通过注释或串联来规避
					<br>2.(未知/已知元素尺寸)：垂直/水平/双向居中,可设置绝对定位,并设置top+bottom:0 / left+right:0 / top+left+bottom+right:0,并设置对应方向margin:auto【IE8支持，6-7均不支持】
					<br>3.(已知元素尺寸)：垂直/水平/双向居中,可设置绝对定位,并设置单向距离(left:50% / top:50%),并设置margin-left/top:-尺寸的一半.【IE6支持】
					<br>4.(自适应宽高)：一个绝对定位元素,如未对其宽高进行设置,但对其对向方位值设置时,则认为宽高总是扩展值定位点.可利用作为自适应宽高.【IE8支持，6-7均不支持】
					<br>BUG：
					<br />1.IE6中,父元素区域会管理到内部包含的绝对定位元素范围.
					</span></li>
				<li><a href="">position:fixed</a><span>窗口定位：
					<br>对象脱离常规流，使用top，right，bottom，left等属性以窗口为参考点进行定位，当出现滚动条时，对象不会随着滚动。
					<br>HACK：
					<br>IE6不支持fixed定位，通过CSS表达式解决，<a href="http://www.cnblogs.com/hooray/archive/2011/05/20/2052269.html">完整参考资料</a>
					<br>平板下的fixed有Bug，使用绝对定位代替。
				</span></li>
				<li><a href="">top/bottom/left/right</a><span>配合定位属性进行定位,可为负值.
					<br />垂直居中一个图片
					<br />#container{display:table-cell;text-align:center;vertical-align:middle;}
					</span></li>
				<li><a href="">z-index</a><span>Z轴设定,可以为负值.
					<br>同一个层叠上下文中，层叠级别相同的两个元素，依据它们在HTML文档流中的顺序，写在后面的将会覆盖前面的。 
					<br>不同层叠上下文中，元素的显示顺序依据祖先的层叠级别来决定，与自身的层叠级别无关。 
					<br>在IE浏览器中，定位元素的z-index层级是相对于各自的父级容器，所以会导致z-index出现错误的表现。解决方法是给其父级元素定义z-index，有些情况下还需要定义position:relative。
					<br><a href="http://css.doyoe.com/properties/positioning/z-index.htm">实例参考</a>
				</span></li>
			</ul>
			<h4>[<span>-</span>] Flex</h4>
			<ul>
				<li>flex<a href=""></a>
					<span>
						<a href="http://www.w3cplus.com/css3/a-visual-guide-to-css3-flexbox-properties.html">教程</a> | 
						<a href="http://www.w3cplus.com/css3/a-guide-to-flexbox-new.html">兼容旧版box教程</a>
						<br><a href="http://demo.agektmr.com/flexbox/">在线调试flexbox布局效果</a>
						<br>display:flex/inline-flex;
						<br>注意：
						<br>所有column-*属性在flex容器上都不生效;flex容器上不能使用::first-line和::first-letter伪元素。
						<br>float，clear和vertical-align属性应用在flex项目上将会无效和无法将其out-of-flow。
					</span>
				</li>
				<li>box <a href="">flex-direction</a>
					<span>该属性设置在flex元素上，非flex项目上。
						<br>row：横向从左到右排列（左对齐），默认的排列方式。
						<br>row-reverse：反转横向排列（右对齐，从后往前排，最后一项排在最前面。
						<br>column：纵向排列。
						<br>row-reverse：反转纵向排列，从后往前排，最后一项排在最上面。
						<br>注意：row和row-reverse依赖其写作模式，如果在rtl上下文方式下，他们都将分别被逆转。
					</span>
				</li>
				<li>box <a href="">flex-wrap</a>
					<span>nowrap：flex容器为单行。该情况下flex子项可能会溢出容器
					<br>wrap：flex容器为多行。该情况下flex子项溢出的部分会被放置到新行，子项内部会发生断行
					<br>wrap-reverse：反转 wrap 排列。</span>
				</li>
				<li>box <a href="">flex-flow</a><span>
					这个属性是flex-direction和flex-wrap属性的简写，默认值：row nowrap。
				</span></li>
				<li>box <a href="">justify-content</a><span>
					水平方向项目的分布方式。
				</span></li>
				<li>box <a href="">align-items</a><span>
					垂直方向单行项目的分布方式。
				</span></li>
				<li>box <a href="">align-content</a><span>
					垂直方向多行项目的分布方式。
				</span></li>
				<li>item <a href="">align-self</a><span>指定flex项目自身的对齐方式或者使用align-items来指定单个flex项目。
					<br>auto：如果'align-self'的值为'auto'，则其计算值为元素的父元素的'align-items'值，如果其没有父元素，则计算值为'stretch'。
					<br>flex-start：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴起始边界。
					<br>flex-end：弹性盒子元素的侧轴（纵轴）起始位置的边界紧靠住该行的侧轴结束边界。
					<br>center：弹性盒子元素在该行的侧轴（纵轴）上居中放置。（如果该行的尺寸小于弹性盒子元素的尺寸，则会向两个方向溢出相同的长度）。
					<br>baseline：如弹性盒子元素的行内轴与侧轴为同一条，则该值与'flex-start'等效。其它情况下，该值将参与基线对齐。
					<br>stretch：如果指定侧轴大小的属性值为'auto'，则其值会使项目的边距盒的尺寸尽可能接近所在行的尺寸，但同时会遵照'min/max-width/height'属性的限制。
				</span></li>
				<li>item <a href="">order</a>
					<span>用整数值来定义排列顺序，数值小的排在前面。可以为负值，默认值0。</span>
				</li>
				<li>item <a href="">flex-grow</a>
					<span>剩余空间的扩展比例,默认值0。
					<br>flex-grow的默认值为0，如果没有显示定义该属性，是不会拥有分配剩余空间权利的。</span>
				</li>
				<li>item <a href="">flex-shrink</a>
					<span>剩余空间的收缩比例,默认1。
					<br>默认情况之下，所有flex项目都可以收缩，但如果将它们设置为0时，他们不会缩小会保持原来的大小。</span>
				</li>
				<li>item <a href="">flex-basis</a>
					<span>如果所有子元素的基准值之和大于剩余空间，则会根据每项设置的基准值，按比率伸缩剩余空间</span>
				</li>
				<li>item <a href="">flex</a>
					<span>
						这个属性是flex-grow、flex-shrink和flex-basis属性的简写。
						<br>none：none关键字的计算值为: 0 0 auto
					</span>
				</li>
			</ul>
			<h4>[<span>-</span>] Grid</h4>
			<ul>
				<li>grid<a href=""></a>
					<span>
					<a href="https://css-tricks.com/snippets/css/complete-guide-grid/">教程</a>
					<br>display: grid | inline-grid | subgrid;
					<br>注意：
					<br>grid盒子上column,float,clear,vertical-align都没有效果。
					</span>
				</li>
				<li>box <a href="">grid-template-columns</a>
					<span>grid-template-columns: [first] 40px [line2] 50px [line3] auto [col4-start] 50px [five] 40px [end];
					<br>grid-template-columns: repeat(3, 20px [col-start]) 5%;
					<br>grid-template-columns: 1fr 1fr 1fr;
					</span>
				</li>
				<li>box <a href="">grid-template-rows</a>
					<span>grid-template-rows: [row1-start] 25% [row1-end] 100px [third-line] auto [last-line];</span>
				</li>
				<li>box <a href="">grid-template-areas</a>
					<span>
						grid-template-areas: "&lt;grid-area-name&gt; | . | none | ..."
                       <br>"..."
					</span>
				</li>
				<li>box <a href="">grid-column-gap</a>
					<span>grid-column-gap: 10px;</span>
				</li>
				<li>box <a href="">grid-row-gap</a>
					<span>grid-row-gap: 15px;</span>
				</li>
				<li>box <a href="">grid-gap</a>
					<span>grid-gap: &lt;grid-column-gap&gt; &lt;grid-row-gap&gt;;</span>
				</li>
				<li>box <a href="">justify-items</a>
					<span>水平方向网格内容的对齐方式。
					<br>justify-items: start | end | center | stretch;</span>
				</li>
				<li>box <a href="">align-items</a>
					<span>垂直方向网格内容的对齐方式。
					<br>align-items: start | end | center | stretch;</span>
				</li>
				<li>box <a href="">justify-content</a>
					<span>水平方向网格的分布方式。
					<br>justify-content: start | end | center | stretch | space-around | space-between | space-evenly;</span>
				</li>
				<li>box <a href="">align-content</a>
					<span>垂直方向网格的分布方式。
					<br>align-content: start | end | center | stretch | space-around | space-between | space-evenly;</span>
				</li>
				<li>box <a href="">grid-auto-columns</a>
					<span>定义隐式自动创建的网格大小
					<br>grid-template-columns: 60px 60px;</span>
				</li>
				<li>box <a href="">grid-auto-rows</a>
					<span>定义隐式自动创建的网格大小
					<br>grid-template-rows: 90px 90px</span>
				</li>
				<li>box <a href="">grid-auto-flow</a>
					<span>定义隐式自动创建的网格大小
					<br>grid-auto-flow: row | column | row dense | column dense</span>
				</li>
				<li>box <a href="">grid</a>
					<span>
					<pre><code data-language="css">
					grid: 200px auto / 1fr auto 1fr;

                    grid-template-rows: 200px auto;
                    grid-template-columns: 1fr auto 1fr;
                    grid-template-areas: none;
                    </code></pre>
					</span>
				</li>
				<li>item <a href="">grid-column-start</a>
					<span></span>
				</li>
				<li>item <a href="">grid-column-end</a>
					<span></span>
				</li>
				<li>item <a href="">grid-row-start</a>
					<span></span>
				</li>
				<li>item <a href="">grid-row-end</a>
					<span></span>
				</li>
				<li>item <a href="">grid-column</a>
					<span></span>
				</li>
				<li>item <a href="">grid-row</a>
					<span></span>
				</li>
				<li>item <a href="">grid-area</a>
					<span></span>
				</li>
				<li>item <a href="">justify-self</a>
					<span></span>
				</li>
				<li>item <a href="">align-self</a>
					<span></span>
				</li>
			</ul>
			<h4>[<span>-</span>] 多列</h4>
			<ul>
				<li><a href="">columns</a>(Npx [M])
						<span>多列,简写时注意加<strong>s</strong>,简写中只含宽度(带单位,不能百分比)和列数.Chrome需要前缀-webkit-
						<br>应用于除table外的非替换块级元素，display:table-cell 元素, 内联块元素。
						<br>实现多列的是里面的内容,而非自身.
						<br>简写方式一：设置width,column:200px 3（固定3列200宽。）
						<br>简写方式二：column:200px （自动根据父级宽度生成X列）
						<br>同时指定2个值时，优先先按列数来分配宽.例如浏览器宽度1800px,指定3列200px宽,结果为分配为3列600px宽,忽略200宽指定值;如果指定宽度200px,未指定列数,则按宽度自动平分为9列
						<br>参考资料：<a href="http://wenku.baidu.com/view/76a20b60011ca300a6c3909d.html">替换/非替换块级/内联元素</a></span></li>
				<li><a href="">column-width</a>(Npx)<span>列宽</span></li>
				<li><a href="">column-count</a>(N)<span>列数</span></li>
				<li><a href="">column-gap</a>(Npx)<span>列间隔</span></li>
				<li><a href="">column-rule</a>(1px solid #ccc)<span>列间隔边框 1px solid #ccc <br>column-rule-style等同于border样式</span></li>
				<li><a href="">column-span</a>(N/all)<span>列横跨,适用于：除浮动和绝对定位之外的块级元素
						<br>是否横跨全部,all和none,不可设置数值非表格,此属性应设置在被应用多列属性的子元素上,多列无继承性,对于不想被继承多列的元素应写在多列父元素之外,而非去设置多列横跨.</span></li>
			</ul>
			<h4>[<span>+</span>] Box</h4>
			<ul style="display:none">
				<li><a href="">display:-webkit-box</a><span>旧手机浏览器<br><a href="http://www.w3cplus.com/css3/css3-flexbox-cheat-sheet.html">兼容处理</a></span></li>
				<li><a href="">-webkit-box-orient</a><span>设置或检索伸缩盒对象的子元素的排列方式。
					<br>horizontal：设置伸缩盒对象的子元素从左到右水平排列
					<br>vertical：设置伸缩盒对象的子元素从上到下纵向排列
					<br>inline-axis：设置伸缩盒对象的子元素沿行轴排列
					<br>block-axis：设置伸缩盒对象的子元素沿块轴排列
				</span></li>
				<li><a href="">-webkit-box-pack</a><span>设置或检索伸缩盒对象的子元素的对齐方式。
					<br>start：设置伸缩盒对象的子元素从开始位置对齐（大部分情况等同于左对齐，受）
					<br>center：设置伸缩盒对象的子元素居中对齐
					<br>end：设置伸缩盒对象的子元素从结束位置对齐（大部分情况等同于右对齐）
					<br>justify：设置或伸缩盒对象的子元素两端对齐</span></li>
				<li><a href="">-webkit-box-align</a><span>设置或检索伸缩盒对象的子元素的对齐方式。
					<br>start：设置伸缩盒对象的子元素从开始位置对齐
					<br>center：设置伸缩盒对象的子元素居中对齐
					<br>end：设置伸缩盒对象的子元素从结束位置对齐
					<br>baseline：设置伸缩盒对象的子元素基线对齐
					<br>stretch：设置伸缩盒对象的子元素自适应父元素尺寸</span></li>
				<li><a href="">-webkit-box-flex</a><span>使用浮点数指定对象所分配其父元素剩余空间的比例。
				</span></li>
				<li><a href="">-webkit-box-flex-group</a><span>用整数值来定义伸缩盒对象的子元素所在的组。</span></li>
				<li><a href="">-webkit-box-ordinal-group</a><span>用整数值来定义伸缩盒对象的子元素显示顺序。</span></li>
				<li><a href="">-webkit-box-direction</a><span>设置或检索伸缩盒对象的子元素的排列顺序是否反转。normal | reverse</span></li>
				<li><a href="">-webkit-box-lines</a><span>设置或检索伸缩盒对象的子元素是否可以换行显示。single | multiple</span></li>
			</ul>
			<h4>[<span>+</span>] 方案</h4>
			<ul style="display:none">
				<li><a href="">水平居中</a><span>
					1.自动margin(固定尺寸, .x(auto) )
					<br>只适用于水平切为块级元素,margin:0 auto;
					<br>2.text-align:center( 适用于inline/inline-block, .x )
					<br>现代浏览器只对inline/inline-block元素有效,且非绝对定位.IE6-7可对block元素有效(需指定尺寸)
					<br>3.绝对定位( 已知元素尺寸,ct(x,@width) )
					<br>设置绝对定位,left:50%,并设置margin-left:-尺寸的一半
					<br>4.绝对定位( 未知元素尺寸,.ct(x) )
					<br>设置绝对定位,并设置left:0;right:0;margin-left:auto;margin-right:auto; 【IE6不支持】
					<br>5.自动margin(伸缩尺寸,margin:x)
					<br>设置margin:value 对边相等margin值,对盒子宽高未设置则自动扩展宽高
				</span></li>
				<li><a href="">垂直居中</a><span>
					1.绝对定位( 已知元素尺寸,ct(y,@height) )
					<br>设置绝对定位,top:50%,并设置margin-top:-尺寸的一半
					<br>2.绝对定位( 未知元素尺寸,.ct(y) )
					<br>设置绝对定位,并设置top:0;bottom:0;margin-top:auto;margin-top:auto; 【IE6不支持】
					<br>3.table-cell
					<br>设置display:table-cell;vertical-align:middle;（子元素为inline或inline-block） 【IE6不支持】
					<br />4.display:-webkit-box;-webkit-box-align:center;(手机端<a href="http://css.doyoe.com/properties/flexible-box/box-align.htm"></a>)
				</span></li>
				<li><a href="">中央居中</a><span>
					1.绝对定位( 已知元素尺寸,ct(o,@width,@height) )
					<br>设置绝对定位,top:50%,left:50%,并设置margin-top:-尺寸的一半,margin-left:-尺寸的一半
					<br>2.绝对定位( 未知元素尺寸,.ct )
					<br>设置绝对定位,并设置top:0;bottom:0;left:0;right:0;margin:auto; 【IE6不支持】
					<br>3.自动margin(伸缩尺寸,margin:x)
					<br>设置margin:value 对边相等margin值,对盒子宽高未设置则自动扩展宽高
				</span></li>
				<li><a href="">尺寸兼容</a><span>
					1.hasLayout概念,ie6的自动管理,如不设置overflow总是自动扩展
					<br />2.当元素设置百分比宽高时,自动继承父级,宽度由于block默认占比100%,即总是不会缺失,但若父级高度自适应,则IE6会继续向上级继承,而现代浏览器则继承当前父级内容实际产生的高度.
					<br />3.IE6的1像素BUG,尽量设置尺寸为偶数或不设置<a href="http://www.yuzi.me/Share/ie6qishubug.html">参考资料</a>
					<br />4.IE6-7对百分比小数值例如33.33%解析不正确,因修正为*width:32%
				</span></li>
				<li><a href="">% + border</a><span>百分比尺寸下border的处理
					<br />1.margin:-2px（hover处理则增加双倍）
					<br />2.box-sizing
					<br />3.calc函数 ~"calc(100% - 50px)"
					<br />4.table布局,width=100%-50(无单位)
				</span></li>
				<li><a href="">自适应宽度</a><span>自适应宽度
					<br />1.margin:x val,由于默认block宽度占满100%,设置margin即占满剩余宽度【如side float则需要清除3px bug,可选择绝对定位】
					<br />2.绝对定位,不设置宽高,left:x起始点,right:x结束点.margin:auto.【IE6不兼容】如为相对浏览器窗口可表达式计算
					<br />3.calc函数 ~"calc(100% - 50px)"
					<br />4.table-cell,根据内容扩展,占满剩余父级空间
					<br />5.改table布局,使用width=100%-50(无单位)
				</span></li>
				<li><a href="">自适应高度</a><span>自适应高度
					<br />1.绝对定位,不设置宽高,top:x起始点,bottom:x结束点.margin:auto.【IE6不兼容】如为相对浏览器窗口可表达式计算
					<br />2.calc函数 ~"calc(100% - 50px)"
					<br />3.改table布局,使用height=100%-50(无单位)
				</span></li>
				<li><a href="">水平布局</a><span>水平布局方案
					<br />1.float
					<br />2.inline-block,需设置vertical-align:top,去除inline-block的200B空格.【IE6中要使不断行还必须指定父级高度！】
					<br />3.table-cell(总是等高最高的)【IE6不支持】
					<hr />
					<br />float:错乱,换行不低于上行最高值,不等高
					<br />inline-block:不会错乱,新行整齐,不等高
					<br />table-cell:不会错乱,同行元素必定等高
				</span></li>
			</ul>
		</div>
	</div>
</div>