{"version":1582593954133,"name":"data","data":[{"column":[{"title":"Sequelize","barcolor":"","fold":false,"box":[{"title":"Connect","fold":false,"list":[{"prefix":"","tag":"new Sequelize","suffix":"(config)","desc":"创建数据库连接实例\n`const sequelize = new Sequelize(\"sqlite::memory:\");`","url":"","summary":"```javascript\nconst sequelize = new Sequelize(database, username, password, {\n    host: host,\n    dialect: \"mysql\",\n    pool: {\n        max: 5,\n        min: 0,\n        idle: 30000,\n        acquire: 20000,\n    },\n    logging: true,\n    timezone: \"+08:00\",\n    define: {\n        timestamps: true,\n        createdAt: true,\n        updatedAt: true,\n        underscored: true\n    },\n    query: {\n        raw: true,\n    },\n});\n\nsequelize\n    .authenticate()\n    .then(() => {\n        console.log(\"Connection has been established successfully.\");\n    })\n    .catch(err => {\n        console.error(\"Unable to connect to the database:\", err);\n    });\n\n// 一次性同步全部模型\n// sequelize.sync();\n```","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getting-started.md","dot":""},{"prefix":"sequelize","tag":".sync()","suffix":"","desc":"一次性同步全部模型","url":"","summary":"","reference":"","dot":""}]},{"title":"Model","fold":false,"list":[{"prefix":"","tag":"$Model","suffix":".init({})","desc":"初始化 模型类\n```\nclass User extends Model {}\nUser.init({\n  // 在这里定义模型属性\n  key: {\n    type: DataTypes.STRING,\n    ..\n  },\n}, {\n  // 这是其他模型参数\n  sequelize, // 我们需要传递连接实例\n  modelName: 'User' // 我们需要选择模型名称\n  tableName : \"tablename\", //表名\n});\n```","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-basics.md","dot":""},{"prefix":"$Model","tag":".sync()","suffix":"","desc":"同步模型，仅读实例时可无","url":"","summary":"```\nconst { Sequelize, DataTypes, Model } = require('sequelize');\nconst sequelize = new Sequelize('sqlite::memory');\n\nclass User extends Model {}\nUser.init({\n  // 在这里定义模型属性\n  col: {\n    type: DataTypes.STRING,\n    allowNull: false\n  },\n}, {\n  // 这是其他模型参数\n  sequelize, // 我们需要传递连接实例\n  modelName: 'User' // 我们需要选择模型名称\n  tableName : \"tablename\", //表名\n  createdAt: \"user_registered\", //timestamp列名重定义\n});\n\n//同步模型，仅读实例时可无\nUser.sync()\n```","reference":"","dot":""},{"prefix":"","tag":"DataTypes","suffix":".TYPE","desc":"# 数据类型\n+ `STRING` 字符串\n+ `TEXT` 长文\n+ `INTEGER` 整数  \n+ `BIGINT(11)` 大整数\n+ `DATE` 日期时间","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-basics.md","dot":""},{"prefix":"","tag":"key","suffix":".$prop","desc":"# 列参数\n+ `type`: DataTypes.BOOLEAN 数据类型\n+ `primaryKey`: true 主键\n+ `autoIncrement`: true 自增\n+ `allowNull`: false 非空\n+ `defaultValue`: DataTypes.NOW 默认值\n+ `unique`: true 唯一\n+ unique: 'group' 组合唯一\nuniqueOne: { type: DataTypes.STRING,  unique: 'compositeIndex' },\nuniqueTwo: { type: DataTypes.INTEGER, unique: 'compositeIndex' },\n","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-basics.md","dot":""},{"prefix":"key.","tag":"get|set()","suffix":"","desc":"+ getter `get(){this.getDataValue('col')}`\n+ setter `set(val){this.setDataValue('col', hash(val))}`\n+ 虚拟列 `DataTypes.VIRTUAL`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/getters-setters-virtuals.md","dot":""},{"prefix":"key.","tag":"validate","suffix":"","desc":"验证\n```\nkey: {\n    type: DataTypes.STRING,\n    validate : {\n        is: /^[a-z]+$/i,          // 匹配这个 RegExp\n        isInt: {\n            msg: \"必须是价格的整数\"\n        },\n        isIn: {\n            args: [['en', 'zh']],\n            msg: \"必须为英文或中文\"\n        },\n        isEven(value) {  //自定义规则\n            if (parseInt(value) % 2 !== 0) {\n                throw new Error('Only even values are allowed!');\n            }\n        }\n    }\n}\n```","url":"","summary":"is: /^[a-z]+$/i,          // 匹配这个 RegExp\nis: [\"^[a-z]+$\",'i'],     // 与上面相同,但是以字符串构造 RegExp\nnot: /^[a-z]+$/i,         // 不匹配 RegExp\nnot: [\"^[a-z]+$\",'i'],    // 与上面相同,但是以字符串构造 RegExp\nisEmail: true,            // 检查 email 格式 (foo@bar.com)\nisUrl: true,              // 检查 url 格式 (http://foo.com)\nisIP: true,               // 检查 IPv4 (129.89.23.1) 或 IPv6 格式\nisIPv4: true,             // 检查 IPv4 格式 (129.89.23.1)\nisIPv6: true,             // 检查 IPv6 格式\nisAlpha: true,            // 只允许字母\nisAlphanumeric: true,     // 将仅允许使用字母数字,因此 '_abc' 将失败\nisNumeric: true,          // 只允许数字\nisInt: true,              // 检查有效的整数\nisFloat: true,            // 检查有效的浮点数\nisDecimal: true,          // 检查任何数字\nisLowercase: true,        // 检查小写\nisUppercase: true,        // 检查大写\nnotNull: true,            // 不允许为空\nisNull: true,             // 只允许为空\nnotEmpty: true,           // 不允许空字符串\nequals: 'specific value', // 仅允许 'specific value'\ncontains: 'foo',          // 强制特定子字符串\nnotIn: [['foo', 'bar']],  // 检查值不是这些之一\nisIn: [['foo', 'bar']],   // 检查值是其中之一\nnotContains: 'bar',       // 不允许特定的子字符串\nlen: [2,10],              // 仅允许长度在2到10之间的值\nisUUID: 4,                // 只允许 uuid\nisDate: true,             // 只允许日期字符串\nisAfter: \"2011-11-05\",    // 仅允许特定日期之后的日期字符串\nisBefore: \"2011-11-05\",   // 仅允许特定日期之前的日期字符串\nmax: 23,                  // 仅允许值 <= 23\nmin: 23,                  // 仅允许值 >= 23\nisCreditCard: true,       // 检查有效的信用卡号","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/validations-and-constraints.md","dot":""}]},{"title":"Reacord","fold":false,"list":[{"prefix":"record","tag":".toJSON()","suffix":"","desc":"输出object","url":"","summary":"查看结果 `record.dataValues` 或在dao层中then返回`return res.dataValues`","reference":"","dot":""},{"prefix":"record","tag":".save()","suffix":"","desc":"`await ins.save()`","url":"","summary":"","reference":"","dot":""}]},{"title":"Create","fold":false,"list":[{"prefix":"$Model","tag":".create","suffix":"(obj)","desc":"添加实例 `const record = await User.create({ name: \"Jane\" });`\n","url":"","summary":"# 查看实例条目尽量使用过滤\n`$model_ins.toJSON()`\n\n# 同步手动方法\n```\nconst jane = User.build({ name: \"Jane\" });\n//do some edit\nawait jane.save();\n```","reference":"","dot":""},{"prefix":"$Model","tag":".bulkCreate","suffix":"([obj,..])","desc":"批量创建\nfields 参数指定批量创建时使用的字段，其余字段将被忽略.\n```\nawait User.bulkCreate([\n  { username: 'foo' },\n  { username: 'bar', admin: true }\n], { fields: ['username'] });\n// foo 和 bar 都不会是管理员.\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"Delete","fold":false,"list":[{"prefix":"record","tag":".destroy()","suffix":"","desc":"删除实例 `await jane.destroy();`","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".destroy","suffix":"(opt)","desc":"```\n// 删除所有名为 \"Jane\" 的人 \nawait User.destroy({\n  where: {\n    firstName: \"Jane\"\n  }\n});\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".restore","suffix":"(opt)","desc":"# 模型设置\n`paranoid: true`\n# 删除操作\n软删除 `await $Model.destroy(opt)`\n硬删除 `await $Model.destroy({opt,force: true})`\n# 恢复\n`await $Model.restore(opt)`\n# 查询\n`await $Model.findAll({opt,paranoid: false})`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/paranoid.md","dot":""}]},{"title":"Update","fold":false,"list":[{"prefix":"record","tag":".reload()","suffix":"","desc":"重载实例 `await jane.reload();`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-instances.md","dot":""},{"prefix":"record","tag":".increment","suffix":"(key)","desc":"递减 `decrement` \n递增1 `await user.increment('age')`\n递增2 `await user.increment('age', { by: 2 })`\n多个列递增\n```\nawait jane.increment({\n  'age': 2,\n  'cash': 100\n});\n```\n多个列相同递增 `await jane.increment(['age', 'cash'], { by: 2 });`","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-instances.md","dot":""},{"prefix":"$Model","tag":".update","suffix":"(keys,opt)","desc":"```\n// 将所有没有姓氏的人更改为 \"Doe\"\nawait User.update({ lastName: \"Doe\" }, {\n  where: {\n    lastName: null\n  }\n});\n```","url":"","summary":"","reference":"","dot":"","title":"Storage"}]},{"title":"Read","fold":false,"list":[{"prefix":"$Model","tag":".findAll","suffix":"(opt)","desc":"无参数代表整张表\n`attributes: ['foo', ['bar', 'baz'], 'qux']` 过滤显示的字段","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md","dot":""},{"prefix":"$Model","tag":".findByPk","suffix":"(id)","desc":"使用提供的主键从表中仅获得一个条目\n`const project = await Project.findByPk(123)`","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".findOrCreate","suffix":"(opt)","desc":"除非找到一个满足查询参数的结果否则创建\n```\nconst [user, created] = await User.findOrCreate({\n  where: { username: 'sdepold' },\n  defaults: {\n    job: 'Technical Lead JavaScript'\n  }\n});\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".findOne","suffix":"(opt)","desc":"找到的第一个条目\n`const project = await Project.findOne({ where: { title: 'My Title' } })`","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".findAndCountAll","suffix":"(opt)","desc":"findAndCountAll 方法返回一个具有两个属性的对象：\ncount - 一个整数 - 符合查询条件的记录总数\nrows - 一个数组对象 - 获得的记录\n```\nconst { count, rows } = await Project.findAndCountAll({\n  where: {\n    title: {\n      [Op.like]: 'foo%'\n    }\n  },\n  offset: 10,\n  limit: 2\n});\n```","url":"","summary":"findAndCountAll 方法是结合了 findAll 和 count 的便捷方法. 在处理与分页有关的查询时非常有用,在分页中,你想检索带有 limit 和 offset 的数据,但又需要知道与查询匹配的记录总数.\n\n","reference":"","dot":""},{"prefix":"$Model","tag":".count","suffix":"(opt)","desc":"```\nProject.count({ where: {'id': {[Op.gt]: 25}} }).then(c => {\n  console.log(\"There are \" + c + \" projects with an id greater than 25.\")\n})\n```","url":"https://sequelize.org/v5/manual/models-usage.html#-code-count--code----count-the-occurrences-of-elements-in-the-database","summary":"","reference":"","dot":""}]},{"title":"Condition(opt)","fold":false,"list":[{"prefix":"SELECT ","tag":"attributes","suffix":"[key,..]","desc":"指定列 或 SELECT *\n指定列 `attributes: ['foo', 'bar']`\n排除列 `attributes: { exclude: ['baz'] }`","url":"","summary":"","reference":"","dot":""},{"prefix":"WHERE ","tag":"where","suffix":"{key:val}","desc":"列匹配过滤 SELECT * FROM table WHERE x=val\n# AND\n```\nwhere: {\n    key1: val1,\n    key2: [1,2,3], //隐式调用IN\n    key3 : {\n        [Op.eq] : 3\n    }\n}\n```\n\n# OR\n```\nwhere: {\n    [Op.or]: [\n      { authorId: 12 },\n      { authorId: 13 }\n    ]\n}\n```","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md","dot":""},{"prefix":"ORDER BY ","tag":"order","suffix":"[[key,fn]..]","desc":"排序,默认ASC升序（升序时可不用2维数组指定），可用值：NULLS FIRST\n```\nSubtask.findAll({\n  order: [\n    // 将转义 title 并针对有效方向列表进行降序排列\n    ['title', 'DESC'],\n\n    // 将按最大年龄进行降序排序\n    [sequelize.fn('max', sequelize.col('age')), 'DESC'],\n  ]\n})\n\n```","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/model-querying-basics.md","dot":""},{"prefix":"","tag":"limit","suffix":"","desc":"限制（分页）\n```\n// 提取10个实例/行\nProject.findAll({ limit: 10 });\n```","url":"","summary":"```\nlet {count,rows} =  await Post.findAndCountAll({\n            where: condition,\n            order: order,\n            offset: per * (page - 1),\n            limit: Math.min(parseInt(per),20)   //最大不超过20\n        })\n        let result = {\n            total : count,\n            per : per,\n            pages : Math.ceil(count / per),\n            page : page,\n            list : []\n        }\n```","reference":"","dot":""},{"prefix":"","tag":"offset","suffix":"","desc":"```\n// 跳过8个实例/行\nProject.findAll({ offset: 8 });\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"Op","suffix":"","desc":"# 逻辑运算\n`[Op.and]` AND且\n`[Op.or]` OR或\n# 相等运算\n`[Op.eq]`: 3,                              // = 3\n`[Op.ne]`: 20,                             // != 20\n`[Op.is]`: null,                           // IS NULL\n`[Op.not]`: true,                          // IS NOT TRUE\n`[Op.or]`: [5, 6],                         // (someAttribute = 5) OR (someAttribute = 6)\n# 数字比较\n`[Op.gt]`: 6,                              // > 6\n`[Op.gte]`: 6,                             // >= 6\n`[Op.lt]`: 10,                             // < 10\n`[Op.lte]`: 10,                            // <= 10\n`[Op.between]`: [6, 10],                   // BETWEEN 6 AND 10\n`[Op.notBetween]`: [11, 15],               // NOT BETWEEN 11 AND 15\n# 可选匹配\n`[Op.in]`: [1, 2],                         // IN [1, 2]\n`[Op.notIn]`: [1, 2],                      // NOT IN [1, 2]\n`[Op.startsWith]`: 'hat',                  // LIKE 'hat%' 开头\n`[Op.endsWith]`: 'hat',                    // LIKE '%hat' 结尾\n`[Op.substring]`: 'hat',                   // LIKE '%hat%' 包含\n`[Op.regexp]`: '^[h|a|t]',                 // REGEXP/~ '^[h|a|t]' (仅 MySQL/PG)\n`[Op.notRegexp]`: '^[h|a|t]',              // NOT REGEXP/!~ '^[h|a|t]' (仅 MySQL/PG)","url":"","summary":"","reference":"参考资料|https://blog.csdn.net/longshenlmj/article/details/19079221","dot":""}]},{"title":"Misc","fold":false,"list":[{"prefix":"$Model","tag":".count","suffix":"(opt)","desc":"计算数据库中元素出现的次数\n```\nconst amount = await Project.count({\n  where: {\n    id: {\n      [Op.gt]: 25\n    }\n  }\n});\nconsole.log(`这有 ${amount} 个项目 id 大于 25`);\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"$Model","tag":".max|min|sum","suffix":"(opt)","desc":"```\nawait User.max('age'); // 40\nawait User.max('age', { where: { age: { [Op.lt]: 20 } } }); // 10\nawait User.min('age'); // 5\nawait User.min('age', { where: { age: { [Op.gt]: 5 } } }); // 10\nawait User.sum('age'); // 55\nawait User.sum('age', { where: { age: { [Op.gt]: 5 } } }); // 50\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"sequelize","tag":".query","suffix":"(str)","desc":"原始查询，返回两个参数 - 一个结果数组,以及一个包含元数据\n`const [results, metadata] = await sequelize.query(\"UPDATE users SET y = 42 WHERE x = 12\");`\n","url":"","summary":"","reference":"参考资料|https://github.com/demopark/sequelize-docs-Zh-CN/blob/master/core-concepts/raw-queries.md","dot":"","title":"Elasticsearch"}]}]}]},{"column":[{"title":"Storage","barcolor":"","fold":false,"box":[{"title":"基础","fold":false,"list":[{"prefix":"","tag":"sessionStorage","suffix":"","desc":"保存的数据用于浏览器的一次会话（session），当会话结束（通常是窗口关闭），数据被清空；","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"localStorage","suffix":"","desc":"保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"storage","suffix":"","desc":"Storage 接口储存的数据发生变化时，会触发 storage 事件","url":"","summary":"+ StorageEvent.key：字符串，表示发生变动的键名。如果 storage 事件是由clear()方法引起，该属性返回null。\n+ StorageEvent.newValue：字符串，表示新的键值。如果 storage 事件是由clear()方法或删除该键值对引发的，该属性返回null。\n+ StorageEvent.oldValue：字符串，表示旧的键值。如果该键值对是新增的，该属性返回null。\n+ StorageEvent.storageArea：对象，返回键值对所在的整个对象。也说是说，可以从这个属性上面拿到当前域名储存的所有键值对。\n+ StorageEvent.url：字符串，表示原始触发 storage 事件的那个网页的网址。\n\n注意，该事件有一个很特别的地方，就是它不在导致数据变化的当前页面触发，而是在同一个域名的其他窗口触发。也就是说，如果浏览器只打开一个窗口，可能观察不到这个事件。比如同时打开多个窗口，当其中的一个窗口导致储存的数据发生改变时，只有在其他窗口才能观察到监听函数的执行。可以通过这种机制，实现多个窗口之间的通信。","reference":"","dot":""}]},{"title":"CURD","fold":false,"list":[{"prefix":"storage","tag":".setItem","suffix":"(key,val)","desc":"+ 存入数据\n+ 如果键名已经存在，该方法会更新已有的键值；\n+ 如果储存空间已满，该方法会抛错。\n+ 返回值：无\n**两个参数都是字符串。如果不是字符串，会自动转成字符串，再存入浏览器。对象需预先自行转json**\n","url":"","summary":"","reference":"","dot":""},{"prefix":"storage","tag":".getItem","suffix":"(key)","desc":"+ 获取数据\n+ 如果键名不存在，该方法返回null。","url":"","summary":"","reference":"","dot":""},{"prefix":"storage","tag":".removeItem","suffix":"(key)","desc":"+ 删除数据\n+ 如果键名不存在，该方法不会做任何事情。","url":"","summary":"","reference":"","dot":""},{"prefix":"storage","tag":".clear()","suffix":"","desc":"+ 清除所有保存的数据。\n+ 该方法的返回值是undefined。","url":"","summary":"","reference":"","dot":""}]},{"title":"遍历","fold":false,"list":[{"prefix":"storage","tag":".key","suffix":"(i)","desc":"接受一个整数作为参数（从零开始），返回该位置对应的键值\n结合使用Storage.length属性和Storage.key()方法，可以遍历所有的键。","url":"","summary":"","reference":"","dot":""},{"prefix":"storage","tag":".length","suffix":"","desc":"返回保存的数据项个数","url":"","summary":"```\nfor (var i = 0; i < window.localStorage.length; i++) {\n  console.log(localStorage.key(i));\n}\n```","reference":"","dot":""}]}]},{"title":"IndexedDB","barcolor":"","fold":false,"box":[{"title":"数据库","fold":false,"list":[{"prefix":"idb = ","tag":"indexedDB.open","suffix":"(dbname,version)","desc":"返回一个 IDBRequest 对象\n`var request = window.indexedDB.open(databaseName, version);`\n不存在时新建,新建时版本号为1\n每个域名（严格的说，是协议 + 域名 + 端口）都可以新建任意多个数据库。","url":"","summary":"","reference":"参考资料|https://wangdoc.com/javascript/bom/indexeddb.html","dot":""},{"prefix":"idb.on","tag":"error","suffix":"","desc":"表示打开数据库失败\n```\nrequest.onerror = function (event) {\n  console.log('数据库打开报错');\n};\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"idb.on","tag":"success","suffix":"","desc":"成功打开数据库\n```\nvar db;\n\nrequest.onsuccess = function (event) {\n  db = request.result;\n  console.log('数据库打开成功');\n};\n```\n通过request对象的result属性拿到数据库对象。","url":"","summary":"","reference":"","dot":""},{"prefix":"idb.on","tag":"upgradeneeded","suffix":"","desc":"更新数据库（新建数据库，后续操作应在此方法内执行。）\n```\nvar db;\n\nrequest.onupgradeneeded = function (event) {\n  db = event.target.result;\n}\n```\n如果指定的版本号，大于数据库的实际版本号，就会发生数据库升级事件upgradeneeded。\n新建数据库与打开数据库是同一个操作。如果指定的数据库不存在，就会新建。不同之处在于，后续的操作主要在upgradeneeded事件的监听函数里面完成，因为这时版本从无到有，所以会触发这个事件。","url":"","summary":"","reference":"","dot":""},{"prefix":"idb.on","tag":"blocked","suffix":"","desc":"上一次的数据库连接还未关闭","url":"","summary":"","reference":"","dot":""},{"prefix":"db = ","tag":"result","suffix":"","desc":"指代数据库\n新建/升级：`db = event.target.result;`\n链接：`db = request.result;`","url":"","summary":"","reference":"","dot":""}]},{"title":"数据表-对象仓库","fold":false,"list":[{"prefix":"db","tag":".createObjectStore","suffix":"(tabel,opt)","desc":"新建对象仓库（即新建表）,通过keyPath设置主键\n```\nrequest.onupgradeneeded = function (event) {\n  db = event.target.result;\n  var objectStore;\n  if (!db.objectStoreNames.contains('person')) {\n    objectStore = db.createObjectStore('person', { keyPath: 'id' });\n  }\n}\n```","url":"","summary":"如果数据记录里面没有合适作为主键的属性，那么可以让 IndexedDB 自动生成主键。\n```\nvar objectStore = db.createObjectStore(\n  'person',\n  { autoIncrement: true }\n);\n```","reference":"","dot":""}]},{"title":"索引","fold":false,"list":[{"prefix":"table","tag":".createIndex ","suffix":"(key,val,opt)","desc":"新建索引:索引名称、索引所在的属性、配置对象（说明该属性是否包含重复的值）\n```\nrequest.onupgradeneeded = function(event) {\n  db = event.target.result;\n  var objectStore = db.createObjectStore('person', { keyPath: 'id' });\n  objectStore.createIndex('name', 'name', { unique: false });\n  objectStore.createIndex('email', 'email', { unique: true });\n}\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"index = ","tag":"table.index","suffix":"('name')","desc":"使用索引查找数据\n```\nvar transaction = db.transaction(['person'], 'readonly');\nvar store = transaction.objectStore('person');\nvar index = store.index('name');\nvar request = index.get('李四');\n\nrequest.onsuccess = function (e) {\n  var result = e.target.result;\n  if (result) {\n    // ...\n  } else {\n    // ...\n  }\n}\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"数据行-CURD","fold":false,"list":[{"prefix":"t_table","tag":".add","suffix":"(obj)","desc":"新增数据\n```\nfunction add() {\n  var request = db.transaction(['person'], 'readwrite')\n    .objectStore('person')\n    .add({ id: 1, name: '张三', age: 24, email: 'zhangsan@example.com' });\n\n  request.onsuccess = function (event) {\n    console.log('数据写入成功');\n  };\n\n  request.onerror = function (event) {\n    console.log('数据写入失败');\n  }\n}\n\nadd();\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"t_table|index","tag":".get","suffix":"(pkv)","desc":"读取数据(参数是主键的值)\n```\nfunction read() {\n   var transaction = db.transaction(['person']);\n   var objectStore = transaction.objectStore('person');\n   var request = objectStore.get(1);\n\n   request.onerror = function(event) {\n     console.log('事务失败');\n   };\n\n   request.onsuccess = function( event) {\n      if (request.result) {\n        console.log('Name: ' + request.result.name);\n        console.log('Age: ' + request.result.age);\n        console.log('Email: ' + request.result.email);\n      } else {\n        console.log('未获得数据记录');\n      }\n   };\n}\n\nread();\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"t_table","tag":".put","suffix":"(obj)","desc":"更新数据\n```\nfunction update() {\n  var request = db.transaction(['person'], 'readwrite')\n    .objectStore('person')\n    .put({ id: 1, name: '李四', age: 35, email: 'lisi@example.com' });\n\n  request.onsuccess = function (event) {\n    console.log('数据更新成功');\n  };\n\n  request.onerror = function (event) {\n    console.log('数据更新失败');\n  }\n}\n\nupdate();\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"t_table","tag":".delete","suffix":"(pkv)","desc":"删除记录，pkv=主键值","url":"","summary":"","reference":"","dot":""}]},{"title":"遍历","fold":false,"list":[{"prefix":"t_table","tag":".openCursor()","suffix":".onsuccess","desc":"遍历数据表格的所有记录，要使用指针对象 IDBCursor。\n```\nfunction readAll() {\n  var objectStore = db.transaction('person').objectStore('person');\n\n   objectStore.openCursor().onsuccess = function (event) {\n     var cursor = event.target.result;\n\n     if (cursor) {\n       console.log('Id: ' + cursor.key);\n       console.log('Name: ' + cursor.value.name);\n       console.log('Age: ' + cursor.value.age);\n       console.log('Email: ' + cursor.value.email);\n       cursor.continue();\n    } else {\n      console.log('没有更多数据了！');\n    }\n  };\n}\n\nreadAll();\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"Misc","fold":false,"list":[{"prefix":"","tag":"localforage","suffix":"","desc":"","url":"https://localforage.docschina.org/","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Elasticsearch","barcolor":"","fold":false,"box":[{"title":"Env","fold":false,"list":[{"prefix":"docker ","tag":"install","suffix":"","desc":"docker pull docker.elastic.co/elasticsearch/elasticsearch:7.9.3\ndocker network create esnet\ndocker run --name es -p 9200:9200 -p 9300:9300 -e \"discovery.type=single-node\" docker.elastic.co/elasticsearch/elasticsearch:7.9.3","url":"","summary":"","reference":"概念入门|https://www.ruanyifeng.com/blog/2017/08/elasticsearch.html\n本地安装|https://juejin.im/entry/6844903919013855240","dot":""},{"prefix":"docker ","tag":"plugins","suffix":"","desc":"docker exec -it es /bin/bash","url":"","summary":"","reference":"IK中文分词器|https://www.cnblogs.com/szwdun/p/10664348.html","dot":""}]},{"title":"Extend","fold":false,"list":[{"prefix":"","tag":"kibana","suffix":"","desc":"","url":"","summary":"","reference":"ES Kibana用户手册|https://www.elastic.co/guide/cn/kibana/current/index.html","dot":""}]}]}]},{"column":[{"title":"MySQL","barcolor":"","fold":false,"box":[{"title":"Bugs","fold":false,"list":[{"prefix":"","tag":"gmt bug","suffix":"","desc":"0000-00-00 00:00:00   1999-01-01 00:00:00","url":"","summary":"","reference":"","dot":""}]},{"title":"查询","fold":false,"list":[{"prefix":"","tag":"CONCAT","suffix":"","desc":"单表多字段模糊查询\n```sql\nSELECT * FROM `magazine` WHERE CONCAT(IFNULL(`title`,''),IFNULL(`tag`,''),IFNULL(`description`,'')) LIKE '%关键字%'\n```\n\n```javascript\nwhere: {\n  [Op.or]: [\n    {ch: {[Op.like]: `%${search || ''}%`}},\n    {en: {[Op.like]: `%${search || ''}%`}},\n  ],\n},\n```","url":"","summary":"","reference":"mysql参考资料|https://blog.csdn.net/yaoyao9565/article/details/51305854\nsequelize参考资料|https://segmentfault.com/q/1010000022293449","dot":""}]}]}]}]}