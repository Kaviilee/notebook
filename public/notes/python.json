{"version":1581333101903,"name":"python","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"基本类型","fold":false,"list":[{"prefix":"","tag":"整型 ","suffix":"int","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"浮点型 ","suffix":"float","desc":"如 1.23、3E-2","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"复数 ","suffix":"complex","desc":"如 1 + 2j、 1.1 + 2.2j","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"布尔型 ","suffix":"bool","desc":"值：True,False","url":"","summary":"在 Python2 中是没有布尔型的，它用数字 0 表示 False，用 1 表示 True。到 Python3 中，把 True 和 False 定义成关键字了，但它们的值还是 1 和 0，它们可以和数字相加。","reference":"","dot":""},{"prefix":"","tag":"字符串 ","suffix":"string + * ''' r","desc":"r\"\\n\" 不发生转义，'''多行字符串。\n1.字符串拼接符 + \n2.字符串重复 *\n3.字符串访问与切片，变量[头下标:尾下标:步长]（含头不含尾）","url":"","summary":"反斜杠可以用来转义，使用r可以让反斜杠不发生转义。 如 r\"this is a line with \\n\" 则\\n会显示，并不是换行。\n单引号和双引号使用完全相同，使用三引号('''或\"\"\")可以指定一个多行字符串。\nPython 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。","reference":"","dot":""},{"prefix":"","tag":"元组 ","suffix":"tuple + *","desc":"多元素元组：(1,'a') ，单元素元组：(1,)，空元组：()\n1.元组拼接符 + \n2.元组重复 *\n3.元组访问与切片，变量[头下标:尾下标:步长]（含头不含尾）","url":"","summary":"元组（tuple）与列表类似，不同之处：\n1. 元组的元素不能修改和删除，但可以使用del语句来删除整个元组\n2. tuple的元素不可改变，但它可以包含可变的对象，比如list列表\n3. 当元组只有一个元素，需要在元素后添加逗号 tup2 = (20,) 否则非元组，而是单元素","reference":"","dot":""},{"prefix":"","tag":"列表 ","suffix":"list + *","desc":"多元素列表：[1,'a']，空列表：[]\n1.列表拼接符 + \n2.列表重复 *\n字符串,元组,列表均可称为序列。\n3.列表访问与切片，变量[头下标:尾下标:步长]（含头不含尾）","url":"","summary":"Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串","reference":"","dot":""},{"prefix":"","tag":"集合 ","suffix":"set","desc":"多元素集合：{'a','b'} ,set(var)\n空集合：set()\na - b = a 和 b 的差集\na | b = a 和 b 的并集\na & b = a 和 b 的交集\na ^ b = a 和 b 中不同时存在的元素","url":"","summary":"集合是一个无序不重复元素的序列。\n1.创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。\n2.使用set()时最多传入1个参数。\n","reference":"","dot":""},{"prefix":"","tag":"字典 ","suffix":"dict","desc":"多元素字典：{'k':'v'}\n空字典：{} / dict()","url":"","summary":"1.在同一个字典中，键(key)必须是唯一的，键(key)必须使用不可变类型。\n2.字符串、整型、浮点型和元组都可以作为dict的key。","reference":"","dot":""},{"prefix":"","tag":"空值 ","suffix":"None","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"类型检测","fold":false,"list":[{"prefix":"","tag":"type","suffix":"(var)","desc":"查询变量所指的对象类型","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"isinstance","suffix":"(var,type..)","desc":"判断变量所指的对象类型（包含继承）","url":"","summary":"```\nisinstance(a, int)\nisinstance(a, (list, tuple))\n```","reference":"","dot":""},{"prefix":"","tag":"types.","suffix":"fntype","desc":"判断是否为函数\nimport types\ntype(fn) == types.FunctionType | BuiltinFunctionType | types.LambdaType | GeneratorType","url":"","summary":"","reference":"","dot":""}]},{"title":"类型转换/创建","fold":true,"list":[{"prefix":"","tag":"int","suffix":"(x[,base])","desc":"将一个字符串或数字转换为整型，base默认值为10","url":"","summary":"base指数据源的原始进制，转化之后总是显示为十进制","reference":"","dot":""},{"prefix":"","tag":"float","suffix":"(x)","desc":"将整数和字符串转换成浮点数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"complex","suffix":"(real[,imag])","desc":"创建一个值为 real + imag * j 的复数或者转化一个字符串或数为复数\n如果第一个参数为字符串，则不需要指定第二个参数","url":"","summary":"```python\n>>>complex(1, 2)\n(1 + 2j)\n\n>>> complex(1)    # 数字\n(1 + 0j)\n\n>>> complex(\"1\")  # 当做字符串处理\n(1 + 0j)\n\n# 注意：这个地方在\"+\"号两边不能有空格，也就是不能写成\"1 + 2j\"，应该是\"1+2j\"，否则会报错\n>>> complex(\"1+2j\")\n(1 + 2j)\n```","reference":"","dot":""},{"prefix":"","tag":"bool","suffix":"(x)","desc":"转换到布尔值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"str","suffix":"(x)","desc":"将对象 x 转换为字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"tuple","suffix":"(ite)","desc":"将序列/字典的key/可迭代对象转换为一个元组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"list","suffix":"(ite)","desc":"将序列/字典的key/可迭代对象转换为一个列表","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"set","suffix":"(ite)","desc":"将序列/字典的key/可迭代对象转换为一个可变集合","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"frozenset","suffix":"（ite）","desc":"转换为不可变集合","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"dict","suffix":"(d)","desc":"创建字典","url":"","summary":"dict(key='val',..) \ndict([(key1,val2),(key2,val2)...]) 元组数组\ndict(([key1,val2],[key2,val2]...)) 数组元组\ndict(zip(['one', 'two', 'three'], [1, 2, 3]))  映射函数方式来构造字典","reference":"","dot":""},{"prefix":"","tag":"object()","suffix":"","desc":"返回一个没有特征的新对象。\nobject 是所有类的基类。它具有所有 Python 类实例的通用方法。这个函数不接受任何实参。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"x ","suffix":"= val","desc":"Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。","url":"","summary":"Python允许你同时为多个变量赋值\n```a = b = c = 1```\n为多个对象指定多个变量\n```a, b, c = 1, 2, \"runoob\"```\n\n1.变量没有类型，类型属于对象，变量只是一个对象的引用（指针）\n2.不可变类型：数值、字符串、元组；其余为可变类型 \n3.if/for/while等不会引入新的作用域，无块作用域","reference":"","dot":""},{"prefix":"","tag":"del ","suffix":"var..","desc":"可以通过使用del语句删除单个或多个对象\ndel var_a, var_b","url":"","summary":"","reference":"","dot":""}]},{"title":"运算符","fold":false,"list":[{"prefix":"","tag":"算术运算符","suffix":"","desc":"加法运算符：x + y\n减法运算符： x - y\n乘法运算符： x * y\n指数运算符：x ** y\n除法运算符：x / y\n余数运算符：x % y\n地板除运算符：x // y","url":"","summary":"/ 返回一个浮点数，// 返回一个整数\n在混合计算时，Python会把整型转换成为浮点数。","reference":"","dot":""},{"prefix":"","tag":"赋值运算符","suffix":"","desc":"+= -= *= **= /= %= //=\n:= 海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。","url":"","summary":"在这个示例中，赋值表达式可以避免调用 len() 两次:\n```python\nif (n := len(a)) > 10:\n    print(f\"List is too long ({n} elements, expected <= 10)\")\n```","reference":"","dot":""},{"prefix":"","tag":"关系运算符","suffix":"","desc":"\\> 大于运算符\n\\< 小于运算符\n>= 大于或等于运算符\n<= 小于或等于运算符\n== 相等运算符\n!= 不相等运算符\nin / not in 是否存在于指定序列中（字符串，列表或元组）\nis / is not 判断两个标识符是不是引用自一个对象|存储单元","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"逻辑运算符 ","suffix":"","desc":"and 且运算符\nor 或运算符\nnot 取反运算符","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"位运算符","suffix":"","desc":"| 按位或\n& 按位与\n~ 按位取反\n^ 按位异或\n\\<< 左移运算符 \n\n>> 右移运算符","url":"","summary":"","reference":"","dot":""}]},{"title":"流程控制","fold":false,"list":[{"prefix":"","tag":"if..else..","suffix":"","desc":"```python\nif condition_1:\n    statement_block_1\nelif condition_2:\n    statement_block_2\nelse:\n    statement_block_3\n```","url":"","summary":"1、每个条件后面要使用冒号 :，表示接下来是满足条件后要执行的语句块。\n2、使用缩进来划分语句块，相同缩进数的语句在一起组成一个语句块。\n3、在Python中没有switch – case语句。","reference":"","dot":""},{"prefix":"","tag":"pass","suffix":"","desc":"pass是空语句，是为了保持程序结构的完整性\npass 不做任何事情，一般用做占位语句","url":"","summary":"","reference":"","dot":""}]},{"title":"循环语句","fold":false,"list":[{"prefix":"","tag":"while","suffix":"","desc":"```python\nwhile exp :\n    statement;\nelse:\n    statement;\n```","url":"","summary":"在 while … else 在条件语句为 false 时执行 else 的语句块","reference":"","dot":""},{"prefix":"","tag":"for x in s","suffix":"","desc":"Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"break","suffix":"","desc":"退出无限循环，循环被break终止时else不执行","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"continue","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"模块","fold":false,"list":[{"prefix":"","tag":"import ","suffix":"module,..","desc":"引入一个模块(内置/自定义)\n对应的方法需要使用 module.name来使用","url":"","summary":"一个文件就是一个模块","reference":"","dot":""},{"prefix":"","tag":"form module import ","suffix":"name,..","desc":"从模块中导入一个指定的部分到当前命名空间\nform module import *\n引入全部变量与函数，但不包括以下划线开头部分，可直接使用模块内部的名称","url":"","summary":"\n","reference":"","dot":""}]},{"title":"其它","fold":true,"list":[{"prefix":"","tag":"多行语句 ","suffix":"\\","desc":"多行语句使用\\来串接，在(),[],{}中不需要\n同一行中使用多条语句，语句之间使用分号(;)分割","url":"","summary":"Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠(\\)来实现多行语句，例如：\n```python\ntotal = item_one + \\\n        item_two + \\\n        item_three\n```\n在 [], {}, 或 () 中的多行语句，不需要使用反斜杠(\\)，例如：\n```python\ntotal = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n```","reference":"","dot":""}]}]},{"title":"全局","barcolor":"","fold":false,"box":[{"title":"全局方法","fold":false,"list":[{"prefix":"","tag":"eval","suffix":"(str)","desc":"执行一个字符串表达式，并返回表达式的值。","url":"","summary":"eval(expression[, globals[, locals]])\nexpression -- 表达式。\nglobals -- 变量作用域，全局命名空间，如果被提供，则必须是一个字典对象。\nlocals -- 变量作用域，局部命名空间，如果被提供，可以是任何映射对象。","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"安装","fold":false,"list":[{"prefix":"","tag":"python -V","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"REPL","fold":false,"list":[{"prefix":"","tag":"input","suffix":"(val)","desc":"等待用户输入","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"print","suffix":"(val)","desc":"print( x, end=\" \" )\nprint 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=\"\"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"repr","suffix":"(x)","desc":"将对象转化为供解释器读取的形式","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"数值","barcolor":"","fold":false,"box":[{"title":"进制转换","fold":false,"list":[{"prefix":"","tag":"hex","suffix":"(n)","desc":"将一个整数转变为一个前缀为“0x”的十六进制字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"oct","suffix":"(n)","desc":"将一个整数转变为一个前缀为“0o”的八进制字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"bin","suffix":"(n)","desc":"将一个整数转变为一个前缀为“0b”的二进制字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"chr","suffix":"(n)","desc":"用一个范围在 range（256）内的（就是0～255）整数作参数\n返回值是当前整数对应的 ASCII 字符","url":"","summary":"","reference":"","dot":""}]},{"title":"其它方法","fold":false,"list":[]}]}]},{"column":[{"title":"Iterator","barcolor":"","fold":false,"box":[{"title":"序列","fold":false,"list":[{"prefix":"","tag":"reversed","suffix":"(seq)","desc":"返回一个反转的迭代器\n可以是 tuple, string, list 或 range","url":"","summary":"","reference":"","dot":""}]},{"title":"迭代器","fold":false,"list":[{"prefix":"","tag":"iter","suffix":"(ite)","desc":"把list、dict、str等Iterable变成Iterator","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"enumerate","suffix":"(ite,[start])","desc":"将一个可遍历的数据对象(如列表、元组或字符串)组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。","url":"","summary":"将一个可迭代对象输出一个枚举对象，默认start=0 \n例如list这样就可以在for循环中同时迭代索引和元素本身\n```python\neasons = ['Spring', 'Summer', 'Fall', 'Winter']\nlist(enumerate(seasons))\n[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n\nlist(enumerate(seasons, start=1))       # 下标从 1 开始\n[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n\nseq = ['one', 'two', 'three']\nfor i, element in enumerate(seq):\n    print i, element\n```","reference":"","dot":""}]}]}]},{"column":[{"title":"其它","barcolor":"","fold":false,"box":[{"title":"内存","fold":false,"list":[{"prefix":"","tag":"id","suffix":"(obj)","desc":"函数用于获取对象内存地址","url":"","summary":"","reference":"","dot":""}]}]}]}]}