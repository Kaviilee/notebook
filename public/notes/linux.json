{"version":1577292216582,"name":"linux","data":[{"column":[{"title":"文件管理","barcolor":"","fold":false,"box":[{"title":"server","fold":false,"list":[{"prefix":"","tag":"ulimit -an","suffix":"","desc":"open files限制","url":"","summary":"修改文件 `vim /etc/profile`\n在文件末尾加入`ulimit –n 65535`\n生效文件 `source /etc/profile`\n检查确认 `ulimit -an`","reference":"","dot":""}]}]},{"title":"磁盘管理","barcolor":"","fold":false,"box":[{"title":"du","fold":false,"list":[{"prefix":"","tag":"du -h --max-depth=1","suffix":"","desc":"磁盘文件夹占用\n其中./root/.pm2/logs\nvar/log/\n\nnginx reload释放引用","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"进程管理","barcolor":"","fold":false,"box":[{"title":"path","fold":false,"list":[{"prefix":"","tag":"pwd","suffix":"","desc":"当前所在的目录","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"~ ","suffix":"user","desc":"当前用户的主目录\n~user表示扩展成用户user的主目录。","url":"","summary":"","reference":"","dot":""}]},{"title":"var","fold":false,"list":[{"prefix":"","tag":"$?","suffix":"","desc":"上一个命令的退出码，用来判断上一个命令是否执行成功。\n返回值是0，表示上一个命令执行成功；\n如果是非零，上一个命令执行失败。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$$","suffix":"","desc":"当前 Shell 的进程 ID","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"用户管理","barcolor":"","fold":false,"box":[{"title":"账号","fold":false,"list":[{"prefix":"","tag":"useradd ","suffix":"$name","desc":"添加用户","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"passwd ","suffix":"$name","desc":"设置/更新用户密码","url":"","summary":"","reference":"","dot":""}]},{"title":"分组","fold":false,"list":[{"prefix":"","tag":"usermod ","suffix":"$group $name","desc":"usermod -G root,www 用户名\nusermod -g 自定义分组 用户名","url":"","summary":"","reference":"","dot":""}]}]},{"title":"I/O","barcolor":"","fold":false,"box":[{"title":"output","fold":false,"list":[{"prefix":"","tag":"echo ","suffix":"\"str\" -e","desc":"输出一行或多行文本，多行文本时，需要放在引号内\n-e参数会解释引号（双引号和单引号）里面的特殊字符（比如换行符\\n）","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"crypto","barcolor":"","fold":false,"box":[{"title":"openssl","fold":false,"list":[{"prefix":"openssl ","tag":"genrsa ","suffix":"","desc":"创建\n`openssl genrsa -aes256 -out rsa-key.pem 2048`\n","url":"","summary":"openssl genrsa [args] [numbits]\nargs1 对生成的私钥文件是否要使用加密算法进行对称加密: \n    -des : CBC模式的DES加密 \n    -des3 : CBC模式的3DES加密 \n    -aes128 : CBC模式的AES128加密 \n    -aes192 : CBC模式的AES192加密 \n    -aes256 : CBC模式的AES256加密 \nargs2 对称加密密码\n    -passout passwords\n    其中passwords为对称加密(des、3des、aes)的密码(使用这个参数就省去了console交互提示输入密码的环节) \nargs3 输出文件\n    -out file : 输出证书私钥文件 \n[numbits]: 密钥长度，理解为私钥长度 ","reference":"","dot":""},{"prefix":"openssl ","tag":"rsa","suffix":"","desc":"导出私钥 `openssl rsa -in rsa-key.pem -outform PEM -out rsa-prv.pem`\n导出公钥 `openssl rsa -in rsa-key.pem -outform PEM -pubout -out rsa-pub.pem`","url":"","summary":"","reference":"","dot":""},{"prefix":"csr to pem","tag":" ","suffix":"","desc":".key 转换成 .pem：\n```openssl rsa -in temp.key -out temp.pem```\n.crt 转换成 .pem：\n```openssl x509 -in tmp.crt -out tmp.pem```","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"网络","barcolor":"","fold":false,"box":[{"title":"IP","fold":false,"list":[{"prefix":"","tag":"ifconfig","suffix":"","desc":"显示和配置网络接口\n[windows] *ipconfig*","url":"","summary":"","reference":"参考资料|https://www.runoob.com/linux/linux-comm-ifconfig.html","dot":""},{"prefix":"","tag":"ip addr","suffix":"","desc":"显示和配置网络接口,路由","url":"","summary":"","reference":"","dot":""}]},{"title":"检测","fold":false,"list":[{"prefix":"","tag":"traceroute ","suffix":"host","desc":"从你的计算机到互联网另一端的主机是走的什么路径。\n[windows] *tracert*","url":"","summary":"","reference":"参考资料|https://www.runoob.com/linux/linux-comm-traceroute.html","dot":""},{"prefix":"","tag":"ping ","suffix":"host","desc":"测试与目标主机的连通性,基于IMCP协议\n-q 不显示任何传送封包的信息，只显示最后的结果\n-n 只输出数值\n-R 记录路由过程\n-c count 总次数\n-i 时间间隔\n-t 存活数值：设置存活数值TTL的大小","url":"","summary":"ping网关 `ping -b 192.168.120.1`\nping指定次数 `ping -c 10 192.168.120.206`\n时间间隔和次数限制的ping `ping -c 10 -i 0.5 192.168.120.206`\n多参数使用 `ping -i 3 -s 1024 -t 255 192.168.120.206`\n说明：-i 3 发送周期为 3秒 -s 设置发送包的大小为1024 -t 设置TTL值为 255","reference":"参考资料|https://www.runoob.com/linux/linux-comm-ping.html","dot":""}]},{"title":"防火墙","fold":false,"list":[{"prefix":"","tag":"firewalld","suffix":"","desc":"centos8防火墙会关闭443","url":"","summary":"检查防火墙 systemctl status firewalld.service\n开启防火墙 systemctl start firewalld.service\n关闭防火墙 systemctl stop firewalld.service\n禁用防火墙 systemctl disable firewalld.service","reference":"","dot":""}]}]},{"title":"nginx","barcolor":"","fold":false,"box":[{"title":"nginx","fold":false,"list":[{"prefix":"docker nginx","tag":" ","suffix":"","desc":"CMD `docker run -d -p 127.0.0.1:5120:80 --name nginx2020 -v /f/nginx:/usr/share/nginx/html --volume \"$PWD/conf\":/etc/nginx nginx`\n注意根/","url":"","summary":"`docker container cp mynginx:/etc/nginx .`\n把mynginx容器的/etc/nginx拷贝到当前目录。不要漏掉最后那个点。","reference":"参考资料|https://www.ruanyifeng.com/blog/2018/02/nginx-docker.html","dot":""}]},{"title":"other","fold":false,"list":[{"prefix":"","tag":"certbot","suffix":"","desc":"","url":"","summary":"1.域名指向服务器\n2.certbot certonly\n\n3.cd /etc/nginx/sites-enable\n4.touch icon.jx3box.com.conf\n5.vim icon.jx3box.com.conf\n```\nserver\n{\n    listen 80;\n    server_name icon.jx3box.com;\n    index index.html index.htm default.php default.htm default.html;\n    root /www/wwwroot/jx3-icon;\n    listen 443 ssl http2;\n    ssl_certificate /etc/letsencrypt/live/icon.jx3box.com/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/icon.jx3box.com/privkey.pem; # managed by Certbot\n    ssl_trusted_certificate /etc/letsencrypt/live/icon.jx3box.com/chain.pem;\n}\n```\n6.nginx -s reload","reference":"install|https://segmentfault.com/a/1190000005797776","dot":"","title":"server"}]},{"title":"config","fold":false,"list":[{"prefix":"","tag":"alias|root","suffix":"","desc":"root：真实的路径是root指定的值加上location指定的值 。\nalias：真实路径都是 alias 指定的路径。\n\n1、alias 只能作用在location中，而root可以存在server、http和location中。\n2、alias 后面必须要用 “/” 结束，否则会找不到文件，而 root 则对 \"/\" 可有可无。","url":"","summary":"","reference":"参考资料|https://blog.csdn.net/tuoni123/article/details/79712246","dot":""}]}]}]},{"column":[{"title":"Docker","barcolor":"","fold":false,"box":[{"title":"镜像","fold":false,"list":[{"prefix":"docker ","tag":"pull ","suffix":"<img>","desc":"抓取镜像","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"rmi ","suffix":"<img>","desc":"删除镜像","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"commit ","suffix":"","desc":"基于现有镜像更新 `docker commit -m=\"msg\" -a=\"username\" <oldid> username/imagename:tag`\n示例 `docker commit -m=\"add something\" -a=\"iruxu\" a1b2c3 iruxu/mydockerimg:v2`\n使用新的镜像 `docker run -it runoob/ubuntu:v2 /bin/bash`","url":"","summary":"","reference":"参考资料|https://www.runoob.com/docker/docker-commit-command.html","dot":""},{"prefix":"docker ","tag":"images","suffix":"","desc":"列出镜像","url":"","summary":"","reference":"","dot":""}]},{"title":"容器","fold":false,"list":[{"prefix":"docker ","tag":"ps","suffix":" -a","desc":"列出容器","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"run ","suffix":"-it <img> /bin/bash","desc":"新建一个正在运行的容器实例，加了 -d 参数默认不会进入容器\n`docker run -itd --name ubuntu-test ubuntu /bin/bash`","url":"","summary":"注意，docker container run命令具有自动抓取 image 文件的功能。如果发现本地没有指定的 image 文件，就会从仓库自动抓取。因此，前面的docker image pull命令并不是必需的步骤。","reference":"","dot":""},{"prefix":"docker ","tag":"exec ","suffix":"-it <id> /bin/bash","desc":"进入容器命令行\n`docker exec -it <id> /bin/bash`","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"start|stop|restart ","suffix":"<id>","desc":"启动或停止容器","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"rm -f ","suffix":"<id>","desc":"删除容器","url":"","summary":"","reference":"","dot":""}]},{"title":"参数","fold":false,"list":[{"prefix":"","tag":"--name","suffix":"","desc":"指定一个容器名称","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"-idt","suffix":"","desc":"后台交互式启动\n`docker run -dit -v /local:/usr/src/x python`","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"-p 8000:3000","suffix":"","desc":"本地端口映射=>容器内部\n`docker run -p 8000:3000 -it koa-demo /bin/bash`\n`docker run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash`","url":"","summary":"-p参数：容器的 3000 端口映射到本机的 8000 端口。\n-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。\nkoa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。\n/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。","reference":"参考资料|https://www.runoob.com/docker/docker-container-connection.html","dot":""},{"prefix":"","tag":"-v local:container","suffix":"","desc":"数据卷挂载\n`docker run -it -v /$local:/$container $image /bin/bash`\n`docker run -it -v /f/Study/Test/docker/test:/www node /bin/bash`\n预先需在resources/file sharing指定分享磁盘","url":"","summary":"","reference":"参考资料|https://yeasy.gitbooks.io/docker_practice/content/data_management/volume.html","dot":""},{"prefix":"","tag":"--network ","suffix":"<name>","desc":"宿主本地网关默认 172.17.0.1\n1.新建网络 `docker network create -d bridge test-net`\n2.加入网络 `docker run -it --name busybox1 --network my-net busybox sh`","url":"","summary":"","reference":"容器访问宿主|https://blog.csdn.net/yy2yy99/article/details/92760553\n外部访问容器|https://yeasy.gitbooks.io/docker_practice/content/network/port_mapping.html\n容器互联|https://yeasy.gitbooks.io/docker_practice/content/network/linking.html","dot":""},{"prefix":"docker ","tag":"cp ","suffix":"","desc":"容器与主机之间的数据拷贝\n主机到容器 `docker cp /www/runoob 96f7f14e99ab:/www/runoob`\n容器到主机 `docker cp  96f7f14e99ab:/www /tmp/`","url":"","summary":"","reference":"参考资料|https://www.runoob.com/docker/docker-cp-command.html","dot":""},{"prefix":"docker ","tag":"logs ","suffix":"<id>","desc":"查看容器内部的标准输出","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"top","suffix":"","desc":"查看容器内部运行的进程","url":"","summary":"","reference":"","dot":""}]},{"title":"命令","fold":false,"list":[]},{"title":"构建","fold":false,"list":[{"prefix":"","tag":".dockerignore","suffix":"","desc":"```\n.git\nnode_modules\nnpm-debug.log\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"Dockerfile","suffix":"","desc":"```\nFROM node:12.16.1 //基础镜像 scratch空白镜像\nENV VERSION=1.0 DEBUG=on \\\n    NAME=\"Happy Feet\" //可以$NODE_VERSION在后续RUN中引用\nCOPY . /app //拷贝本地数据=>容器内部\nWORKDIR /app  //之后命令基于此路径执行\nRUN npm install --registry=https://registry.npm.taobao.org  //多个命令合并减少层\nEXPOSE 3000 //暴露端口\nCMD node app.js //默认执行的命令\n//可在执行命令行中自行指定数据卷\n```","url":"","summary":"FROM node:8.4：该 image 文件继承官方的 node image，冒号表示标签，这里标签是8.4，即8.4版本的 node。\nCOPY . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。\nWORKDIR /app：指定接下来的工作路径为/app。\nRUN npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。\nEXPOSE 3000：将容器 3000 端口暴露出来， 允许外部连接这个端口。\n\n# 注意\n减少镜像层，多个命令合并在一个RUN中，并执行好相关清理","reference":"官方文档|https://docs.docker.com/engine/reference/builder/","dot":""},{"prefix":"docker ","tag":"build -t ","suffix":"<name>:<0.0.1> .","desc":"latest `docker image build -t koa-demo .`\n指定版本 `docker image build -t koa-demo:0.0.1 .`","url":"","summary":"-t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。最后的那个点表示 Dockerfile 文件所在的路径，上例是当前路径，所以是一个点","reference":"入门教程|https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html\n指令详解|https://www.runoob.com/docker/docker-dockerfile.html","dot":""},{"prefix":"","tag":"docker-compose.yml","suffix":"","desc":"```\nversion: \"3.7\"\nservices:\n    wordpress: //服务名称\n        image: wordpress:latest //指定镜像\n        restart: always\n        depends_on: redis //依赖的服务\n        networks:\n            - some-network //加入的某个网络\n        ports:\n            - 127.0.0.1:7100:80 //端口映射本地=>容器内部\n        environment:\n            WORDPRESS_DB_HOST: 172.17.0.1:3306 //外部宿主mysql\n            WORDPRESS_DB_USER: root\n            WORDPRESS_DB_PASSWORD: 123456\n            WORDPRESS_DB_NAME: testdb\n        volumes:\n            - /f/JX3/jx3box-wp:/var/www/html //数据卷本地=>容器内部\n\nnetworks:\n  some-network:  //创建的网络\n  other-network:\n\nvolumes:\n  mysql_data:  //创建的数据卷\n```","url":"","summary":"","reference":"官方文档|https://docs.docker.com/compose/compose-file/","dot":""},{"prefix":"","tag":"docker-compose up|stop","suffix":"","desc":"拉起多个服务","url":"","summary":"","reference":"入门教程|https://leehao.me/Docker-Compose-%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/\nWordpress|https://www.ruanyifeng.com/blog/2018/02/docker-wordpress-tutorial.html","dot":""},{"prefix":"mysql","tag":" ","suffix":"","desc":"# 初始化本地mysql\n`docker run --name mysql5.7 --privileged=true -p 3306:3306 -v /f/Mysql/v5.7:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7`","url":"","summary":"# 宿主mysql授权\n```\nmysql>GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '12345678' WITH GRANT OPTION;\nmysql>flush privileges;\n// 其中各字符的含义：\n// *.* 对任意数据库任意表有效\n// \"root\" \"12345678\" 是数据库用户名和密码\n// '%' 允许访问数据库的IP地址，%意思是任意IP，也可以指定IP\n// flush privileges 刷新权限信息\n```","reference":"Mysql8-navicat|https://blog.csdn.net/vkingnew/article/details/80105323\n访问宿主mysql|https://blog.csdn.net/yy2yy99/article/details/92760553","dot":""}]},{"title":"发布","fold":false,"list":[{"prefix":"docker ","tag":"login","suffix":"","desc":"登录 iruxu","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"tag ","suffix":"[imageName] [username]/[repository]:[tag]","desc":"`docker image tag [imageName] [username]/[repository]:[tag]`\n`docker image tag koa-demos:0.0.1 ruanyf/koa-demos:0.0.1`","url":"","summary":"","reference":"","dot":""},{"prefix":"docker ","tag":"push ","suffix":"[username]/[repository]:[tag]","desc":"`docker image push [username]/[repository]:[tag]`","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"Install","suffix":"","desc":"1.下载\n2.安装并重启\n3.配置镜像源\n4.配置可挂载磁盘","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"YAML","suffix":"","desc":":对象，-数组，~null","url":"","summary":"","reference":"参考资料|https://www.ruanyifeng.com/blog/2016/07/yaml.html","dot":""},{"prefix":"","tag":"All cmd","suffix":"","desc":"全部命令","url":"https://www.runoob.com/docker/docker-command-manual.html","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Bash","barcolor":"","fold":false,"box":[{"title":"基本语法","fold":false,"list":[{"prefix":"","tag":";  &&  ||","suffix":"","desc":"`;  &&  ||` 多条命令\n`type -a cmd` 命令信息\n`Ctrl + U`：从光标位置删除到行首。\n`Ctrl + K`：从光标位置删除到行尾。\n`Ctrl + L`：clear\n`Ctrl + C`：中止当前正在执行的命令。\n`Ctrl + D`：关闭 Shell 会话。\n`↑，↓`：浏览已执行命令的历史记录。","url":"","summary":"","reference":"","dot":"","title":"vim"}]},{"title":"glob","fold":true,"list":[{"prefix":"","tag":"set","suffix":" -f","desc":"`set -f` 关闭glob\n`set +f` 开启glob","url":"","summary":"","reference":"glob|https://wangdoc.com/bash/expansion.html","dot":""},{"prefix":"","tag":"?","suffix":"","desc":"`?`字符代表文件路径里面的*任意单个字符，不包括空字符*。\n比如，Data???匹配所有Data后面跟着三个字符的文件名。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"*","suffix":"","desc":"`*`字符代表文件路径里面的*任意数量的字符，包括零个字符*。\n*只匹配当前目录，不会匹配子目录。\n\n注意，*不会匹配隐藏文件（以.开头的文件）。\n`echo .*` 显示所有隐藏文件\n`echo .[!.]*` 只显示正常的隐藏文件，不显示 . 和 .. 这两个特殊文件","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"[start-end]{start..end}","suffix":"","desc":"匹配一个连续的范围\n[!start-end] 匹配不属于这个范围的字符","url":"","summary":"[a-z]：所有小写字母。\n[a-zA-Z]：所有小写字母与大写字母。\n[a-zA-Z0-9]：所有小写字母、大写字母与数字。\n[abc]*：所有以a、b、c字符之一开头的文件名。\nprogram.[co]：文件program.c与文件program.o。\nBACKUP.[0-9][0-9][0-9]：所有以BACKUP.开头，后面是三个数字的文件名。","reference":"","dot":""},{"prefix":"","tag":"[xyz]","suffix":"","desc":"匹配xyz\n[!xyz]或[^xyz]排除xyz","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"{x,y,z}","suffix":"suffix","desc":"可扩展xsuffix,ysuffix","url":"","summary":"","reference":"","dot":""}]},{"title":"变量","fold":false,"list":[{"prefix":"","tag":"env","suffix":"","desc":"全部变量","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"echo ","suffix":"$PATH","desc":"`echo $PATH` 或 `printenv PATH` 查看指定变量","url":"","summary":"","reference":"","dot":""}]},{"title":"vim","fold":false,"list":[{"prefix":"","tag":"dd","suffix":"","desc":"删除当前行","url":"","summary":"","reference":"","dot":""}]}]},{"title":"其他","barcolor":"","fold":false,"box":[{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"Bash教程","suffix":"","desc":"","url":"https://wangdoc.com/bash/index.html","summary":"","reference":"","dot":""}]}]}]}]}