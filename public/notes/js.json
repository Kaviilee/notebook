{"version":1581247432033,"name":"js","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"数据类型","fold":false,"list":[{"prefix":"","tag":"Number","suffix":"","desc":"基本类型，数字类型只有一个整数: 0","url":"","summary":"根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(263 -1) 到 263 -1） ","reference":"","dot":""},{"prefix":"","tag":"Boolean","suffix":"","desc":"基本类型，值true,false","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"String ","suffix":"+","desc":"基本类型，字符串连接符 +","url":"","summary":"JavaScript 字符串是不可更改的","reference":"","dot":""},{"prefix":"","tag":"Symbol","suffix":"","desc":"符号类型是唯一的并且是不可修改的,可以用来作为Object的key的值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"Undefined","suffix":"","desc":"一个没有被赋值的变量会有个默认值 undefined","url":"","summary":"不存在的变量与未声明的变量typeof检测均为undefined，但两者其实不同，故建议总是初始化。 ","reference":"","dot":""},{"prefix":"","tag":"Null","suffix":"","desc":"空：原始类型\nNull 类型只有一个值： null","url":"","summary":"1.判断null请使用myVar === null。Null 类型是一个只有一个值的数据类型，即特殊的值 null。它表示一个空对象引用(指针)，而 typeof 操作符检测 null 会返回 object。如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null。这样，当检查 null 值就知道是否已经变量是否已经分配了对象引用了。\n2.undefined 是派生自 null 的，因此 ECMA-262 规定对它们的相等性测试返回 true。alert(undefined == null);但typeof数据类型不等。","reference":"内存优化|https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management","dot":""},{"prefix":"","tag":"Object","suffix":"","desc":"对象：引用类型（包括数组、函数、标准对象等）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"enum ","suffix":"","desc":"枚举\nenum Color {Red, Green, Blue}\nlet c: Color = Color.Green;","url":"","summary":"","reference":"","dot":"#ffa500"}]},{"title":"类型检测","fold":false,"list":[{"prefix":"","tag":"typeof ","suffix":"val","desc":"返回的是字符串。 ","url":"","summary":"可通过Object.prototype.toString.call(o)测试\n<table>\n    <tr>\n        <th>类型</th>\n        <th>结果</th>\n    </tr>\n    <tr>\n        <td>true/false</td>\n        <td>boolean</td>\n    </tr>\n    <tr>\n        <td>数值/NaN</td>\n        <td>boolean</td>\n    </tr>\n    <tr>\n        <td>Symbol</td>\n        <td>symbol</td>\n    </tr>\n    <tr>\n        <td>字符串/JSON</td>\n        <td>string</td>\n    </tr>\n    <tr>\n        <td>fn</td>\n        <td>function</td>\n    </tr>\n    <tr>\n        <td>obj/数组/null</td>\n        <td>object</td>\n    </tr>\n    <tr>\n        <td>undefined/不存在的属性或方法</td>\n        <td>undefined</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"val ","tag":"instanceof ","suffix":"type","desc":"instanceof运算符返回一个布尔值，表示某个对象是否为指定的构造函数的实例。","url":"","summary":"<table>\n    <tr>\n        <th>测试目标</th>\n        <th>测试结果</th>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>arr instanceof Array</td>\n    </tr>\n    <tr>\n        <td>函数/构造函数</td>\n        <td>fn instanceof Function</td>\n    </tr>\n    <tr>\n        <td>构造函数实例</td>\n        <td>child instanceof parent</td>\n    </tr>\n    <tr>\n        <td>泛对象</td>\n        <td>obj instanceof Object</td>\n    </tr>\n    <tr>\n        <td>日期</td>\n        <td>value instanceof Date</td>\n    </tr>\n    <tr>\n        <td>正则表达式</td>\n        <td>value instanceof RegExp</td>\n    </tr>\n    <tr>\n        <td>数学</td>\n        <td>value instanceof Math</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"","tag":"(val as type) ","suffix":"","desc":"类型断言","url":"","summary":"","reference":"","dot":"#ffa500"}]},{"title":"类型转换/创建","fold":true,"list":[{"prefix":"","tag":"Boolean","suffix":"(val)","desc":"","url":"","summary":"0、-0、null、false、NaN、undefined、空字符串（\"\"）、document.all\n以上均生成值为false的Boolean对象","reference":"","dot":""},{"prefix":"","tag":"Number","suffix":"(val)","desc":"","url":"","summary":"<table>\n    <tr>\n        <th>value</th>\n        <th>返回值</th>\n    </tr>\n    <tr>\n        <td>number/包含单个数值的数组</td>\n        <td>number</td>\n    </tr>\n    <tr>\n        <td>boolean</td>\n        <td>1 / 0</td>\n    </tr>\n    <tr>\n        <td>null/空字符串/空数组</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>undefined/string/object</td>\n        <td>NaN</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"","tag":"String","suffix":"(val)","desc":"","url":"","summary":"<table>\n    <tr>\n        <th>value</th>\n        <th>返回值</th>\n    </tr>\n    <tr>\n        <td>数值</td>\n        <td>转为相应的字符串</td>\n    </tr>\n    <tr>\n        <td>字符串</td>\n        <td>转换后还是原来的值</td>\n    </tr>\n    <tr>\n        <td>布尔值</td>\n        <td>true转为\"true\"，false转为\"false\"</td>\n    </tr>\n    <tr>\n        <td>undefined</td>\n        <td>转为\"undefined\"</td>\n    </tr>\n    <tr>\n        <td>null</td>\n        <td>转为\"null\"</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>返回该数组的字符串形式  \"1,2,3\"</td>\n    </tr>\n    <tr>\n        <td>对象</td>\n        <td>返回一个类型字符串 \"[object Object]\" <br>可通过toString方法来设置修改</td>\n    </tr>\n</table>","reference":"","dot":""}]}]},{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"var ","suffix":"x = val","desc":"1.变量会提升，在没有声明前调用，会输出undefined\n2.假设声明a、b、c,且c=a+b，且均为非引用类型，当ab发生变化时，c不会改变，应设为c=fn(return a+b)","url":"","summary":"","reference":"3种全局变量的异同|http://snandy.iteye.com/blog/720816","dot":""},{"prefix":"","tag":"let ","suffix":"x = val","desc":"申明一个块级作用域的变量 let i = 1;\n不能使用let重复定义一个变量 ","url":"","summary":"只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响，暂时性死区。","reference":"","dot":""},{"prefix":"","tag":"let x:type ","suffix":"= val","desc":"ts强类型：number,boolean,string,$enum\n数组：type[],Array<type>\n元组：[type1,type2]\n任意：any\n空值：void\n特殊：never","url":"","summary":"---------------\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 \n比如，你可以定义一对值分别为string和number类型的元组。\n```typescript\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n```\n\n某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是void\n```typescript\nfunction warnUser(): void {\n    alert(\"This is my warning message\");\n}\n```\n\nnever类型表示的是那些永不存在的值的类型。 例如，never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是never类型，当它们被永不为真的类型保护所约束时。\n```typescript\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n    return error(\"Something failed\");\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n```","reference":"","dot":"#ffa500"},{"prefix":"","tag":"const ","suffix":"x = val","desc":"const PI = 3.14\n一旦声明，常量的指针就不能改变（仅指针，非值本身）                   ","url":"","summary":"1.const来定义常量，在声明时就必须赋值。\n2.const与let都具有块级作用域。","reference":"","dot":""},{"prefix":"","tag":"globalThis ","suffix":"全局对象","desc":"","url":"","summary":"JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域）\n1. 浏览器里面，顶层对象是**window**，但 Node 和 Web Worker 没有window。\n2. 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n3. Node 里面，顶层对象是**global**，但其他环境都不支持。\n\n-------------------\n\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用**this**变量，但是有局限性。\n1. 全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。\n2. 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n3. 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。\n\n-------------------\n\nES2020 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。","reference":"全局对象|http://es6.ruanyifeng.com/#docs/let#globalThis-%E5%AF%B9%E8%B1%A1","dot":""},{"prefix":"Destructuring","tag":" ","suffix":"解构","desc":"解构赋值允许指定默认值。\nlet [x, y = 'b'] = ['a']; // x='a', y='b'","url":"http://es6.ruanyifeng.com/#docs/destructuring#%E7%94%A8%E9%80%94","summary":"","reference":"","dot":""}]},{"title":"运算符","fold":false,"list":[{"prefix":"","tag":"类型比较","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness","summary":"","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"BOM","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model","summary":"","reference":"","dot":""},{"prefix":"","tag":"DOM","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model","summary":"","reference":"","dot":""},{"prefix":"","tag":"Web API","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/API","summary":"","reference":"","dot":""},{"prefix":"","tag":"Standard built-in objects","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","summary":"","reference":"","dot":""},{"prefix":"","tag":"ES compatibility table","suffix":"","desc":"","url":"http://kangax.github.io/compat-table/es6/","summary":"","reference":"","dot":""},{"prefix":"","tag":"ECMAScript","suffix":"","desc":"","url":"https://tc39.es/ecma262/","summary":"","reference":"","dot":""}]}]}]}]}