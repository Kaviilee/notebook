{"version":1581325677680,"name":"js","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"数据类型","fold":false,"list":[{"prefix":"","tag":"number","suffix":"","desc":"基本类型，数字类型只有一个整数: 0","url":"","summary":"根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(263 -1) 到 263 -1） ","reference":"","dot":""},{"prefix":"","tag":"boolean","suffix":"","desc":"基本类型，值true,false","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"string ","suffix":"+","desc":"基本类型，字符串连接符 +","url":"","summary":"JavaScript 字符串是不可更改的","reference":"","dot":""},{"prefix":"","tag":"object","suffix":"","desc":"对象：引用类型（包括数组、函数、标准对象等）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"Symbol","suffix":"","desc":"符号类型是唯一的并且是不可修改的,可以用来作为Object的key的值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"undefined","suffix":"","desc":"一个没有被赋值的变量会有个默认值 undefined","url":"","summary":"不存在的变量与未声明的变量typeof检测均为undefined，但两者其实不同，故建议总是初始化。 ","reference":"","dot":""},{"prefix":"","tag":"null","suffix":"","desc":"空：原始类型\nNull 类型只有一个值： null","url":"","summary":"1.判断null请使用myVar === null。Null 类型是一个只有一个值的数据类型，即特殊的值 null。它表示一个空对象引用(指针)，而 typeof 操作符检测 null 会返回 object。如果定义的变量准备在将来用于保存对象，那么最好将该变量初始化为 null。这样，当检查 null 值就知道是否已经变量是否已经分配了对象引用了。\n2.undefined 是派生自 null 的，因此 ECMA-262 规定对它们的相等性测试返回 true。alert(undefined == null);但typeof数据类型不等。","reference":"内存优化|https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management","dot":""},{"prefix":"","tag":"enum ","suffix":"","desc":"枚举\nenum Color {Red, Green, Blue}\nlet c: Color = Color.Green;","url":"","summary":"","reference":"","dot":"#ffa500"}]},{"title":"类型检测","fold":false,"list":[{"prefix":"","tag":"typeof ","suffix":"val","desc":"返回类型字符串 ","url":"","summary":"可通过Object.prototype.toString.call(o)测试\n<table>\n    <tr>\n        <th>类型</th>\n        <th>结果</th>\n    </tr>\n    <tr>\n        <td>数值/NaN</td>\n        <td>number</td>\n    </tr>\n    <tr>\n        <td>true/false</td>\n        <td>boolean</td>\n    </tr>\n    <tr>\n        <td>字符串/JSON</td>\n        <td>string</td>\n    </tr>\n    <tr>\n        <td>fn</td>\n        <td>function</td>\n    </tr>\n    <tr>\n        <td>obj/数组/null</td>\n        <td>object</td>\n    </tr>\n    <tr>\n        <td>Symbol</td>\n        <td>symbol</td>\n    </tr>\n    <tr>\n        <td>undefined/不存在的属性或方法</td>\n        <td>undefined</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"val ","tag":"instanceof ","suffix":"type","desc":"instanceof运算符返回一个布尔值，表示某个对象是否为指定的构造函数的实例。","url":"","summary":"<table>\n    <tr>\n        <th>测试目标</th>\n        <th>测试结果</th>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>arr instanceof Array</td>\n    </tr>\n    <tr>\n        <td>函数/构造函数</td>\n        <td>fn instanceof Function</td>\n    </tr>\n    <tr>\n        <td>构造函数实例</td>\n        <td>child instanceof parent</td>\n    </tr>\n    <tr>\n        <td>泛对象</td>\n        <td>obj instanceof Object</td>\n    </tr>\n    <tr>\n        <td>日期</td>\n        <td>value instanceof Date</td>\n    </tr>\n    <tr>\n        <td>正则表达式</td>\n        <td>value instanceof RegExp</td>\n    </tr>\n    <tr>\n        <td>数学</td>\n        <td>value instanceof Math</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"","tag":"(val as type) ","suffix":"","desc":"类型断言","url":"","summary":"","reference":"","dot":"#ffa500"}]},{"title":"类型转换/创建","fold":true,"list":[{"prefix":"","tag":"Number","suffix":"(val)","desc":"+数值运算符,-负值运算符","url":"","summary":"<table>\n    <tr>\n        <th>value</th>\n        <th>返回值</th>\n    </tr>\n    <tr>\n        <td>number/包含单个数值的数组</td>\n        <td>number</td>\n    </tr>\n    <tr>\n        <td>boolean</td>\n        <td>1 / 0</td>\n    </tr>\n    <tr>\n        <td>null/空字符串/空数组</td>\n        <td>0</td>\n    </tr>\n    <tr>\n        <td>undefined/string/object</td>\n        <td>NaN</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"","tag":"Boolean","suffix":"(val)","desc":"!取反运算符 !!布尔运算","url":"","summary":"0、-0、null、false、NaN、undefined、空字符串（\"\"）、document.all\n以上均生成值为false的Boolean对象\n注意，空数组（[]）和空对象（{}）对应的布尔值，都是true。","reference":"","dot":""},{"prefix":"","tag":"String","suffix":"(val)","desc":"+''加空字符串","url":"","summary":"<table>\n    <tr>\n        <th>value</th>\n        <th>返回值</th>\n    </tr>\n    <tr>\n        <td>数值</td>\n        <td>转为相应的字符串</td>\n    </tr>\n    <tr>\n        <td>字符串</td>\n        <td>转换后还是原来的值</td>\n    </tr>\n    <tr>\n        <td>布尔值</td>\n        <td>true转为\"true\"，false转为\"false\"</td>\n    </tr>\n    <tr>\n        <td>undefined</td>\n        <td>转为\"undefined\"</td>\n    </tr>\n    <tr>\n        <td>null</td>\n        <td>转为\"null\"</td>\n    </tr>\n    <tr>\n        <td>数组</td>\n        <td>返回该数组的字符串形式  \"1,2,3\"</td>\n    </tr>\n    <tr>\n        <td>对象</td>\n        <td>返回一个类型字符串 \"[object Object]\" <br>可通过toString方法来设置修改</td>\n    </tr>\n</table>","reference":"","dot":""},{"prefix":"","tag":"类型转换表","suffix":"","desc":"1.空数组/对象转为布尔为true\n2.字符串“0”转为布尔为true","url":"","summary":"<table>\n <tbody><tr>\n  <th>原始值</th>\n  <th>转换为数字</th>\n  <th>转换为字符串</th>\n  <th>转换为布尔值</th>\n </tr>\n <tr>\n  <td>false</td>\n  <td>0</td>\n  <td>\"false\"</td>\n  <td>false</td>\n </tr>\n <tr>\n  <td>true</td>\n  <td>1</td>\n  <td>\"true\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>0</td>\n  <td>0</td>\n  <td>\"0\"</td>\n  <td>false</td>\n </tr>\n <tr>\n  <td>1</td>\n  <td>1</td>\n  <td>\"1\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>\"0\"</td>\n  <td>0</td>\n  <td>\"0\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>\"000\"</td>\n  <td>0</td>\n  <td>\"000\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>\"1\"</td>\n  <td>1</td>\n  <td>\"1\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>NaN</td>\n  <td>NaN</td>\n  <td>\"NaN\"</td>\n  <td>false</td>\n </tr>\n <tr>\n  <td>Infinity</td>\n  <td>Infinity</td>\n  <td>\"Infinity\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>-Infinity</td>\n  <td>-Infinity</td>\n  <td>\"-Infinity\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>\"\"</td>\n  <td>0</td>\n  <td>\"\"</td>\n  <td>false</td>\n </tr>\n <tr>\n  <td>\"20\"</td>\n  <td>20</td>\n  <td>\"20\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>\"Runoob\"</td>\n  <td>NaN</td>\n  <td>\"Runoob\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>[ ]</td>\n  <td>0</td>\n  <td>\"\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>[20]</td>\n  <td>20</td>\n  <td>\"20\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>[10,20]</td>\n  <td>NaN</td>\n  <td>\"10,20\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>[\"Runoob\"]</td>\n  <td>NaN</td>\n  <td>\"Runoob\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>[\"Runoob\",\"Google\"]</td>\n  <td>NaN</td>\n  <td>\"Runoob,Google\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>function(){}</td>\n  <td>NaN</td>\n  <td>\"function(){}\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>{ }</td>\n  <td>NaN</td>\n  <td>\"[object Object]\"</td>\n  <td>true</td>\n </tr>\n <tr>\n  <td>null</td>\n  <td>0</td>\n  <td>\"null\"</td>\n  <td>false</td>\n </tr>\n <tr>\n  <td>undefined</td>\n  <td>NaN</td>\n  <td>\"undefined\"</td>\n  <td>false</td>\n </tr>\n</tbody></table>","reference":"类型转换表|https://www.runoob.com/js/js-type-conversion.html","dot":""}]}]},{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"var ","suffix":"x = val","desc":"1.变量会提升，在没有声明前调用，会输出undefined\n2.假设声明a、b、c,且c=a+b，且均为非引用类型，当ab发生变化时，c不会改变，应设为c=fn(return a+b)","url":"","summary":"","reference":"3种全局变量的异同|http://snandy.iteye.com/blog/720816","dot":""},{"prefix":"","tag":"let ","suffix":"x = val","desc":"申明一个块级作用域的变量 let i = 1;\n不能使用let重复定义一个变量 ","url":"","summary":"只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响，暂时性死区。","reference":"","dot":""},{"prefix":"","tag":"let x:type ","suffix":"= val","desc":"ts强类型：number,boolean,string,$enum\n数组：type[],Array<type>\n元组：[type1,type2]\n任意：any\n空值：void\n特殊：never","url":"","summary":"---------------\n元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 \n比如，你可以定义一对值分别为string和number类型的元组。\n```typescript\n// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n```\n\n某种程度上来说，void类型像是与any类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是void\n```typescript\nfunction warnUser(): void {\n    alert(\"This is my warning message\");\n}\n```\n\nnever类型表示的是那些永不存在的值的类型。 例如，never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是never类型，当它们被永不为真的类型保护所约束时。\n```typescript\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n\n// 推断的返回值类型为never\nfunction fail() {\n    return error(\"Something failed\");\n}\n\n// 返回never的函数必须存在无法达到的终点\nfunction infiniteLoop(): never {\n    while (true) {\n    }\n}\n```","reference":"","dot":"#ffa500"},{"prefix":"","tag":"const ","suffix":"x = val","desc":"const PI = 3.14\n一旦声明，常量的指针就不能改变（仅指针，非值本身）                   ","url":"","summary":"1.const来定义常量，在声明时就必须赋值。\n2.const与let都具有块级作用域。","reference":"","dot":""},{"prefix":"","tag":"globalThis ","suffix":"全局对象","desc":"","url":"","summary":"JavaScript 语言存在一个顶层对象，它提供全局环境（即全局作用域）\n1. 浏览器里面，顶层对象是**window**，但 Node 和 Web Worker 没有window。\n2. 浏览器和 Web Worker 里面，self也指向顶层对象，但是 Node 没有self。\n3. Node 里面，顶层对象是**global**，但其他环境都不支持。\n\n-------------------\n\n同一段代码为了能够在各种环境，都能取到顶层对象，现在一般是使用**this**变量，但是有局限性。\n1. 全局环境中，this会返回顶层对象。但是，Node 模块和 ES6 模块中，this返回的是当前模块。\n2. 函数里面的this，如果函数不是作为对象的方法运行，而是单纯作为函数运行，this会指向顶层对象。但是，严格模式下，这时this会返回undefined。\n3. 不管是严格模式，还是普通模式，new Function('return this')()，总是会返回全局对象。但是，如果浏览器用了 CSP（Content Security Policy，内容安全策略），那么eval、new Function这些方法都可能无法使用。\n\n-------------------\n\nES2020 在语言标准的层面，引入globalThis作为顶层对象。也就是说，任何环境下，globalThis都是存在的，都可以从它拿到顶层对象，指向全局环境下的this。","reference":"全局对象|http://es6.ruanyifeng.com/#docs/let#globalThis-%E5%AF%B9%E8%B1%A1","dot":"#66d9ef"},{"prefix":"Destructuring","tag":" ","suffix":"解构","desc":"解构赋值允许指定默认值。\nlet [x, y = 'b'] = ['a']; // x='a', y='b'","url":"http://es6.ruanyifeng.com/#docs/destructuring#%E7%94%A8%E9%80%94","summary":"","reference":"","dot":""}]},{"title":"运算符","fold":false,"list":[{"prefix":"","tag":"算术运算符","suffix":"","desc":"加法运算符：x + y\n减法运算符： x - y\n乘法运算符： x * y\n指数运算符：x ** y\n除法运算符：x / y\n余数运算符：x % y\n自增运算符：++x 或者 x++\n自减运算符：--x 或者 x--\n数值运算符： +x\n负数值运算符：-x","url":"","summary":"# + 加法\n1. 有字符串参与的都转为字符串拼接\n2. 对象的转换会先调用valueOf方法（返回自身），再调用toString方法\n特例：如果运算子是一个Date对象的实例，那么会优先执行toString方法。\n\n# % 余数\n运算结果的正负号由第一个运算子的正负号决定\n为了得到负数的正确余数值，可以先使用绝对值函数\n```javascript\n-1 % 2 // -1\n1 % -2 // 1\n```\n\n# ++ -- 自增/减运算符\n自增和自减运算符是仅有的两个具有副作用的运算符，其他运算符都不会改变变量的值。\n```javascript\nvar x = 1;\nvar y = 1;\nx++ // 1\n++y // 2\n```\nx是先返回当前值，然后自增，所以得到1；y是先自增，然后返回新的值，所以得到2。\n\n# 指数运算符\n注意，指数运算符是右结合，而不是左结合。即多个指数运算符连用时，先进行最右边的计算。\n```javascript\n// 相当于 2 ** (3 ** 2)\n2 ** 3 ** 2\n// 512\n```","reference":"","dot":""},{"prefix":"","tag":"关系运算符","suffix":"","desc":"\\> 大于运算符\n\\< 小于运算符\n>= 大于或等于运算符\n<= 小于或等于运算符\n== 相等运算符\n=== 严格相等运算符\n!= 不相等运算符\n!== 严格不相等运算符","url":"","summary":"# 特殊\n任何值（包括NaN本身）与NaN比较，返回的都是false。\n\n# 非严格比较\n1. 先将数据进行类型转换，然后再用严格相等运算符比较。\n2. 对于非相等的比较，算法是先看两个运算子是否都是字符串，如果是的，就按照字典顺序比较（实际上是比较 Unicode 码点）；\n3. 否则，将两个运算子都转成数值，再比较数值的大小。\n4. 对于两个对象的比较，大于或小于运算符比较的是值。（算法是先调用valueOf方法；如果返回的还是对象，再接着调用toString方法）\n\n# 严格比较\n1. 两个复合类型（对象、数组、函数）的数据比较时，不是比较它们的值是否相等，而是比较它们是否指向同一个地址。\n2. 特殊类型总是使用严格比较","reference":"特殊类型比较|https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Equality_comparisons_and_sameness\n比较运算符|http://wangdoc.com/javascript/operators/comparison.html","dot":""},{"prefix":"","tag":"逻辑运算符","suffix":"","desc":"取反运算符：!\n且运算符：&&\n或运算符：||\n三元运算符：?:","url":"","summary":"# 且运算符 && \n如果第一个运算子的布尔值为true，则返回第二个运算子的值（注意是值，不是布尔值）；\n如果第一个运算子的布尔值为false，则直接返回第一个运算子的值，且不再对第二个运算子求值。\n且运算符可以多个连用，这时返回第一个布尔值为false的表达式的值。如果所有表达式的布尔值都为true，则返回最后一个表达式的值。\n短路：多个接力执行\n\n# 或运算符 ||\n如果第一个运算子的布尔值为true，则返回第一个运算子的值，且不再对第二个运算子求值；\n如果第一个运算子的布尔值为false，则返回第二个运算子的值。\n或运算符可以多个连用，这时返回第一个布尔值为true的表达式的值。如果所有表达式都为false，则返回最后一个表达式的值。\n短路：备用默认值\n\n# 三元运算符 ?:\n通常来说，三元条件表达式与if...else语句具有同样表达效果，前者可以表达的，后者也能表达。但是两者具有一个重大差别，if...else是语句，没有返回值；三元条件表达式是表达式，具有返回值。所以，在需要返回值的场合（赋值），只能使用三元条件表达式，而不能使用if..else。在需要复杂的语句和逻辑时，使用流程控制而不是三元表达式。\n","reference":"布尔运算符|http://wangdoc.com/javascript/operators/boolean.html","dot":""},{"prefix":"","tag":"位运算符","suffix":"","desc":"| 按位或\n& 按位与\n~ 按位取反\n^ 按位异或\n\\<< 左移运算符 \n\n>> 右移运算符\n\n\\>>> 头部补零的右移运算符","url":"","summary":"1. 位运算符只对整数起作用，如果一个运算子不是整数，会自动转为整数后再执行。\n2. 在 JavaScript 内部，数值都是以64位浮点数的形式储存，但是做位运算的时候，是以32位带符号的整数进行运算的，并且返回值也是一个32位带符号的整数。\n```javascript\ni = i | 0; //将任意数值转为32位整数,舍去大于32位的数位,舍去小数\n~~2.9 //舍去小数取整\n```\n3. 左移运算符乘以2的指定次方，右移运算符除以2的指定次方\n4. >>> 查看一个负整数在计算机内部的储存形式\n\n----------------\n\n正整数的补码是其二进制表示，与原码相同\n求负整数的补码，将其原码除符号位外的所有位取反（0变1，1变0，符号位为1不变）后加1\n已知一个数的补码，求原码的操作其实就是对该补码再求补码","reference":"原码，反码，补码详解|https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/computercode.html","dot":""},{"prefix":"","tag":"赋值运算符","suffix":"","desc":"+= -= *= **= /= %= &= |= ^= <<= >>=","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"逗号运算符","suffix":"","desc":"逗号运算符用于对两个表达式求值，并返回后一个表达式的值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"void","suffix":"(exp)","desc":"void运算符的作用是执行一个表达式，然后不返回任何值，或者说返回undefined","url":"","summary":"","reference":"","dot":""}]},{"title":"流程控制","fold":false,"list":[{"prefix":"","tag":"if..else..","suffix":"","desc":"if(exp){...} //仅有一个语句时，可省略{}\nif(exp){...}else{...}\nif(exp){...}else if(exp){...}","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"switch","suffix":"","desc":"1.switch中的case为全等判断\n2.多个case使用同一个执行块应写为case 1: case2: ... \n3.每个case代码块内部的break不能少，否则会接着执行下一个case\n4.default用于在上面所有 case 都不为真时执行一个任务。\n```javascript\nswitch(x){\n    case val1 :\n        ...\n        break;\n    default :\n        ...\n}\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"x?y:z","suffix":"","desc":"仅可连接表达式，最终有一个返回值","url":"","summary":"","reference":"","dot":""}]},{"title":"循环语句","fold":false,"list":[{"prefix":"","tag":"while","suffix":"","desc":"while(exp){...}//仅有一个语句时，可省略{}","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"do..while","suffix":"","desc":"该循环会在检查条件是否为真之前执行一次代码块\n```javascript\ndo{\n    需要执行的代码\n}while(条件);\n```\nwhile语句后面的分号注意不要省略。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"for","suffix":"","desc":"设置循环变量的部分和循环体内部有各自单独的作用域，变量彼此不影响（使用let时）。\n```javascript\nfor (初始化表达式; 条件; 递增表达式) {\n    语句\n}\n```","url":"","summary":"初始化表达式（initialize）：确定循环变量的初始值，只在循环开始时执行一次。\n条件表达式（test）：每轮循环开始时，都要执行这个条件表达式，只有值为真，才继续进行循环。\n递增表达式（increment）：每轮循环的最后一个操作，通常用来递增循环变量。","reference":"","dot":""},{"prefix":"","tag":"break ","suffix":"[label]","desc":"不带参数时：break终止内层循环\n带参数时：break终止label处后面全部循环","url":"","summary":"标签也可以用于跳出代码块。\n```javascript\nfoo: {\n  console.log(1);\n  break foo;\n  console.log('本行不会输出');\n}\nconsole.log(2);\n// 1\n// 2\n```","reference":"","dot":""},{"prefix":"","tag":"continue ","suffix":"[label]","desc":"不带参数时：continue终止本轮循环（内层），返回循环结构的头部，开始下一轮循环\n带参数时：跳转至label后紧接的循环\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"label:","suffix":"","desc":"使用 break 或者 continue 来指出程序是否该停止循环还是继续循环","url":"","summary":"```javascript\ntop:\n  for (var i = 0; i < 3; i++){\n    for (var j = 0; j < 3; j++){\n      if (i === 1 && j === 1) continue top;\n      console.log('i=' + i + ', j=' + j);\n    }\n  }\n```","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"BOM","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model","summary":"","reference":"","dot":""},{"prefix":"","tag":"DOM","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model","summary":"","reference":"","dot":""},{"prefix":"","tag":"Web API","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/API","summary":"","reference":"","dot":""},{"prefix":"","tag":"Standard built-in objects","suffix":"","desc":"","url":"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects","summary":"","reference":"","dot":""},{"prefix":"","tag":"ES compatibility table","suffix":"","desc":"","url":"http://kangax.github.io/compat-table/es6/","summary":"","reference":"","dot":""},{"prefix":"","tag":"ECMAScript","suffix":"","desc":"","url":"https://tc39.es/ecma262/","summary":"","reference":"","dot":""}]},{"title":"教程指南","fold":false,"list":[{"prefix":"","tag":"ES5教程","suffix":"","desc":"","url":"https://wangdoc.com/javascript/index.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"ES6教程","suffix":"","desc":"","url":"http://es6.ruanyifeng.com/","summary":"","reference":"","dot":""},{"prefix":"","tag":"TS教程","suffix":"","desc":"","url":"https://typescript.bootcss.com/","summary":"","reference":"","dot":""}]}]}]}]}