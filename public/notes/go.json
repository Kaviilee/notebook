{"version":1581445539283,"name":"go","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"数据类型","fold":false,"list":[{"prefix":"","tag":"整型 ","suffix":"int","desc":"","url":"","summary":"类型|描述\n---|:--:|\nbyte|类似 uint8\nrune|类似 int32\nuint|32 或 64 位\nint|与 uint 一样大小\nuintptr|无符号整型，用于存放一个指针\nuint8|无符号 8 位整型 (0 到 255)\nuint16|无符号 16 位整型 (0 到 65535)\nuint32|无符号 32 位整型 (0 到 4294967295)\nuint64|无符号 64 位整型 (0 到 18446744073709551615)\nint8|有符号 8 位整型 (-128 到 127)\nint16|有符号 16 位整型 (-32768 到 32767)\nint32|有符号 32 位整型 (-2147483648 到 2147483647)\nint64|有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)","reference":"其它数字类型|https://www.runoob.com/go/go-data-types.html","dot":""},{"prefix":"","tag":"浮点型 ","suffix":"float64","desc":"支持复数","url":"","summary":"类型|描述\n---|:--:|\nfloat32|IEEE-754 32位浮点型数\nfloat64|IEEE-754 64位浮点型数\ncomplex64|32 位实数和虚数\ncomplex128|64 位实数和虚数","reference":"","dot":""},{"prefix":"","tag":"布尔型 ","suffix":"bool","desc":"值：true,false","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"字符串 ","suffix":"string +","desc":"字符串拼接符 +","url":"","summary":"字符串就是一串固定长度的字符连接起来的字符序列。\nGo 的字符串是由单个字节连接起来的。\nGo 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。","reference":"","dot":""},{"prefix":"","tag":"指针","suffix":"","desc":"var var_name *var-type\n在使用指针前你需要声明指针","url":"","summary":"","reference":"","dot":""}]},{"title":"类型检测","fold":false,"list":[{"prefix":"var","tag":".(type)","suffix":"","desc":"仅可用于type-switch","url":"","summary":"```go\nswitch x.(type){\n    case type:\n       statement(s);      \n    case type:\n       statement(s); \n    /* 你可以定义任意个数的case */\n    default: /* 可选 */\n       statement(s);\n}\n```","reference":"","dot":""}]}]},{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"var ","suffix":"x [type] = val","desc":"可以一次声明多个变量 var x1,x2 type","url":"","summary":"类型|初始化默认值\n---|:--:|\n数值类型（包括complex64/128）| 0\n布尔类型|false\n字符串|\"\"（空字符串）\n其它类型|nil\n\n---------------\n\n空白标识符 _ 也被用于抛弃值，如值 5 在：_, b = 5, 7 中被抛弃。\n_ 实际上是一个只写变量，你不能得到它的值。这样做是因为 Go 语言中你必须使用所有被声明的变量，但有时你并不需要使用从一个函数得到的所有返回值。","reference":"","dot":""},{"prefix":"","tag":"x ","suffix":":= val","desc":"声明一个变量，只能在函数体中出现","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"var ","suffix":"(x type ..)","desc":"这种因式分解关键字的写法一般用于声明全局变量","url":"","summary":"```\nvar (\n    a int\n    b bool\n)\n```","reference":"","dot":""},{"prefix":"","tag":"const ","suffix":"x [type] = val","desc":"定义常量","url":"","summary":"常量中的数据类型只可以是布尔型、数字型（整数型、浮点型和复数）和字符串型。","reference":"","dot":""},{"prefix":"","tag":"const ","suffix":"(x type ..)","desc":"定义多个常量","url":"","summary":"iota，特殊常量，可以认为是一个可以被编译器修改的常量。\niota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。","reference":"iota|https://www.runoob.com/go/go-constants.html","dot":""},{"prefix":"var ","tag":"x *type ","suffix":"= &var","desc":"指针使用流程：\n定义指针变量。\n为指针变量赋值。\n访问指针变量中指向地址的值。","url":"","summary":"当一个指针被定义后没有分配到任何变量时，它的值为 nil。\nnil 指针也称为空指针。","reference":"","dot":""}]},{"title":"运算符","fold":false,"list":[{"prefix":"","tag":"算术运算符","suffix":"","desc":"加法运算符：x + y\n减法运算符： x - y\n乘法运算符： x * y\n除法运算符：x / y\n余数运算符：x % y\n自增运算符：x++\n自减运算符：x--","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"关系运算符","suffix":"","desc":"\\> 大于运算符\n\\< 小于运算符\n>= 大于或等于运算符\n<= 小于或等于运算符\n== 相等运算符\n!= 不相等运算符","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"逻辑运算符","suffix":"","desc":"取反运算符：!\n且运算符：&&\n或运算符：||","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"位运算符","suffix":"","desc":"| 按位或\n& 按位与\n^ 按位异或\n\\<< 左移运算符 \n\n>> 右移运算符","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"赋值运算符","suffix":"","desc":"+= -= *= **= /= %= &= |= ^= <<= >>=","url":"","summary":"","reference":"","dot":""}]},{"title":"流程控制","fold":false,"list":[{"prefix":"","tag":"if..else..","suffix":"","desc":"if .. {}\nif ..{} else ..{}\nif ..{} else if.. {}\n表达式无需括号","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"switch","suffix":"","desc":"表达式无需括号\n可直接使用switch{ case exp1==exp2 : ..}","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"select","suffix":"","desc":"select 随机执行一个可运行的 case。如果没有 case 可运行，它将阻塞，直到有 case 可运行。一个默认的子句应该总是可运行的。\n```go\nselect{\n    case a :\n        statement;\n    default:\n        statement;\n}\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"循环语句","fold":false,"list":[{"prefix":"","tag":"for","suffix":"","desc":"和 C 语言的 for 一样 ```for init; condition; post { }```\n和 C 语言的 while 一样 ```for condition { }```\n和 C 的 for(;;) 一样 ```for { }```","url":"","summary":"init： 一般为赋值表达式，给控制变量赋初值；\ncondition： 关系表达式或逻辑表达式，循环控制条件；\npost： 一般为赋值表达式，给控制变量增量或减量。\nfor语句执行过程如下：\n1、先对表达式 1 赋初值；\n2、判别赋值表达式 init 是否满足给定条件，若其值为真，满足循环条件，则执行循环体内语句，然后执行 post，进入第二次循环，再判别 condition；否则判断 condition 的值为假，不满足条件，就终止for循环，执行循环体外语句。","reference":"","dot":""},{"prefix":"","tag":"break","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"continue","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"goto ","suffix":"label","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"label:","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"安装与编译","fold":false,"list":[{"prefix":"","tag":"go run ","suffix":"file","desc":"","url":"","summary":"","reference":"","dot":""}]}]}]}]}