{"version":1585048658556,"name":"bom","data":[{"column":[{"title":"Window","barcolor":"","fold":false,"box":[{"title":"事件","fold":false,"list":[{"prefix":"on","tag":"load","suffix":"","desc":"文档在浏览器窗口加载完毕时","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"unload","suffix":"","desc":"离开当前页面时\nbeforeunload ","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"focus","suffix":"","desc":"激活窗口，获得焦点","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"blur","suffix":"","desc":"失去焦点","url":"","summary":"","reference":"","dot":""}]},{"title":"窗口","fold":false,"list":[{"prefix":"window.","tag":"name","suffix":"","desc":"当前浏览器窗口的名字","url":"","summary":"只要浏览器窗口不关闭，这个属性是不会消失的。举例来说，访问a.com时，该页面的脚本设置了window.name，接下来在同一个窗口里面载入了b.com，新页面的脚本可以读到上一个网页设置的window.name。页面刷新也是这种情况。一旦浏览器窗口关闭后，该属性保存的值就会消失，因为这时窗口已经不存在了。","reference":"","dot":""},{"prefix":"window.","tag":"closed","suffix":"","desc":"检查当前窗口是否关闭\n`(popup !== null) && !popup.closed`","url":"","summary":"","reference":"","dot":""},{"prefix":"window.","tag":"opener","suffix":"","desc":"打开当前窗口的父窗口。如果当前窗口没有父窗口（即直接在地址栏输入打开），则返回null。","url":"","summary":"通过opener属性，可以获得父窗口的全局属性和方法，但只限于两个窗口同源的情况，且其中一个窗口由另一个打开。a元素添加rel=\"noopener\"属性，可以防止新打开的窗口获取父窗口，减轻被恶意网站修改父窗口 URL 的风险。","reference":"","dot":""},{"prefix":"window","tag":".open","suffix":"(url,name,opt)","desc":"打开一个新窗口,如果无法新建窗口，则返回null\n`var newWin = window.open('example.html', 'newWindow', 'height=400,width=400');`","url":"","summary":"strWindowFeatures是一个字符串值，这个值列出了将要打开的窗口的一些特性(窗口功能和工具栏) 。 字符串中不能包含任何空白字符，特性之间用逗号分隔开。对于那些可以打开和关闭的属性，设为yes或1或不设任何值就表示打开\n\nleft：新窗口距离屏幕最左边的距离（单位像素）。注意，新窗口必须是可见的，不能设置在屏幕以外的位置。\ntop：新窗口距离屏幕最顶部的距离（单位像素）。\nheight：新窗口内容区域的高度（单位像素），不得小于100。\nwidth：新窗口内容区域的宽度（单位像素），不得小于100。\nouterHeight：整个浏览器窗口的高度（单位像素），不得小于100。\nouterWidth：整个浏览器窗口的宽度（单位像素），不得小于100。\nmenubar：是否显示菜单栏。\ntoolbar：是否显示工具栏。\nlocation：是否显示地址栏。\npersonalbar：是否显示用户自己安装的工具栏。\nstatus：是否显示状态栏。\ndependent：是否依赖父窗口。如果依赖，那么父窗口最小化，该窗口也最小化；父窗口关闭，该窗口也关闭。\nminimizable：是否有最小化按钮，前提是dialog=yes。\nnoopener：新窗口将与父窗口切断联系，即新窗口的window.opener属性返回null，父窗口的window.open()方法也返回null。\nresizable：新窗口是否可以调节大小。\nscrollbars：是否允许新窗口出现滚动条。\ndialog：新窗口标题栏是否出现最大化、最小化、恢复原始大小的控件。\ntitlebar：新窗口是否显示标题栏。\nalwaysRaised：是否显示在所有窗口的顶部。\nalwaysLowered：是否显示在父窗口的底下。\nclose：新窗口是否显示关闭按钮。","reference":"MDN参考|https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open","dot":""},{"prefix":"window","tag":".close()","suffix":"","desc":"关闭当前窗口，一般只用来关闭window.open方法新建的窗口。\n`popup.close()`\n该方法只对顶层窗口有效，iframe框架之中的窗口使用该方法无效。","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".stop()","suffix":"","desc":"完全等同于单击浏览器的停止按钮，会停止加载图像、视频等正在或等待加载的对象。","url":"","summary":"","reference":"","dot":""}]},{"title":"组件","fold":false,"list":[{"prefix":"window","tag":".print()","suffix":"","desc":"跳出打印对话框，与用户点击菜单里面的“打印”命令效果相同。\n桌面设备（比如手机）可能没有打印功能，这时可以这样判断。\n`typeof window.print === 'function'`","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".alert","suffix":"(msg)","desc":"弹出的对话框，只有一个“确定”按钮，往往用来通知用户某些信息。","url":"","summary":"用户只有点击“确定”按钮，对话框才会消失。对话框弹出期间，浏览器窗口处于冻结状态，如果不点“确定”按钮，用户什么也干不了。参数只能是字符串，没法使用 CSS 样式，但是可以用\\n指定换行。","reference":"","dot":""},{"prefix":"window","tag":".prompt","suffix":"(msg,default)","desc":"弹出的对话框，提示文字的下方，还有一个输入框，要求用户输入信息，并有“确定”和“取消”两个按钮。它往往用来获取用户输入的数据。\n# 返回值\n+ 用户输入信息，并点击“确定”，则用户输入的信息就是返回值。\n+ 用户没有输入信息，直接点击“确定”，则输入框的默认值就是返回值。\n+ 用户点击了“取消”（或者按了 ESC 按钮），则返回值是null。","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".confirm","suffix":"(msg)","desc":"弹出一个对话框\n返回一个布尔值，如果用户点击“确定”，返回true；如果用户点击“取消”，则返回false。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"Frame","barcolor":"","fold":false,"box":[{"title":"父框架","fold":false,"list":[{"prefix":"window","tag":".self","suffix":"","desc":"window.self和window.window属性都指向窗口本身。这两个属性只读。","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".frames","suffix":"","desc":"返回一个类似数组的对象，成员为页面内所有框架窗口，包括frame元素和iframe元素。\n`window.frames[0]`表示页面中第一个框架窗口,是一个window对象","url":"","summary":"如果iframe元素设置了id或name属性，那么就可以用属性值，引用这个iframe窗口。比如`<iframe name=\"myIFrame\">`可以用frames['myIFrame']或者frames.myIFrame来引用。","reference":"","dot":""},{"prefix":"frame","tag":".contentWindow","suffix":"","desc":"获得iframe节点包含的window对象\n在满足同源限制的情况下，可以读取子窗口内部的属性。","url":"","summary":"","reference":"","dot":""},{"prefix":"frame","tag":".contentDocument","suffix":"","desc":"子窗口的document对象","url":"","summary":"","reference":"","dot":""}]},{"title":"子框架","fold":false,"list":[{"prefix":"window","tag":".parent","suffix":"","desc":"指向父窗口,如果当前窗口没有父窗口，window.parent指向自身。","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".top","suffix":"","desc":"指向最顶层窗口","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".frameElement","suffix":"","desc":"返回当前窗口所被嵌入的那个元素节点\n对于非嵌入的窗口，该属性等于null。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"postMessage","barcolor":"","fold":false,"box":[{"title":"postMessage","fold":false,"list":[{"prefix":"window","tag":".postMessage","suffix":"(val)","desc":"向window发送信息,不限制同源","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"message","suffix":"","desc":"双方监听消息事件","url":"","summary":"","reference":"","dot":""},{"prefix":"event","tag":".<prop>","suffix":"","desc":"event.data: 消息内容\nevent.source：发送消息的窗口\nevent.origin: 消息发向的网址","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Navigator","barcolor":"","fold":false,"box":[{"title":"代理","fold":false,"list":[{"prefix":"navigator","tag":".userAgent","suffix":"","desc":"返回浏览器的 User Agent 字符串，表示浏览器的厂商和版本信息。","url":"","summary":"","reference":"","dot":""},{"prefix":"navigator","tag":".platform","suffix":"","desc":"返回用户的操作系统信息，比如MacIntel、Win32、Linux x86_64等 。","url":"","summary":"","reference":"","dot":""},{"prefix":"navigator","tag":".language","suffix":"","desc":"浏览器的首选语言。该属性只读。\nnavigator.languages属性返回一个数组，表示用户可以接受的语言","url":"","summary":"","reference":"","dot":""}]},{"title":"地理","fold":false,"list":[{"prefix":"navigator","tag":".geolocation","suffix":"","desc":"返回一个 Geolocation 对象，包含用户地理位置的信息","url":"","summary":"","reference":"","dot":""},{"prefix":"geo","tag":".getCurrentPosition","suffix":"(suc(pos),fail(err),opt)","desc":"得到用户的当前位置","url":"","summary":"# opt\n+ enableHighAccuracy：布尔值，是否返回高精度结果。如果设为true，可能导致响应时间变慢或（移动设备的）功耗增加；反之，如果设为false，设备可以更快速地响应。默认值为false。\n+ timeout：正整数，表示等待查询的最长时间，单位为毫秒。默认值为Infinity。\n+ maximumAge：正整数，表示可接受的缓存最长时间，单位为毫秒。如果设为0，表示不返回缓存值，必须查询当前的实际位置；如果设为Infinity，必须返回缓存值，不管缓存了多少时间。默认值为0。","reference":"参考资料|https://wangdoc.com/webapi/geolocation.html","dot":""},{"prefix":"geo","tag":".watchPosition","suffix":"(suc(pos),fail(err),opt)","desc":"监听用户位置变化,返回一个id","url":"","summary":"","reference":"","dot":""},{"prefix":"geo","tag":".clearWatch","suffix":"(id)","desc":"取消watchPosition()方法指定的监听函数","url":"","summary":"","reference":"","dot":""},{"prefix":"pos","tag":".coords","suffix":"","desc":"coords属性指向一个对象，包含了用户的位置信息\ncoords.latitude：纬度\ncoords.longitude：经度\ncoords.accuracy：精度\ncoords.altitude：海拔\ncoords.altitudeAccuracy：海拔精度（单位：米）\ncoords.heading：以360度表示的方向\ncoords.speed：每秒的速度（单位：米）\n大多数桌面浏览器不提供上面列表的后四个值。","url":"","summary":"","reference":"","dot":""},{"prefix":"pos","tag":".timestamp","suffix":"","desc":"返回获得位置信息的具体时间","url":"","summary":"","reference":"","dot":""},{"prefix":"err.","tag":"code","suffix":"","desc":"geoError的参数也是一个event对象。event.code属性表示错误类型，有四个值\n0：未知错误，浏览器没有提示出错的原因，相当于常量event.UNKNOWN\\_ERROR。\n1：用户拒绝授权，相当于常量event.PERMISSION_DENIED。\n2：没有得到位置，GPS或其他定位机制无法定位，相当于常量event.POSITION\\_UNAVAILABLE。\n3：超时，GPS没有在指定时间内返回结果，相当于常量event.TIMEOUT。","url":"","summary":"","reference":"","dot":""},{"prefix":"err","tag":".message","suffix":"","desc":"字符串，表示错误的描述。","url":"","summary":"","reference":"","dot":""}]},{"title":"状态","fold":true,"list":[{"prefix":"navigator","tag":".onLine","suffix":"","desc":"返回一个布尔值，表示用户当前在线还是离线（浏览器断线）。\n有时，浏览器可以连接局域网，但是局域网不能连通外网。这时，有的浏览器的onLine属性会返回true，所以不能假定只要是true，用户就一定能访问互联网。不过，如果是false，可以断定用户一定离线。","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"offline","suffix":"","desc":"离线事件","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"online","suffix":"","desc":"上线事件","url":"","summary":"","reference":"","dot":""}]}]},{"title":"Location","barcolor":"","fold":false,"box":[{"title":"location","fold":false,"list":[{"prefix":"window","tag":".isSecureContext","suffix":"","desc":"返回一个布尔值，表示当前窗口是否处在加密环境。如果是 HTTPS 协议，就是true，否则就是false。","url":"","summary":"","reference":"","dot":""},{"prefix":"location","tag":".<prop>","suffix":"","desc":"+ location.href：整个 URL。\n+ location.origin：URL 的协议、主机名和端口。\n+ location.protocol：当前 URL 的协议，包括冒号（:）。\n+ location.host：主机。如果端口不是协议默认的80和433，则还会包括冒号（:）和端口。\n+ location.hostname：主机名，不包括端口。\n+ location.port：端口号。\n+ location.pathname：URL 的路径部分，从根路径/开始。\n+ location.search：查询字符串部分，从问号?开始。\n+ location.hash：片段字符串部分，从#开始。\n+ location.username：域名前面的用户名。\n+ location.password：域名前面的密码。\n只有origin属性是只读的，其他属性都可写\n","url":"","summary":"","reference":"","dot":""},{"prefix":"location","tag":".assign","suffix":"(url)","desc":"立刻跳转到新的 URL。如果参数不是有效的 URL 字符串，则会报错。","url":"","summary":"","reference":"","dot":""},{"prefix":"location","tag":".replace","suffix":"(url)","desc":"浏览器立刻跳转到新的 URL。\nreplace会在浏览器的浏览历史History里面删除当前网址，也就是说，一旦使用了该方法，后退按钮就无法回到当前网页了，相当于在浏览历史里面，使用新的 URL 替换了老的 URL。","url":"","summary":"","reference":"","dot":""},{"prefix":"location","tag":".reload","suffix":"([true])","desc":"重新加载当前网址，相当于按下浏览器的刷新按钮。\n它接受一个布尔值作为参数。如果参数为true，浏览器将向服务器重新请求这个网页，并且重新加载后，网页将滚动到头部（即scrollTop === 0）。如果参数是false或为空，浏览器将从本地缓存重新加载该网页，并且重新加载后，网页的视口位置是重新加载前的位置。","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"hashchange","suffix":"","desc":"变更锚点#","url":"","summary":"","reference":"","dot":""}]},{"title":"URL","fold":false,"list":[{"prefix":"","tag":"new URL","suffix":"(url)","desc":"创建一个url实例","url":"","summary":"","reference":"参考资料|https://wangdoc.com/javascript/bom/location.html#%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95","dot":""},{"prefix":"URL","tag":".createObjectURL","suffix":"(fileobj)","desc":"为上传/下载的文件、流媒体文件生成一个 URL 字符串。这个字符串代表了File对象或Blob对象的 URL。","url":"","summary":"```\n// HTML 代码如下\n// <div id=\"display\"/>\n// <input\n//   type=\"file\"\n//   id=\"fileElem\"\n//   multiple\n//   accept=\"image/*\"\n//   onchange=\"handleFiles(this.files)\"\n//  >\nvar div = document.getElementById('display');\n\nfunction handleFiles(files) {\n  for (var i = 0; i < files.length; i++) {\n    var img = document.createElement('img');\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n  }\n}\n```\n上面代码中，URL.createObjectURL()方法用来为上传的文件生成一个 URL 字符串，作为img元素的图片来源。\n该方法生成的 URL 就像下面的样子。\n`blob:http://localhost/c745ef73-ece9-46da-8f66-ebes574789b1`","reference":"","dot":""},{"prefix":"URL","tag":".revokeObjectURL","suffix":"(src)","desc":"释放URL.createObjectURL()方法生成的 URL 实例。它的参数就是URL.createObjectURL()方法返回的 URL 字符串。","url":"","summary":"```\nvar div = document.getElementById('display');\n\nfunction handleFiles(files) {\n  for (var i = 0; i < files.length; i++) {\n    var img = document.createElement('img');\n    img.src = window.URL.createObjectURL(files[i]);\n    div.appendChild(img);\n    img.onload = function() {\n      window.URL.revokeObjectURL(this.src);\n    }\n  }\n}\n```\n上面代码中，一旦图片加载成功以后，为本地文件生成的 URL 字符串就没用了，于是可以在img.onload回调函数里面，通过URL.revokeObjectURL()方法卸载这个 URL 实例。","reference":"","dot":""}]},{"title":"URLSearchParams","fold":false,"list":[{"prefix":"","tag":"new URLSearchParams","suffix":"(val)","desc":"构造、解析和处理 URL 的查询字符串.\n对查询字符串自动编码","url":"","summary":"```\n// 方法一：传入字符串\nvar params = new URLSearchParams('?foo=1&bar=2');\n// 等同于\nvar params = new URLSearchParams(document.location.search);\n\n// 方法二：传入数组\nvar params = new URLSearchParams([['foo', 1], ['bar', 2]]);\n\n// 方法三：传入对象\nvar params = new URLSearchParams({'foo' : 1 , 'bar' : 2});\n```","reference":"参考资料|https://wangdoc.com/javascript/bom/location.html#urlsearchparams-%E5%AF%B9%E8%B1%A1\nMDN|https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams","dot":""},{"prefix":"params","tag":".toString()","suffix":"","desc":"返回实例的字符串形式","url":"","summary":"```\nvar params = new URLSearchParams({version: 2.0});\nwindow.location.href = location.pathname + '?' + params;\n```\n上面代码中，location.href赋值时，可以直接使用params对象。这时就会自动调用toString方法。","reference":"","dot":""},{"prefix":"params","tag":".get","suffix":"(key)","desc":"读取查询字符串里面的指定键,不存在返回null\n`params.getAll()` 方法返回一个数组，成员是指定键的所有键值。\n","url":"","summary":"","reference":"","dot":""},{"prefix":"params","tag":".has","suffix":"(key)","desc":"返回一个布尔值，表示查询字符串是否包含指定的键名","url":"","summary":"","reference":"","dot":""},{"prefix":"params","tag":".append","suffix":"(key,val)","desc":"追加一个查询参数,没有返回值","url":"","summary":"","reference":"","dot":""},{"prefix":"params","tag":".set","suffix":"(key,val)","desc":"设置查询字符串的键值.如果是已经存在的键，键值会被改写，否则会被追加。","url":"","summary":"","reference":"","dot":""},{"prefix":"params","tag":".delete","suffix":"(key)","desc":"删除指定的查询参数","url":"","summary":"","reference":"","dot":""},{"prefix":"params","tag":".sort()","suffix":"","desc":"对查询字符串里面的键进行排序，规则是按照 Unicode 码点从小到大排列。","url":"","summary":"","reference":"","dot":""},{"prefix":"params","tag":".entries()","suffix":"","desc":"URLSearchParams实例有遍历器接口，可以用for...of循环遍历\nparams.keys()\nparams.values()\nparams.entries()","url":"","summary":"```\nvar params = new URLSearchParams({'foo': 1 , 'bar': 2});\n\nfor (var p of params) {\n  console.log(p[0] + ': ' + p[1]);\n}\n// foo: 1\n// bar: 2\n```","reference":"","dot":""}]}]},{"title":"History","barcolor":"","fold":false,"box":[{"title":"访问","fold":false,"list":[{"prefix":"history","tag":".length","suffix":"","desc":"当前窗口一共访问过的网址个数","url":"","summary":"","reference":"","dot":""},{"prefix":"history","tag":".back()","suffix":"","desc":"等同`history.go(-1)`\n移动到上一个网址，等同于点击浏览器的后退键。\n注意，移动到以前访问过的页面时，页面通常是从浏览器缓存之中加载，而不是重新要求服务器发送新的网页。","url":"","summary":"","reference":"","dot":""},{"prefix":"history","tag":".forward()","suffix":"","desc":"移动到下一个网址，等同于点击浏览器的前进键。","url":"","summary":"","reference":"","dot":""},{"prefix":"history","tag":".go","suffix":"(n)","desc":"接受一个整数作为参数，以当前网址为基准，移动到参数指定的网址，比如go(1)相当于forward()，go(-1)相当于back()。如果不指定参数，默认参数为0，相当于刷新当前页面。","url":"","summary":"","reference":"","dot":""}]},{"title":"记录","fold":false,"list":[{"prefix":"history","tag":".state","suffix":"","desc":"history 堆栈最上层的状态值","url":"","summary":"","reference":"参考资料|https://wangdoc.com/javascript/bom/history.html\nVue|https://juejin.im/post/5ceedf8ff265da1b80202841","dot":""},{"prefix":"history","tag":".pushState","suffix":"(state,title,path)","desc":"使用pushState()方法在浏览记录（History 对象）中添加一个新记录。\n不会触发页面刷新，只是导致 History 对象发生变化，地址栏会有反应。\n```\nvar stateObj = { foo: 'bar' };\nhistory.pushState(stateObj, 'page 2', '2.html');\n```","url":"","summary":"如果pushState的 URL 参数设置了一个新的锚点值（即hash），并不会触发hashchange事件。反过来，如果 URL 的锚点值变了，则会在 History 对象创建一条浏览记录。","reference":"","dot":""},{"prefix":"history","tag":".replaceState","suffix":"(state,title,path)","desc":"修改 History 对象的当前记录，其他都与pushState()方法一模一样","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"popstate","suffix":"","desc":"每当同一个文档的浏览历史（即history对象）出现变化时，就会触发popstate事件。","url":"","summary":"注意，仅仅调用pushState()方法或replaceState()方法 ，并不会触发该事件，只有用户点击浏览器倒退按钮和前进按钮，或者使用 JavaScript 调用History.back()、History.forward()、History.go()方法时才会触发。另外，该事件只针对同一个文档，如果浏览历史的切换，导致加载不同的文档，该事件也不会触发。\n\n回调函数的参数是一个event事件对象，它的state属性指向pushState和replaceState方法为当前 URL 所提供的状态对象（即这两个方法的第一个参数）。上面代码中的event.state，就是通过pushState和replaceState方法，为当前 URL 绑定的state对象。","reference":"","dot":""}]}]}]},{"column":[{"title":"Screen","barcolor":"","fold":false,"box":[{"title":"尺寸","fold":false,"list":[{"prefix":"screen","tag":".width|height","suffix":"","desc":"屏幕的宽度/高度（单位像素）","url":"","summary":"除非调整显示器的分辨率，否则这个值可以看作常量，不会发生变化。显示器的分辨率与浏览器设置无关，缩放网页并不会改变分辨率。","reference":"","dot":""},{"prefix":"screen","tag":".availWidth|availHeight","suffix":"","desc":"浏览器窗口可用的屏幕高度（单位像素）。\n因为部分空间可能不可用，比如系统的任务栏或者 Mac 系统屏幕底部的 Dock 区，这个属性等于height减去那些被系统组件的高度。","url":"","summary":"","reference":"","dot":""}]},{"title":"渲染","fold":false,"list":[{"prefix":"screen","tag":".pixelDepth","suffix":"","desc":"整数，表示屏幕的色彩位数，比如24表示屏幕提供24位色彩。","url":"","summary":"screen.colorDepth：screen.pixelDepth的别名。\n严格地说，colorDepth 表示应用程序的颜色深度，pixelDepth 表示屏幕的颜色深度，绝大多数情况下，它们都是同一件事。","reference":"","dot":""},{"prefix":"window","tag":".devicePixelRatio","suffix":"","desc":"返回一个数值，表示一个 CSS 像素的大小与一个物理像素的大小之间的比率。","url":"","summary":"也就是说，它表示一个 CSS 像素由多少个物理像素组成。它可以用于判断用户的显示环境，如果这个比率较大，就表示用户正在使用高清屏幕，因此可以显示较大像素的图片。","reference":"","dot":""}]},{"title":"方向","fold":false,"list":[{"prefix":"screen","tag":".orientation","suffix":"","desc":"返回一个对象，表示屏幕的方向。\n# type\n该对象的type属性是一个字符串，表示屏幕的具体方向，\n+ landscape-primary表示横放\n+ landscape-secondary表示颠倒的横放\n+ portrait-primary表示竖放\n+ portrait-secondary\n\n# angle\n角度\n\n# onchange\n当发生变化时","url":"","summary":"","reference":"","dot":""},{"prefix":"on","tag":"deviceorientation","suffix":"","desc":"旋转屏幕事件 `window.ondeviceorientation`\n# 事件对象\n+ beta 一个表示设备绕x轴旋转（范围在－180到180之间）的数字，从前到后的方向为正方向。\n+ gamma 一个表示设备绕y轴旋转（范围在－90到90之间）的数字，从左向右为正方向。\n+ alpha 一个表示设备绕z轴旋转的角度（范围在0-360之间）的数字\n+ absolute 用来说明设备是提供的旋转数据是否是绝对定位的布尔值。\n","url":"","summary":"","reference":"","dot":""}]}]},{"title":"Window","barcolor":"","fold":false,"box":[{"title":"尺寸","fold":false,"list":[{"prefix":"window","tag":".innerWidth|Height","suffix":"","desc":"返回网页在当前窗口中可见部分的高度和宽度，即“视口”（viewport）的大小（单位像素）。这两个属性只读。\n用户放大网页的时候（比如将网页从100%的大小放大为200%），这两个属性会变小。因为这时网页的像素大小不变（比如宽度还是960像素），只是每个像素占据的屏幕空间变大了，因为可见部分（视口）就变小了。\n注意，这两个属性值包括滚动条的高度和宽度。","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".outerWidth|Height","suffix":"","desc":"返回浏览器窗口的高度和宽度，包括浏览器菜单和边框（单位像素）。这两个属性只读。","url":"","summary":"","reference":"","dot":""}]},{"title":"位置","fold":false,"list":[{"prefix":"window","tag":".screenX|Y","suffix":"","desc":"返回浏览器窗口左上角相对于当前屏幕左上角的水平距离和垂直距离（单位像素）。这两个属性只读。","url":"","summary":"","reference":"","dot":""}]},{"title":"滚动","fold":false,"list":[{"prefix":"window","tag":".scrollX|Y","suffix":"","desc":"返回页面的水平/垂直滚动距离,这两个属性只读。\nwindow.pageXOffset属性和window.pageYOffset属性，是window.scrollX和window.scrollY别名。","url":"","summary":"注意，这两个属性的返回值不是整数，而是双精度浮点数。如果页面没有滚动，它们的值就是0。举例来说，如果用户向下拉动了垂直滚动条75像素，那么window.scrollY就是75左右。用户水平向右拉动水平滚动条200像素，window.scrollX就是200左右。","reference":"","dot":""},{"prefix":"window","tag":".scrollTo","suffix":"(x,y)","desc":"将文档滚动到指定位置。\n也可以接受一个配置对象作为参数\nwindow.scroll()方法是window.scrollTo()方法的别名。","url":"","summary":"配置对象options有三个属性。\ntop：滚动后页面左上角的垂直坐标，即 y 坐标。\nleft：滚动后页面左上角的水平坐标，即 x 坐标。\nbehavior：字符串，表示滚动的方式，有三个可能值（smooth、instant、auto），默认值为auto。\n```\nwindow.scrollTo({\n  top: 1000,\n  behavior: 'smooth'\n});\n```","reference":"","dot":""},{"prefix":"window","tag":".scrollBy","suffix":"(+x,+y)","desc":"将网页滚动指定距离（单位像素）。\n它接受两个参数：水平向右滚动的像素，垂直向下滚动的像素。\n`window.scrollBy(0, window.innerHeight)` 将网页向下滚动一屏","url":"","summary":"","reference":"","dot":""}]}]},{"title":"Element","barcolor":"","fold":false,"box":[{"title":"滚动","fold":false,"list":[{"prefix":"ele.","tag":"scrollTop","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"ele","tag":".scrollLeft","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"ele","tag":".scrollIntoView()","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Document","barcolor":"","fold":false,"box":[{"title":"事件","fold":false,"list":[{"prefix":"","tag":"DOMContentLoaded","suffix":"","desc":"DOMContentLoaded事件只有在 DOM 结构生成之后才会触发\n```\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n    console.log(document.body.innerHTML);\n});\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"基本","fold":false,"list":[{"prefix":"window.","tag":"document","suffix":"","desc":"只有来自同源的脚本才能读取这个属性","url":"","summary":"","reference":"","dot":""}]}]},{"title":"富文本","barcolor":"","fold":false,"box":[{"title":"富文本","fold":false,"list":[{"prefix":"window","tag":".getSelection()","suffix":"","desc":"返回一个Selection对象，表示用户现在选中的文本","url":"","summary":"","reference":"","dot":""},{"prefix":"selection","tag":".toString()","suffix":"","desc":"得到选中的文本","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Element","barcolor":"","fold":false,"box":[{"title":"样式","fold":false,"list":[{"prefix":"window","tag":".getComputedStyle","suffix":"(ele)","desc":"接受一个元素节点作为参数，返回一个包含该元素的最终样式信息的对象","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".matchMedia","suffix":"(ele)","desc":"检查 CSS 的mediaQuery语句","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"Perfomance","barcolor":"","fold":false,"box":[{"title":"重排回调","fold":false,"list":[{"prefix":"window","tag":".requestAnimationFrame","suffix":"(fn)","desc":"在下次重绘之前调用指定的回调函数更新动画。\n该方法需要传入一个回调函数作为参数，该回调函数会在浏览器下一次重绘之前执行\n返回一个ID","url":"","summary":"window.requestAnimationFrame()方法跟setTimeout类似，都是推迟某个函数的执行。不同之处在于，setTimeout必须指定推迟的时间，window.requestAnimationFrame()则是推迟到浏览器下一次重流时执行，执行完才会进行下一次重绘。重绘通常是 16ms 执行一次，不过浏览器会自动调节这个速率，比如网页切换到后台 Tab 页时，requestAnimationFrame()会暂停执行。","reference":"MDN|https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame","dot":""},{"prefix":"window","tag":".cancelAnimationFrame","suffix":"(id)","desc":"取消回调函数的执行","url":"","summary":"","reference":"MDN参考|https://developer.mozilla.org/zh-CN/docs/Web/API/Window/cancelAnimationFrame","dot":""}]},{"title":"空闲回调","fold":false,"list":[{"prefix":"window","tag":".requestIdleCallback","suffix":"(fn,deadline)","desc":"将某个函数推迟执行，但是它保证将回调函数推迟到系统资源空闲时执行\n`requestIdleCallback(callback, { timeout: 2000 });` 设定最大死线","url":"","summary":"","reference":"","dot":""},{"prefix":"window","tag":".cancelIdleCallback","suffix":"(id)","desc":"取消回调函数","url":"","summary":"","reference":"","dot":""}]}]}]}]}