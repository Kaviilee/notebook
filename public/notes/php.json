{"version":1583059621024,"name":"php","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"数据类型","fold":false,"list":[{"prefix":"","tag":"整型 ","suffix":"int","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"浮点型 ","suffix":"float","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"布尔型 ","suffix":"bool","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"字符串 ","suffix":"string .","desc":"字符串拼接符 .\n使用<<<EOF..EOF;定义大段字符串,自动解析变量,无需转义引号,无需指明换行符","url":"","summary":"```\n<<<EOF\n        <h1>我的第一个标题</h1>\n        <p>我的第一个段落。</p>\nEOF;\n```","reference":"","dot":""},{"prefix":"","tag":"空值 ","suffix":"null","desc":"NULL 值表示变量没有值。NULL 是数据类型为 NULL 的值。\n可以通过设置变量值为 NULL 来清空变量数据","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"数组 ","suffix":"array + ","desc":"array(v1,v2,..) 或 array(key=>val,..)\nx + y = x与y数组的合集\n非引用赋值，直接拷贝原数组","url":"","summary":"<table class=\"reference\" id=\"table2\">\n<tbody><tr>\n<th width=\"13%\" align=\"left\">运算符</th>\n<th width=\"20%\" align=\"left\">名称</th>\n<th width=\"67%\" align=\"left\">描述</th>\n</tr>\n<tr>\n<td>x + y</td>\n<td>集合</td>\n<td>x 和 y 的集合</td>\n</tr>\n<tr>\n<td>x == y</td>\n<td>相等</td>\n<td>如果 x 和 y 具有相同的键/值对，则返回 true</td>\n</tr>\n<tr>\n<td>x === y</td>\n<td>恒等</td>\n<td>如果 x 和 y 具有相同的键/值对，且顺序相同类型相同，则返回 true</td>\n</tr>\n<tr>\n<td>x != y</td>\n<td>不相等</td>\n<td>如果 x 不等于 y，则返回 true</td>\n</tr>\n<tr>\n<td>x &lt;&gt; y</td>\n<td>不相等</td>\n<td>如果 x 不等于 y，则返回 true</td>\n</tr>\n<tr>\n<td>x !== y</td>\n<td>不恒等</td>\n<td>如果 x 不等于 y，则返回 true</td>\n</tr>\n</tbody></table>","reference":"","dot":""},{"prefix":"","tag":"对象 ","suffix":"object","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"类型检测","fold":false,"list":[{"prefix":"","tag":"gettype","suffix":"(var)","desc":"获取变量的类型","url":"","summary":"","reference":"","dot":""},{"prefix":"obj ","tag":" instanceof ","suffix":"class","desc":"确定一个 PHP 变量是否属于某一类 class 的实例","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"is_$type","suffix":"(var)","desc":"is_array\t检测变量是否是数组\nis_bool\t检测变量是否是布尔型\nis_callable\t检测参数是否为合法的可调用结构\nis_double\tis_float 的别名\nis_float\t检测变量是否是浮点型\nis_int\t检测变量是否是整数\nis_integer\tis_int 的别名\nis_iterable\t检测变量的内容是否是一个可迭代的值\nis_long\tis_int 的别名\nis_null\t检测变量是否为 NULL\nis_numeric\t检测变量是否为数字或数字字符串\nis_object\t检测变量是否是一个对象\nis_real\tis_float 的别名\nis_resource\t检测变量是否为资源类型\nis_scalar\t检测变量是否是一个标量\nis_string\t检测变量是否是字符串","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"isset","suffix":"(var)","desc":"检测变量是否已设置并且非 NULL","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"empty","suffix":"(var)","desc":"检查一个变量是否为空","url":"","summary":"","reference":"","dot":""}]},{"title":"类型转换","fold":false,"list":[{"prefix":"","tag":"strval","suffix":"(var)","desc":"获取变量的字符串值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"settype","suffix":"(var,type)","desc":"设置变量的类型\ntype 的可能值为:\n\"boolean\" \n\"integer\" （或为\"int\"，从 PHP 4.2.0 起）\n\"float\" （只在 PHP 4.2.0 之后可以使用，对于旧版本中使用的\"double\"现已停用）\n\"string\"\n\"array\"\n\"object\"\n\"null\" （从 PHP 4.2.0 起）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"(type) ","suffix":"var","desc":"强制转换类型","url":"","summary":"","reference":"","dot":""}]}]},{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"$x ","suffix":"= val","desc":"函数外部定义的变量为全局变量，函数内部访问需指定global关键词。\n函数内部定义的变量为局部变量，仅函数内部可访问。\n默认变量为传值赋值。","url":"","summary":"在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字。\n在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问。","reference":"","dot":""},{"prefix":"$x = ","tag":"& ","suffix":"$y","desc":"引用赋值方式\n默认所有类型都是复值传递","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"global $x ","suffix":"","desc":"global 关键字用于函数内访问全局变量。\nPHP 将所有全局变量存储在一个名为 $GLOBALS[index] 的数组中。 index 保存变量的名称。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"static $x ","suffix":"= val","desc":"当一个函数完成时，它的所有变量通常都会被删除。然而，有时候您希望某个局部变量不要被删除。在第一次声明变量时使用 static 关键字，每次调用该函数时，该变量将会保留着函数前一次被调用时的值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"define","suffix":"(x,val)","desc":"定义常量\n常量在定义后，默认是全局变量，可以在整个运行的脚本的任何地方使用","url":"","summary":"name：必选参数，常量名称，即标志符。\nvalue：必选参数，常量的值。\ncase_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。","reference":"","dot":""},{"prefix":"","tag":"unset","suffix":"($x)","desc":"销毁给定的变量","url":"","summary":"","reference":"","dot":""}]},{"title":"运算符","fold":true,"list":[{"prefix":"","tag":"算术运算符","suffix":"","desc":"加法运算符：x + y\n减法运算符： x - y\n乘法运算符： x * y\n除法运算符：x / y  | intdiv(x,y)取整\n余数运算符：x % y | fmod(x,y)返回的是浮点型\n自增运算符：++x 或者 x++\n自减运算符：--x 或者 x--","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"赋值运算符","suffix":"","desc":"+= -= *= /= %= .=","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"关系运算符","suffix":"","desc":"\\> 大于运算符\n\\< 小于运算符\n>= 大于或等于运算符\n<= 小于或等于运算符\n== 相等运算符\n=== 严格相等运算符\n!= | <\\> 不相等运算符\n!== 严格不相等运算符","url":"","summary":"","reference":"类型比较表|https://www.runoob.com/php/php-types-comparisons.html","dot":""},{"prefix":"","tag":"逻辑运算符","suffix":"","desc":"取反运算符：!\n且运算符：&& 或 and\n或运算符：|| 或 or\n异或运算符：xor （如果 x 和 y 有且仅有一个为 true，则返回 true）\n三元运算符：x?y:z\nNULL合并运算符：??（PHP7+，等价提供默认值）\n组合比较符：<=> (PHP7+，太空船操作符）","url":"","summary":"$c = $a <=> $b;\n解析如下：\n如果 $a > $b, 则 $c 的值为 1。\n如果 $a == $b, 则 $c 的值为 0。\n如果 $a < $b, 则 $c 的值为 -1。","reference":"","dot":""}]},{"title":"流程控制","fold":true,"list":[{"prefix":"","tag":"if..else..","suffix":"","desc":"if(exp){..}\nif(exp){..}else{..}\nif(exp}{..}elseif(exp){..}\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"switch","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"x?y:z","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"循环语句","fold":true,"list":[{"prefix":"","tag":"while","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"do..while","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"for","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"foreach","suffix":"($arr as $k=>$v)","desc":"foreach 循环用于遍历数组。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"goto","suffix":"","desc":"跳转至对应label ","url":"","summary":"\nPHP 中的 goto 有一定限制，目标位置只能位于同一个文件和作用域，也就是说无法跳出一个函数或类方法，也无法跳入到另一个函数。也无法跳入到任何循环或者 switch 结构中。可以跳出循环或者 switch，通常的用法是用 goto 代替多层的 break。","reference":"","dot":""}]},{"title":"函数","fold":true,"list":[{"prefix":"","tag":"function","suffix":"","desc":"函数声明提前\n所有函数与类均为全局作用域","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"return","suffix":"","desc":"如果在一个函数中调用 return 语句，将立即结束此函数的执行并将它的参数作为函数的值返回。\n如果在全局范围中调用，则当前脚本文件中止运行。如果当前脚本文件是被 include 的或者 require 的，则控制交回调用文件。此外，如果当前脚本是被 include 的，则 return 的值会被当作 include 调用的返回值。如果在主脚本文件中调用 return，则脚本中止运行。","url":"","summary":"","reference":"","dot":""}]},{"title":"模块","fold":false,"list":[{"prefix":"","tag":"include|require ","suffix":"'file'","desc":"require 生成一个致命错误（E_COMPILE_ERROR），在错误发生后脚本会停止执行。\ninclude 生成一个警告（E_WARNING），在错误发生后脚本会继续执行。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"namespace ","suffix":"a\\b\\c","desc":"命名空间\n使用是可添加前缀","url":"","summary":"","reference":"","dot":""}]},{"title":"错误异常","fold":false,"list":[]},{"title":"调试测试","fold":false,"list":[{"prefix":"","tag":"var_dump","suffix":"(var,..)","desc":"输出变量的相关信息","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"die","suffix":"(msg)","desc":"输出一条消息，并退出当前脚本","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"sleep","suffix":"(s)","desc":"延迟执行当前脚本若干秒\nusleep(us) 微秒，一微秒等于一百万分之一秒","url":"","summary":"","reference":"","dot":""}]}]},{"title":"全局","barcolor":"","fold":false,"box":[{"title":"全局变量","fold":false,"list":[{"prefix":"","tag":"$GLOBALS","suffix":"['var']","desc":"$GLOBALS 是一个包含了全部变量的全局组合数组。变量的名字就是数组的键。\n默认函数外声明的变量都是全局变量，均可通过$GLOBALS['var']访问。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$_SERVER","suffix":"[key]","desc":"服务器环境变量数组","url":"https://www.php.net/manual/zh/reserved.variables.php","summary":"","reference":"参考资料|https://www.php.net/manual/zh/reserved.variables.php","dot":""},{"prefix":"","tag":"$_SERVER['REQUEST_URI']","suffix":"","desc":"访问此页面所需的 URI。例如，“/index.html”","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$_GET","suffix":"[name]","desc":"通过 URL 参数传递给当前脚本的变量的数组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$_POST","suffix":"[name]","desc":"当 HTTP POST 请求的 Content-Type 是 application/x-www-form-urlencoded 或 multipart/form-data 时，会将变量以关联数组形式传入当前脚本。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$_COOKIE","suffix":"[name]","desc":"通过 HTTP Cookies 方式传递给当前脚本的变量的数组。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$_SESSION","suffix":"[name]","desc":"当前脚本可用 SESSION 变量的数组。","url":"","summary":"","reference":"","dot":""}]},{"title":"魔术常量","fold":false,"list":[{"prefix":"","tag":"__FILE__","suffix":"","desc":"文件的完整路径和文件名。\n如果用在被包含文件中，则返回被包含的文件名。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__DIR__","suffix":"","desc":"文件所在的目录。\n如果用在被包括文件中，则返回被包括的文件所在的目录。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__LINE__","suffix":"","desc":"文件中的当前行号","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__NAMESPACE__","suffix":"","desc":"当前命名空间的名称（区分大小写）。\n此常量是在编译时定义的","url":"","summary":"","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"安装与环境","fold":false,"list":[{"prefix":"","tag":"php -S localhost:8888","suffix":"","desc":"PHP内置Web Server","url":"http://php.net/manual/zh/features.commandline.webserver.php","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"数值","barcolor":"","fold":false,"box":[{"title":"检测","fold":false,"list":[{"prefix":"","tag":"is_nan","suffix":"(val)","desc":"判断是否为非数值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"is_finite","suffix":"(val)","desc":"判断是否为有限值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"is_infinite","suffix":"(val)","desc":"判断是否为无限值","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"","tag":"base_convert","suffix":"(val,from,to)","desc":"按指定进制转换数字为字符串，范围2-36","url":"","summary":"bindec(val)\t把二进制数转换为十进制数。\ndecbin(val)\t把十进制数转换为二进制数。\ndechex(val)\t把十进制数转换为十六进制数。\ndecoct(val)\t把十进制数转换为八进制数。\nhexdec(val)\t把十六进制数转换为十进制数。\noctdec(val)\t把八进制数转换为十进制数。","reference":"函数参考|https://www.runoob.com/php/php-ref-math.html\n官方参考|https://www.php.net/manual/zh/book.math.php","dot":""}]},{"title":"表示","fold":false,"list":[{"prefix":"","tag":"number_format","suffix":"(val,fix)","desc":"fix指定小数位数，默认会转为千分位表现形式\n当fix未定义时，去掉小数并四舍五入","url":"","summary":"","reference":"参考资料|https://www.runoob.com/php/func-string-number-format.html","dot":""}]}]},{"title":"数学","barcolor":"","fold":false,"box":[{"title":"随机数","fold":false,"list":[{"prefix":"","tag":"rand","suffix":"([min,max])","desc":"返回一个（min,max之间,包含边界）随机数","url":"","summary":"getrandmax()\t返回通过调用 rand() 函数显示的随机数的最大可能值。\n\nlcg_value()\t返回范围为 (0, 1) 的一个伪随机数。\n\nmt_rand()\t使用 Mersenne Twister 算法生成随机整数。\nmt_srand()\t播种 Mersenne Twister 随机数生成器。\nmt_getrandmax()\t返回通过调用 mt_rand() 函数显示的随机数的最大可能值。","reference":"参考资料|https://www.runoob.com/php/func-math-rand.html","dot":""}]},{"title":"常用方法","fold":false,"list":[{"prefix":"","tag":"max","suffix":"(arr|val..)","desc":"返回一个数组中的最大值，或者几个指定值中的最大值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"min","suffix":"(arr|val..)","desc":"返回一个数组中的最小值，或者几个指定值中的最小值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"abs","suffix":"(val)","desc":"返回一个数的绝对","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"ceil","suffix":"(val)","desc":"向上舍入为最接近的整数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"floor","suffix":"(val)","desc":"向下舍入为最接近的整数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"round","suffix":"(val,fix)","desc":"对浮点数进行四舍五入。","url":"","summary":"","reference":"参考资料|https://www.runoob.com/php/func-math-round.html","dot":""},{"prefix":"","tag":"pow","suffix":"(x,y)","desc":"返回 x 的 y 次方。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"sqrt","suffix":"(val)","desc":"返回一个数的平方根","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":true,"list":[{"prefix":"","tag":"预定义常量","suffix":"","desc":"<table class=\"doctable table\">\n    <thead>\n     <tr>\n      <th>常量名</th>\n      <th>常量值</th>\n      <th>描述</th>\n     </tr>\n\n    </thead>\n\n    <tbody class=\"tbody\">\n     <tr>\n      <td>M_PI</td>\n      <td>3.14159265358979323846</td>\n      <td>Pi</td>\n     </tr>\n\n     <tr>\n      <td>M_E</td>\n      <td>2.7182818284590452354</td>\n      <td>e</td>\n     </tr>\n\n     <tr>\n      <td>M_LOG2E</td> \n      <td>1.4426950408889634074</td>\n      <td>log_2 e</td>\n     </tr>\n\n     <tr>\n      <td>M_LOG10E</td>\n      <td>0.43429448190325182765</td>\n      <td>log_10 e</td>\n     </tr>\n\n     <tr>\n      <td>M_LN2</td>   \n      <td>0.69314718055994530942</td>\n      <td>log_e 2</td>\n     </tr>\n\n     <tr>\n      <td>M_LN10</td>  \n      <td>2.30258509299404568402</td>\n      <td>log_e 10</td>\n     </tr>\n\n     <tr>\n      <td>M_PI_2</td>\n      <td>1.57079632679489661923</td>\n      <td>pi/2</td>\n     </tr>\n\n     <tr>\n      <td>M_PI_4</td>\n     <td>0.78539816339744830962</td>\n      <td>pi/4</td>\n     </tr>\n\n     <tr>\n      <td>M_1_PI</td>\n      <td>0.31830988618379067154</td>\n      <td>1/pi</td>\n     </tr>\n\n     <tr>\n      <td>M_2_PI</td>\n      <td>0.63661977236758134308</td>\n      <td>2/pi</td>\n     </tr>\n\n     <tr>\n      <td>M_SQRTPI</td>    \n      <td>1.77245385090551602729</td>\n      <td>sqrt(pi) [5.2.0]</td>\n     </tr>\n\n     <tr>\n      <td>M_2_SQRTPI</td>  \n      <td>1.12837916709551257390</td>\n      <td>2/sqrt(pi)</td>\n     </tr>\n\n     <tr>\n      <td>M_SQRT2</td> \n      <td>1.41421356237309504880</td>\n      <td>sqrt(2)</td>\n     </tr>\n\n     <tr>\n      <td>M_SQRT3</td> \n      <td>1.73205080756887729352</td>\n      <td>sqrt(3) [5.2.0]</td>\n     </tr>\n\n     <tr>\n      <td>M_SQRT1_2</td>   \n      <td>0.70710678118654752440</td>\n      <td>1/sqrt(2)</td>\n     </tr>\n\n     <tr>\n      <td>M_LNPI</td>  \n      <td>1.14472988584940017414</td>\n      <td>log_e(pi) [5.2.0]</td>\n     </tr>\n\n     <tr>\n      <td>M_EULER</td> \n      <td>0.57721566490153286061</td>\n      <td>Euler constant [5.2.0]</td>\n     </tr>\n\n    </tbody>\n  </table>","url":"","summary":"","reference":"参考资料|https://www.php.net/manual/zh/math.constants.php","dot":""},{"prefix":"","tag":"指数对数","suffix":"","desc":"exp(val)\t返回 Ex 的值。\nexpm1(val)\t返回 Ex - 1 的值。\nlog(val)\t返回一个数的自然对数（以 E 为底）。\nlog10(val)\t返回一个数的以 10 为底的对数。\nlog1p(val)\t返回 log(1+number)","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"三角函数","suffix":"","desc":"cos(val)\t返回一个数的余弦。\ncosh(val)\t返回一个数的双曲余弦。\nacos(val)\t返回一个数的反余弦。\nacosh(val)\t返回一个数的反双曲余弦。\n\nsin(val)\t返回一个数的正弦。\nsinh(val)\t返回一个数的双曲正弦。\nasin(val)\t返回一个数的反正弦。\nasinh(val)\t返回一个数的反双曲正弦。\n\ntan(val)\t返回一个数的正切。\ntanh(val)\t返回一个数的双曲正切。\natan(val)\t返回一个数的反正切。\natan2(val)\t返回两个变量 x 和 y 的反正切。\natanh(val)\t返回一个数的反双曲正切。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"几何","suffix":"","desc":"deg2rad(val)\t将角度值转换为弧度值。\nrad2deg(val)\t把弧度值转换为角度值。\nhypot(x,y)\t计算直角三角形的斜边长度。\npi()|M_PI\t返回圆周率 PI 的值。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"日期和时间","barcolor":"","fold":false,"box":[{"title":"创建","fold":false,"list":[{"prefix":"","tag":"time()","suffix":"","desc":"返回当前的 Unix 时间戳，单位秒，js中为毫秒","url":"","summary":"","reference":"函数参考|https://www.runoob.com/php/php-ref-date.html\n官方手册|https://www.php.net/manual/zh/refs.calendar.php","dot":""},{"prefix":"","tag":"strtotime","suffix":"(str)","desc":"将字符串 解析为 时间戳","url":"","summary":"```php\n<?php\n  echo strtotime(\"2016-7-8 19:15:0\");//获取2016年8月7日19时15分0秒的时间戳\n  echo strtotime(\"now\");//获取现在得时间戳\n  echo strtotime(\"+1 day\");//当前时间往后推一天的时间戳\n  echo strtotime(\"-1 day\");//当前时间往前推一天的时间戳\n?>\n```","reference":"","dot":""}]},{"title":"格式化","fold":false,"list":[{"prefix":"","tag":"date","suffix":"(format,[timestamp])","desc":"时间戳/当前时间 转为 格式化字符串\ndate(\"Y/m/d\") 或可用于查找指定值","url":"","summary":"","reference":"参考资料|https://www.runoob.com/php/php-date.html","dot":""}]}]}]},{"column":[{"title":"字符串","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"str","tag":"[i]","suffix":"","desc":"字符串索引字符访问","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"strlen","suffix":"(str)","desc":"返回字符串的长度（字节数）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"str_pad","suffix":"(str,len,val,type)","desc":"把字符串填充为新的长度\nSTR_PAD_BOTH - 填充字符串的两侧。如果不是偶数，则右侧获得额外的填充。\nSTR_PAD_LEFT - 填充字符串的左侧。\nSTR_PAD_RIGHT - 填充字符串的右侧。这是默认的。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"str_repeat","suffix":"(str,n)","desc":"把字符串重复指定的次数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"trim","suffix":"([val])","desc":"移除字符串两侧的空白字符或其他预定义字符\nltrim() - 移除字符串左侧的空白字符或其他预定义字符。\nrtrim() - 移除字符串右侧的空白字符或其他预定义字符。","url":"","summary":"可选。规定从字符串中删除哪些字符。如果省略该参数，则移除下列所有字符：\n\"\\0\" - NULL\n\"\\t\" - 制表符\n\"\\n\" - 换行\n\"\\x0B\" - 垂直制表符\n\"\\r\" - 回车\n\" \" - 空格","reference":"","dot":""},{"prefix":"","tag":"echo ","suffix":"str,..","desc":"可以输出一个或多个字符串, 没有返回值\nprint 只允许输出一个字符串，返回值总为 1","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"","tag":"strtoupper","suffix":"(str)","desc":"把字符串转换为大写字母","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"strtolower","suffix":"(str)","desc":"把字符串转换为小写字母","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"ucfirst","suffix":"(str)","desc":"把字符串中的首字符转换为大写","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"ucwords","suffix":"(str)","desc":"把字符串中每个单词的首字符转换为大写","url":"","summary":"","reference":"","dot":""}]},{"title":"拼割","fold":false,"list":[{"prefix":"","tag":"substr","suffix":"(str,i,[len])","desc":"根据索引切片字符串 | false\n索引支持复数从倒数位置开始","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"strstr","suffix":"(str,val,[type])","desc":"返回切片字符串 | 未找到返回false\nval为指定的字符，而非索引值\ntype默认为false，返回指定之后的字符串，指定为true时反之之前的内容\n\nstristr 不区分大小写","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"explode","suffix":"(val,str,[limit])","desc":"把字符串打散为数组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"implode","suffix":"(val,arr)","desc":"把数组元素组合为一个字符串\n别名join","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"preg_split","suffix":"(re,str)","desc":"通过一个正则表达式分割字符串为数组","url":"https://www.runoob.com/php/php-preg_split.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"str_split","suffix":"(str,n=1)","desc":"把字符串分割到数组中","url":"","summary":"如果 length 小于 1，str_split() 函数将返回 FALSE。 \n如果 length 大于字符串的长度，整个字符串将作为数组的唯一元素返回。","reference":"","dot":""}]},{"title":"查找","fold":false,"list":[{"prefix":"","tag":"strpos","suffix":"(str,val,[i])","desc":"返回值：一个匹配的字符位置 | false\nstrpos 区分大小写\nstripos 不区分大小写","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"strrpos","suffix":"(str,val,[i])","desc":"查找字符串在另一字符串中最后一次出现的位置（区分大小写）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"substr_count","suffix":"(str,val)","desc":"计算子串在字符串中出现的次数","url":"https://www.runoob.com/php/func-string-substr-count.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"count_chars","suffix":"(str,mode)","desc":"返回字符串所用字符的信息\nstrspn(str,val) 函数返回在字符串中包含 charlist 参数中指定的字符数目","url":"","summary":"0 - 数组，ASCII 值为键名，出现的次数为键值\n1 - 数组，ASCII 值为键名，出现的次数为键值，只列出出现次数大于 0 的值\n2 - 数组，ASCII 值为键名，出现的次数为键值，只列出出现次数等于 0 的值\n3 - 字符串，带有所有使用过的不同的字符\n4 - 字符串，带有所有未使用过的不同的字符","reference":"","dot":""}]},{"title":"排序","fold":false,"list":[{"prefix":"","tag":"str_shuffle","suffix":"(str)","desc":"随机地打乱字符串中的所有字符","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"strrev","suffix":"(str)","desc":"反转字符串","url":"","summary":"","reference":"","dot":""}]}]},{"title":"正则表达式","barcolor":"","fold":false,"box":[{"title":"匹配","fold":false,"list":[{"prefix":"","tag":"preg_match","suffix":"(val,str)","desc":"返回值：未匹配 0 | 有匹配 1\n```preg_match(\"/php/i\", \"PHP is the web scripting language of choice.\"```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"preg_match_all","suffix":"(val,str)","desc":"返回值：匹配的次数 | false（发生错误）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"preg_grep","suffix":"(re,arr,flag)","desc":"返回匹配模式的数组条目\nflag：如果设置为 PREG_GREP_INVERT，这个函数返回输入数组中与给定模式 pattern 不匹配的元素组成的数组。","url":"","summary":"","reference":"","dot":""}]},{"title":"替换","fold":false,"list":[{"prefix":"","tag":"str_replace","suffix":"(x,val,str,[i])","desc":"按内容替换：在str中将x替换为val，可用i统计次数\nstr_replace 区分大小写\nstr_ireplace 不区分大小写\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"substr_replace","suffix":"(x,val,start,[end])","desc":"按位置替换，从start到结尾的字符替换为val","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"preg_replace","suffix":"(re,val,str|arr)","desc":"通过一个正则表达式的搜索和替换\n目标如果为数组则返回数字，其余情况返回字符串","url":"","summary":"","reference":"","dot":""}]}]},{"title":"编码","barcolor":"","fold":false,"box":[{"title":"字符","fold":false,"list":[{"prefix":"","tag":"ord","suffix":"(str)","desc":"返回字符串中第一个字符的 ASCII 值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"chr","suffix":"(n)","desc":"从指定 ASCII 值返回字符","url":"","summary":"","reference":"","dot":""}]},{"title":"HTML","fold":false,"list":[{"prefix":"","tag":"htmlspecialchars","suffix":"(str)","desc":"把一些预定义的字符转换为 HTML 实体","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"htmlspecialchars_decode","suffix":"(str)","desc":"把一些预定义的 HTML 实体转换为字符。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"strip_tags","suffix":"(str)","desc":"剥去字符串中的 HTML 和 PHP 标签","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"parse_str","suffix":"(str,var)","desc":"把查询字符串解析为数组","url":"","summary":"```php\nparse_str(\"name=Peter&age=43\",$myArray);\n//Array ( [name] => Peter [age] => 43 )\n```","reference":"","dot":""},{"prefix":"","tag":"nl2br","suffix":"(str)","desc":"在字符串中的新行（\\n）之前插入换行符br","url":"","summary":"","reference":"","dot":""}]},{"title":"CSV","fold":false,"list":[{"prefix":"","tag":"str_getcsv","suffix":"(str)","desc":"解析 CSV 格式字段的字符串，并返回一个包含所读取字段的数组","url":"","summary":"string\t必需。规定要解析的字符串。\nseparator\t可选。设置字段分界符（只允许一个字符），默认值为逗号（ , ）。\nenclosure\t可选。设置字段环绕符（只允许一个字符），默认值为双引号（ \" ）。\nescape\t可选。设置转义字符（只允许一个字符），默认值为反斜线（ \\ ）。","reference":"","dot":""}]}]},{"title":"加密","barcolor":"","fold":false,"box":[{"title":"crypt","fold":false,"list":[{"prefix":"","tag":"crypt","suffix":"(str,salt)","desc":"单向的字符串加密法（hashing）","url":"https://www.runoob.com/php/func-string-crypt.html","summary":"","reference":"","dot":""}]},{"title":"MD5","fold":false,"list":[{"prefix":"","tag":"md5","suffix":"(str)","desc":"计算字符串的 MD5 散列。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"md5_file","suffix":"(file)","desc":"计算文件的 MD5 散列","url":"","summary":"```php\n<?php\n$filename = \"test.txt\";\n$md5file = md5_file($filename);\necho $md5file;\n?>\n//d41d8cd98f00b204e9800998ecf8427e\n```","reference":"","dot":""}]},{"title":"SHA1","fold":false,"list":[{"prefix":"","tag":"sha1","suffix":"(str)","desc":"计算字符串的 SHA-1 散列。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"sha1_file","suffix":"(file)","desc":"计算文件的 SHA-1 散列。","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"数组","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"arr","tag":"[i|key]","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"count|sizeof","suffix":"(arr)","desc":"返回数组的长度","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"range","suffix":"(m,n)","desc":"创建一个包含指定范围的元素的数组\n值起始值为m，结束值为n，索引自动从0创建","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"","tag":"serialize","suffix":"(arr|obj)","desc":"序列化对象或数组，并返回一个字符串\n```\nserialize(array('Google', 'Runoob', 'Facebook'));\na:3:{i:0;s:6:\"Google\";i:1;s:6:\"Runoob\";i:2;s:8:\"Facebook\";}\n```\n类型:总数:{i:索引;类型s:长度:值}","url":"","summary":"","reference":"","dot":"","title":"密码散列算法"},{"prefix":"","tag":"unserialize","suffix":"(str)","desc":"反序列化，并返回原始的对象结构","url":"","summary":"","reference":"","dot":""}]},{"title":"属性","fold":false,"list":[{"prefix":"","tag":"array_keys","suffix":"(arr)","desc":"返回数组中所有的键名","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_values","suffix":"(arr)","desc":"返回数组中所有的值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_count_values","suffix":"(arr)","desc":"统计数组中所有值出现的次数，返回一个val:n数组","url":"","summary":"","reference":"参考资料|https://www.runoob.com/php/func-array-count-values.html","dot":""}]},{"title":"拼割","fold":false,"list":[{"prefix":"","tag":"array_merge","suffix":"(arrs..)","desc":"把一个或多个数组合并为一个数组\n如果两个或更多个数组元素有相同的键名，则最后的元素会覆盖其他元素\narray_merge_recursive() 递归地把一个或多个数组合并为一个数组","url":"","summary":"","reference":"array_merge_recursive | https://www.runoob.com/php/func-array-merge-recursive.html","dot":""},{"prefix":"","tag":"array_slice","suffix":"(arr,start,len)","desc":"返回数组中的选定部分","url":"","summary":"","reference":"","dot":""}]},{"title":"增加","fold":false,"list":[{"prefix":"","tag":"array_push","suffix":"(arr,val..)","desc":"将一个或多个元素插入数组的末尾（入栈）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_unshift","suffix":"(arr,val..)","desc":"在数组开头插入一个或多个元素","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_pad","suffix":"(arr,len,val)","desc":"将指定数量的带有指定值的元素插入到数组中。","url":"","summary":"","reference":"","dot":""}]},{"title":"删除","fold":false,"list":[{"prefix":"","tag":"array_pop","suffix":"(arr)","desc":"删除数组中的最后一个元素（出栈）","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_shift","suffix":"(arr)","desc":"删除数组中的第一个元素，并返回被删除元素的值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_unique","suffix":"(arr)","desc":"去重，返回新的数组","url":"","summary":"","reference":"","dot":""}]},{"title":"修改","fold":false,"list":[{"prefix":"","tag":"array_splice","suffix":"(old,start,len,new)","desc":"把数组中的指定元素去掉并用其它值取代\n返回被移除元素的数组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_fill","suffix":"(i,n,val)","desc":"从i开始用val填充n个值","url":"","summary":"","reference":"","dot":""}]},{"title":"查找","fold":false,"list":[{"prefix":"","tag":"in_array","suffix":"(val,arr)","desc":"检查数组中是否存在指定的值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_key_exists","suffix":"(arr,key)","desc":"检查指定的键名是否存在于数组中","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_search","suffix":"(val,arr)","desc":"在数组中搜索给定的值，如果成功则返回相应的键名","url":"","summary":"","reference":"","dot":""}]},{"title":"排序","fold":false,"list":[{"prefix":"","tag":"sort","suffix":"(arr)","desc":"sort() - 对数组进行升序排列\nasort() - 根据关联数组的值，对数组进行升序排列\nksort() - 根据关联数组的键，对数组进行升序排列","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"rsort","suffix":"(arr)","desc":"rsort() - 对数组进行降序排列\narsort() - 根据关联数组的值，对数组进行降序排列\nkrsort() - 根据关联数组的键，对数组进行降序排列","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_reverse","suffix":"(arr)","desc":"将原数组中的元素顺序翻转，创建新的数组并返回","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"shuffle","suffix":"(arr)","desc":"把数组中的元素按随机顺序重新排列","url":"","summary":"","reference":"","dot":""}]},{"title":"遍历","fold":false,"list":[{"prefix":"","tag":"foreach","suffix":"(arr as $k=>$v)","desc":"遍历数组","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_map","suffix":"(\"fn\",arr..)","desc":"将用户自定义函数作用到给定数组的每个值上，返回新的数组。\n回调返回：新的值\nfn传入的是字符串，fn参数为val","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_walk","suffix":"(arr,\"fn\")","desc":"对数组中的每个元素应用用户自定义函数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_filter","suffix":"(arr,\"fn\")","desc":"过滤数组中的元素\n回调函数返回布尔","url":"","summary":"","reference":"","dot":""}]},{"title":"集合","fold":false,"list":[{"prefix":"arr ","tag":"+ ","suffix":"arr","desc":"并集","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_diff","suffix":"(arr1,arr2..)","desc":"差集，arr1中独有的元素\n\narray_diff()\t比较数组，返回两个数组的差集（只比较键值）。\narray_diff_assoc()\t比较数组，返回两个数组的差集（比较键名和键值）。\narray_diff_key()\t比较数组，返回两个数组的差集（只比较键名）。\narray_diff_uassoc()\t比较数组，返回两个数组的差集（比较键名和键值，使用用户自定义的键名比较函数）。\narray_diff_ukey()\t比较数组，返回两个数组的差集（只比较键名，使用用户自定义的键名比较函数）。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_intersect","suffix":"(arr1,arr2..)","desc":"交集\narray_intersect()\t比较数组，返回两个数组的交集（只比较键值）。\narray_intersect_assoc()\t比较数组，返回两个数组的交集（比较键名和键值）。\narray_intersect_key()\t比较数组，返回两个数组的交集（只比较键名）。\narray_intersect_uassoc()\t比较数组，返回两个数组的交集（比较键名和键值，使用用户自定义的键名比较函数）。\narray_intersect_ukey()\t比较数组，返回两个数组的交集（只比较键名，使用用户自定义的键名比较函数）。","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":false,"list":[{"prefix":"","tag":"array_flip","suffix":"(arr)","desc":"反转/交换数组中的键名和对应关联的键值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_chunk","suffix":"(arr,n)","desc":"分割为二维数组","url":"","summary":"","reference":"参考链接|https://www.runoob.com/php/func-array-chunk.html","dot":""},{"prefix":"","tag":"array_column","suffix":"(arr,key)","desc":"返回二维数组中对应key的值组成新的数组","url":"","summary":"","reference":"参考资料|https://www.runoob.com/php/func-array-column.html","dot":""},{"prefix":"","tag":"array_combine","suffix":"(karr,varr)","desc":"合并两个数组来创建一个新数组\n其中的一个数组元素为键名，另一个数组元素为键值","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"compact","suffix":"(var..)","desc":"创建一个包含变量名和它们的值的数组\n```php\n<?php\n$firstname = \"Peter\";\n$lastname = \"Griffin\";\n$age = \"41\";\n\n$result = compact(\"firstname\", \"lastname\", \"age\");\n\nprint_r($result);\nArray ( [firstname] => Peter [lastname] => Griffin [age] => 41 )\n?>\n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"list","suffix":"(var..) = arr","desc":"把数组中的值赋给一些数组变量\n```php\n<?php\n$my_array = array(\"Dog\",\"Cat\",\"Horse\");\n\nlist($a, , $c) = $my_array;\necho \"Here I only use the $a and $c variables.\";\n?>\n```","url":"","summary":"","reference":"","dot":""}]},{"title":"计算","fold":false,"list":[{"prefix":"","tag":"array_sum","suffix":"(arr)","desc":"返回数组中所有值的和","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"array_product","suffix":"(arr)","desc":"计算数组中所有值的乘积","url":"","summary":"","reference":"","dot":""}]}]},{"title":"JSON","barcolor":"","fold":false,"box":[{"title":"基本","fold":false,"list":[{"prefix":"","tag":"json_encode","suffix":"(data)","desc":"对变量进行 JSON 编码\n成功返回 JSON 数据，否则返回 FALSE","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"json_decode","suffix":"(json,[assoc])","desc":"对 JSON 格式的字符串进行解码，转换为 PHP 变量\nassoc=false 返回对象，设置为true时返回数组","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"HTTP","barcolor":"","fold":false,"box":[]},{"title":"过滤器","barcolor":"","fold":false,"box":[]},{"title":"密码散列算法","barcolor":"","fold":false,"box":[{"title":"Password Hash","fold":false,"list":[{"prefix":"","tag":"password_hash","suffix":"(pwd,algo)","desc":"创建密码的散列（hash）","url":"","summary":"PASSWORD_DEFAULT - 使用 bcrypt 算法 (PHP 5.5.0 默认)。 注意，该常量会随着 PHP 加入更新更高强度的算法而改变。 所以，使用此常量生成结果的长度将在未来有变化。 因此，数据库里储存结果的列可超过60个字符（最好是255个字符）。\nPASSWORD_BCRYPT - 使用 CRYPT_BLOWFISH 算法创建散列。 这会产生兼容使用 \"$2y$\" 的 crypt()。 结果将会是 60 个字符的字符串， 或者在失败时返回 FALSE。\nPASSWORD_ARGON2I - 使用 Argon2 散列算法创建散列。","reference":"","dot":""},{"prefix":"","tag":"password_verify","suffix":"(pwd,hash)","desc":"如果密码和散列值匹配则返回 TRUE，否则返回 FALSE","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"password_needs_rehash","suffix":"(hash,algo)","desc":"检测指定的散列值是否实现了提供的算法和选项。 如果没有，需要重新生成散列值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"password_get_info","suffix":"(pwd)","desc":"返回三个元素的关联数组：\nalgo: 匹配密码算法的常量。\nalgoName: 人类可读的算法名称。\noptions: 调用 password_hash() 时提供的选项。","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"文件","barcolor":"","fold":false,"box":[]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"其它","fold":false,"list":[{"prefix":"","tag":"图像处理","suffix":"","desc":"使用 PHP 图像处理函数，需要加载 GD 支持库。请确定 php.ini 加载了 GD 库","url":"https://www.runoob.com/php/php-image-gd.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"ZipFile","suffix":"","desc":"Zip File 函数允许您读取压缩文件。","url":"https://www.runoob.com/php/php-ref-zip.html","summary":"","reference":"","dot":""},{"prefix":"","tag":"cURL","suffix":"","desc":"","url":"https://www.runoob.com/php/php-ref-curl.html","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"面向对象","barcolor":"","fold":false,"box":[{"title":"类","fold":false,"list":[{"prefix":"","tag":"class ","suffix":"Name","desc":"定义类","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"__construct","suffix":"($args)","desc":"构造函数\n`__destruct()` 析构函数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"$this","suffix":"->key","desc":"实例","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"self","suffix":"::key","desc":"类本身\nself::静态属性/方法","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"const ","suffix":"NAME","desc":"类内部常量，无需$","url":"","summary":"","reference":"","dot":""}]},{"title":"修饰符","fold":false,"list":[{"prefix":"","tag":"public","suffix":"","desc":"public 公开","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"protected","suffix":"","desc":"protected 保护\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"private","suffix":"","desc":"private 私有\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"static","suffix":"","desc":"static 静态\n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"final","suffix":"","desc":"final 不可被子类覆盖","url":"","summary":"","reference":"","dot":""}]},{"title":"继承","fold":false,"list":[{"prefix":"sub  ","tag":"extends ","suffix":"parent","desc":"继承","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"abstract ","suffix":"class Name","desc":"抽象类\n定义为抽象的类不能被实例化。\n\n被定义为抽象的方法只是声明了其调用方式（参数），不能定义其具体的功能实现。\n\n继承一个抽象类的时候，子类必须定义父类中的所有抽象方法；另外，这些方法的访问控制必须和父类中一样（或者更为宽松）。例如某个抽象方法被声明为受保护的，那么子类中实现的方法就应该声明为受保护的或者公有的，而不能定义为私有的。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"parent","suffix":"","desc":"指代父类","url":"","summary":"","reference":"","dot":""}]},{"title":"接口","fold":false,"list":[{"prefix":"","tag":"interface ","suffix":"tpname","desc":"使用接口（interface），可以指定某个类必须实现哪些方法，但不需要定义这些方法的具体内容。\n接口是通过 interface 关键字来定义的，就像定义一个标准的类一样，但其中定义所有的方法都是空的。\n接口中定义的所有方法都必须是公有，这是接口的特性。","url":"","summary":"","reference":"","dot":""},{"prefix":"cls ","tag":"implements ","suffix":"tpname","desc":"实现接口","url":"","summary":"","reference":"","dot":""}]},{"title":"实例","fold":false,"list":[{"prefix":"","tag":"new ","suffix":"Name(arg)","desc":"生成实例","url":"","summary":"","reference":"","dot":""}]}]}]}]}