{"version":1582119735701,"name":"lua","data":[{"column":[{"title":"数据类型","barcolor":"","fold":false,"box":[{"title":"数据类型","fold":false,"list":[{"prefix":"","tag":"数字型 ","suffix":"number","desc":"表示双精度类型的实浮点数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"布尔型 ","suffix":"boolean","desc":"值：true,false","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"字符串 ","suffix":"string ..","desc":"字符串拼接符 ..\n可以用 2 个方括号 \"[[]]\" 来表示\"一块\"字符串。","url":"","summary":"```lua\nstring1 = \"this is string1\"\nstring2 = 'this is string2'\nhtml = [[\n<html>\n<head></head>\n<body>\n</body>\n</html>\n]]\n```","reference":"","dot":""},{"prefix":"","tag":"无效型 ","suffix":"nil","desc":"只有值nil属于该类，表示一个无效值","url":"","summary":"nil 作比较时应该加上双引号 \"\n```lua\ntype(X)\nnil\ntype(X)==nil\nfalse\ntype(X)==\"nil\"\ntrue\n```","reference":"","dot":""},{"prefix":"","tag":"表 ","suffix":"table","desc":"关联数组，索引可以是数字、字符串或表类型\ntab = {val1,val2,val3..}\ntab = {key1=val1,key2=val2,val3}\nLua 里表的默认初始索引一般以 1 开始\n访问 tab[i] 或 tab.i","url":"","summary":"```lua\n-- 创建一个空的 table\nlocal tbl1 = {}\n-- 直接初始表\nlocal tbl2 = {\"apple\", \"pear\", \"orange\", \"grape\"}\n```","reference":"","dot":""},{"prefix":"","tag":"函数 ","suffix":"function","desc":"由 C 或 Lua 编写的函数","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"线程 ","suffix":"thread","desc":"表示执行的独立线路，用于执行协同程序","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"C数据结构 ","suffix":"userdata","desc":"表示任意存储在变量中的C数据结构","url":"","summary":"","reference":"","dot":""}]}]},{"title":"语法","barcolor":"","fold":false,"box":[{"title":"声明与作用域","fold":false,"list":[{"prefix":"","tag":"X ","suffix":"= val","desc":"全局变量","url":"","summary":"在默认情况下，变量总是认为是全局的。\n全局变量不需要声明，给一个变量赋值后即创建了这个全局变量，访问一个没有初始化的全局变量也不会出错，只不过得到的结果是：nil。\n如果你想删除一个全局变量，只需要将变量赋值为nil。\n-------------\nLua 可以对多个变量同时赋值，变量列表和值列表的各个元素用逗号分开，赋值语句右边的值会依次赋给左边的变量。\nx, y = y, x                     -- swap 'x' for 'y'\n当变量个数和值的个数不一致时，Lua会一直以变量个数为基础采取以下策略：\na. 变量个数 > 值的个数             按变量个数补足nil\nb. 变量个数 < 值的个数             多余的值会被忽略","reference":"","dot":""},{"prefix":"","tag":"local ","suffix":"x = val","desc":"局部变量","url":"","summary":"Lua 中的变量全是全局变量，那怕是语句块或是函数里，除非用 local 显式声明为局部变量。\n局部变量的作用域为从声明位置开始到所在语句块结束。\n变量的默认值均为 nil。","reference":"","dot":""}]},{"title":"运算符","fold":false,"list":[{"prefix":"","tag":"算术运算符","suffix":"","desc":"加法运算符：x + y\n减法运算符： x - y\n乘法运算符： x * y\n除法运算符：x / y\n余数运算符：x % y | math.fmod(x,y)\n指数运算符：x ^ y\n负数值运算符：-x","url":"","summary":"y%x运算总是将y/x的值向下取整，而math.fmod(y,x)是将y/x的值向0取整","reference":"fmod与%区别|https://blog.csdn.net/sunline_wanghj/article/details/79490986","dot":""},{"prefix":"","tag":"关系运算符","suffix":"","desc":"\\> 大于运算符\n\\< 小于运算符\n>= 大于或等于运算符\n<= 小于或等于运算符\n== 相等运算符\n~= 不相等运算符","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"逻辑运算符","suffix":"","desc":"and 且运算符\nor 或运算符\nnot 取反运算符","url":"","summary":"","reference":"","dot":""}]},{"title":"流程控制","fold":false,"list":[{"prefix":"","tag":"if(exp)then..end","suffix":"","desc":"","url":"","summary":"```lua\nif(0)then\n    print(\"0 为 true\")\nend\n```","reference":"","dot":""},{"prefix":"","tag":"else..end","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"elseif(exp)then..end","suffix":"","desc":"","url":"","summary":"","reference":"","dot":""}]},{"title":"循环语句","fold":false,"list":[{"prefix":"","tag":"while(exp)do..end","suffix":"","desc":"","url":"","summary":"```lua\na=10\nwhile( a < 20 )\ndo\n   print(\"a 的值为:\", a)\n   a = a+1\nend\n```","reference":"","dot":""},{"prefix":"数值 ","tag":"for .. do .. end","suffix":"","desc":"```lua\nfor var=exp1,exp2,exp3 do  \n    <执行体>  \nend  \n```\nvar 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次 \"执行体\"。exp3 是可选的，如果不指定，默认为1。","url":"","summary":"```lua\nfor i=10,1,-1 do\n    print(i)\nend\n```","reference":"","dot":""},{"prefix":"泛型 ","tag":"for x in o do .. end","suffix":"","desc":"```lua\na = {\"one\", \"two\", \"three\"}\nfor i, v in ipairs(a) do\n    print(i, v)\nend \n```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"repeat .. untile(exp)","suffix":"","desc":"在条件进行判断前循环体都会执行一次","url":"","summary":"如果条件判断语句（condition）为 false，循环会重新开始执行，直到条件判断语句（condition）为 true 才会停止执行。\n```lua\n--[ 变量定义 --]\na = 10\n--[ 执行循环 --]\nrepeat\n   print(\"a的值为:\", a)\n   a = a + 1\nuntil( a > 15 )\n```","reference":"","dot":""}]}]},{"title":"其它","barcolor":"","fold":false,"box":[{"title":"参考资料","fold":false,"list":[{"prefix":"","tag":"Lua 5.3参考手册","suffix":"","desc":"","url":"https://www.runoob.com/manual/lua53doc/contents.html#index","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"数值","barcolor":"","fold":false,"box":[{"title":"检测","fold":false,"list":[{"prefix":"","tag":"math.type","suffix":"(x)","desc":"如果 x 是整数，返回 \"integer\"\n如果它是浮点数，返回 \"float\"\n如果 x 不是数字，返回 nil","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"","tag":"math.tointeger","suffix":"(x)","desc":"如果 x 可以转换为一个整数， 返回该整数。 否则返回 nil。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"数学","barcolor":"","fold":false,"box":[{"title":"随机数","fold":false,"list":[{"prefix":"","tag":"math.random","suffix":"([min[,max]])","desc":"当不带参数调用时， 返回一个 [0,1) 区间内一致分布的浮点伪随机数。 \n当以两个整数 m 与 n 调用时， math.random 返回一个 [m, n] 区间 内一致分布的整数伪随机数。（值 m-n 不能是负数，且必须在 Lua 整数的表示范围内。） \n调用 math.random(n) 等价于 math.random(1,n)。","url":"","summary":"math.randomseed (x) 把 x 设为伪随机数发生器的“种子”： 相同的种子产生相同的随机数列。","reference":"","dot":""}]},{"title":"常用方法","fold":false,"list":[{"prefix":"","tag":"math.max","suffix":"(val,..)","desc":"返回参数中最大的值， 大小由 Lua 操作 < 决定。 (integer/float)","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.min","suffix":"(val,..)","desc":"返回参数中最小的值， 大小由 Lua 操作 < 决定。 (integer/float)","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.ult","suffix":"(m,n)","desc":"如果整数 m 和 n 以无符号整数形式比较， m 在 n 之下，返回布尔真否则返回假。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.abs","suffix":"(x)","desc":"返回 x 的绝对值。(integer/float)","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.ceil","suffix":"(x)","desc":"返回不小于 x 的最小整数值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.floor","suffix":"(x)","desc":"返回不大于 x 的最大整数值。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.modf","suffix":"(x)","desc":"返回 x 的整数部分和小数部分。 第二个结果一定是浮点数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"math.sqrt","suffix":"(x)","desc":"返回 x 的平方根。 （你也可以使用乘方 x^0.5 来计算这个值。）","url":"","summary":"","reference":"","dot":""}]},{"title":"其它","fold":true,"list":[{"prefix":"","tag":"预定义常量","suffix":"","desc":"math.pi π 的值。\nmath.huge 浮点数 HUGE_VAL， 这个数比任何数字值都大。\nmath.maxinteger 最大值的整数。\nmath.mininteger 最小值的整数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"指数对数","suffix":"","desc":"math.exp (x) 返回 ex 的值 （e 为自然对数的底）。\nmath.log (x [, base=e]) 返回以指定底的 x 的对数。","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"三角函数","suffix":"","desc":"math.cos (x) 返回 x 的余弦（假定参数是弧度）。\nmath.acos (x) 返回 x 的反余弦值（用弧度表示）。\n\nmath.sin (x) 返回 x 的正弦值（假定参数是弧度）。\nmath.asin (x) 返回 x 的反正弦值（用弧度表示）。\n\nmath.tan (x) 返回 x 的正切值（假定参数是弧度）。\nmath.atan (y [, x]) 返回 y/x 的反正切值（用弧度表示）。 \n","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"几何","suffix":"","desc":"math.deg (x) 将角 x 从弧度转换为角度。\nmath.rad (x) 将角 x 从角度转换为弧度。","url":"","summary":"","reference":"","dot":""}]}]},{"title":"日期和时间","barcolor":"","fold":false,"box":[{"title":"创建/格式化","fold":false,"list":[{"prefix":"","tag":"os.time","suffix":"([table])","desc":"当不传参数时，返回当前时间戳（秒），js为毫秒\n如果传入一张表，就返回由这张表表示的时刻。","url":"","summary":"这张表必须包含域 year，month，及 day； 可以包含有　hour （默认为 12 ）， min （默认为 0）， sec （默认为 0），以及 isdst （默认为 nil）。 \n","reference":"","dot":""},{"prefix":"","tag":"os.date","suffix":"(format,[timestamp])","desc":"返回一个包含日期及时刻的字符串或表。\n如果提供了 time 参数， 格式化这个时间。 否则，date 格式化当前时间。","url":"","summary":"如果format以 “!” 开头，则按格林尼治时间进行格式化。\n\n如果format是一个 “t” ，将返一个带year(4位)，month(1-12)， day (1--31)， hour (0-23)， min (0-59)，sec (0-61)，wday (星期几， 星期天为1)， yday (年内天数)和isdst (是否为日光节约时间true/false)的带键名的表;\n\n如果format不是 “t” ，os.date会将日期格式化为一个字符串，具体如下：\n<table>\n<thead>\n<tr class=\"header\">\n<th>格式符</th>\n<th>含义</th>\n<th>具体示例</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>%a</td>\n<td>一星期中天数的简写</td>\n<td>os.date(\"%a\") =&gt; Fri</td>\n</tr>\n<tr class=\"even\">\n<td>%A</td>\n<td>一星期中天数的全称</td>\n<td>(Wednesday)</td>\n</tr>\n<tr class=\"odd\">\n<td>%b</td>\n<td>月份的简写</td>\n<td>(Sep)</td>\n</tr>\n<tr class=\"even\">\n<td>%B</td>\n<td>月份的全称</td>\n<td>(May)</td>\n</tr>\n<tr class=\"odd\">\n<td>%c</td>\n<td>日期和时间</td>\n<td>(09/16/98 23:48:10)</td>\n</tr>\n<tr class=\"even\">\n<td>%d</td>\n<td>一个月中的第几天</td>\n<td>(28)[0 - 31]</td>\n</tr>\n<tr class=\"odd\">\n<td>%H</td>\n<td>24小时制中的小时数</td>\n<td>(18)[00 - 23]</td>\n</tr>\n<tr class=\"even\">\n<td>%I</td>\n<td>12小时制中的小时数</td>\n<td>(10)[01 - 12]</td>\n</tr>\n<tr class=\"odd\">\n<td>%j</td>\n<td>一年中的第几天</td>\n<td>(209) [01 - 366]</td>\n</tr>\n<tr class=\"even\">\n<td>%M</td>\n<td>分钟数</td>\n<td>(48)[00 - 59]</td>\n</tr>\n<tr class=\"odd\">\n<td>%m</td>\n<td>月份数</td>\n<td>(09)[01 - 12]</td>\n</tr>\n<tr class=\"even\">\n<td>%P</td>\n<td>上午或下午</td>\n<td>(pm)[am - pm]</td>\n</tr>\n<tr class=\"odd\">\n<td>%S</td>\n<td>一分钟之内秒数</td>\n<td>(10)[00 - 59]</td>\n</tr>\n<tr class=\"even\">\n<td>%w</td>\n<td>一星期中的第几天</td>\n<td>(3)[0 - 6 = 星期天 - 星期六]</td>\n</tr>\n<tr class=\"odd\">\n<td>%W</td>\n<td>一年中的第几个星期</td>\n<td>(2)0 - 52</td>\n</tr>\n<tr class=\"even\">\n<td>%x</td>\n<td>日期</td>\n<td>(09/16/98)</td>\n</tr>\n<tr class=\"odd\">\n<td>%X</td>\n<td>时间</td>\n<td>(23:48:10)</td>\n</tr>\n<tr class=\"even\">\n<td>%y</td>\n<td>两位数的年份</td>\n<td>(16)[00 - 99]</td>\n</tr>\n<tr class=\"odd\">\n<td>%Y</td>\n<td>完整的年份</td>\n<td>(2016)</td>\n</tr>\n<tr class=\"even\">\n<td>%%</td>\n<td>字符串'%'</td>\n<td>(%)</td>\n</tr>\n<tr class=\"odd\">\n<td>*t</td>\n<td>返回一个table，里面包含全部的数据</td>\n<td>hour 14</td>\n</tr>\n</tbody>\n</table>","reference":"参考资料|https://www.cnblogs.com/zhaoqingqing/p/9892694.html","dot":""}]}]}]},{"column":[{"title":"字符串","barcolor":"","fold":false,"box":[{"title":"基础","fold":false,"list":[{"prefix":"","tag":"string.len(str)","suffix":"","desc":"\\#str|table 返回字符串或表的长度\n内嵌零和特殊字符也统计在内","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"string.rep","suffix":"(str,n)","desc":"返回字符串string的n个拷贝","url":"","summary":"","reference":"","dot":""}]},{"title":"转换","fold":false,"list":[{"prefix":"","tag":"string.upper","suffix":"(str)","desc":"字符串全部转为大写字母","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"string.lower","suffix":"(str)","desc":"字符串全部转为小写字母","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"string.format","suffix":"(str,val)","desc":"返回一个类似printf的格式化字符串\n```string.format(\"the value is:%d\",4)```","url":"","summary":"格式字符串可能包含以下的转义码:\n%c - 接受一个数字, 并将其转化为ASCII码表中对应的字符\n%d, %i - 接受一个数字并将其转化为有符号的整数格式\n%o - 接受一个数字并将其转化为八进制数格式\n%u - 接受一个数字并将其转化为无符号整数格式\n%x - 接受一个数字并将其转化为十六进制数格式, 使用小写字母\n%X - 接受一个数字并将其转化为十六进制数格式, 使用大写字母\n%e - 接受一个数字并将其转化为科学记数法格式, 使用小写字母e\n%E - 接受一个数字并将其转化为科学记数法格式, 使用大写字母E\n%f - 接受一个数字并将其转化为浮点数格式\n%g(%G) - 接受一个数字并将其转化为%e(%E, 对应%G)及%f中较短的一种格式\n%q - 接受一个字符串并将其转化为可安全被Lua编译器读入的格式\n%s - 接受一个字符串并按照给定的参数格式化该字符串\n\n为进一步细化格式, 可以在%号后添加参数. 参数将以如下的顺序读入:\n(1) 符号: 一个+号表示其后的数字转义符将让正数显示正号. 默认情况下只有负数显示符号.\n(2) 占位符: 一个0, 在后面指定了字串宽度时占位用. 不填时的默认占位符是空格.\n(3) 对齐标识: 在指定了字串宽度时, 默认为右对齐, 增加-号可以改为左对齐.\n(4) 宽度数值\n(5) 小数位数/字串裁切: 在宽度数值后增加的小数部分n, 若后接f(浮点数转义符, 如%6.3f)则设定该浮点数的小数只保留n位, 若后接s(字符串转义符, 如%5.3s)则设定该字符串只显示前n位.","reference":"","dot":""}]},{"title":"切片","fold":false,"list":[{"prefix":"","tag":"string.sub","suffix":"(str,start,[end])","desc":"提取start~end之间的字符串，支持负数","url":"","summary":"","reference":"","dot":""}]},{"title":"查找","fold":false,"list":[{"prefix":"","tag":"string.find","suffix":"(str,pattern,[start,[end]])","desc":"查找字符串，返回索引\n不存在则返回 nil","url":"","summary":"","reference":"","dot":""}]},{"title":"排序","fold":false,"list":[{"prefix":"","tag":"string.reverse","suffix":"(str)","desc":"字符串反转","url":"","summary":"","reference":"","dot":""}]},{"title":"匹配","fold":false,"list":[{"prefix":"","tag":"string.gmatch","suffix":"(str,pattern)","desc":"返回一个迭代器函数。\n```for word in string.gmatch(\"Hello Lua user\", \"%a+\") do print(word) end```","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"string.match","suffix":"(str,pattern,[i])","desc":"在字符串 s 中找到第一个能用 pattern匹配到的部分\n如果能找到，match 返回其中的捕获物； 否则返回 nil 。","url":"","summary":"","reference":"","dot":""}]},{"title":"替换","fold":false,"list":[{"prefix":"","tag":"string.gsub","suffix":"(str,pattern,val,[n])","desc":"将字符串中所有的（或是在 n 给出时的前 n 个） pattern 都替换成val并返回其副本。","url":"","summary":"","reference":"参考资料|https://www.runoob.com/manual/lua53doc/manual.html#pdf-string.gsub","dot":""}]},{"title":"Pattern","fold":false,"list":[{"prefix":"","tag":"pattern","suffix":"","desc":"x: 表示字符 x 自身（这里 x 不能是 魔法字符 ^$()%.[]*+-? 中的一员） 。\n.: （一个点）可表示任何字符。\n%g: 表示任何除空白符外的可打印字符。\n%a: 表示任何字母。\n%d: 表示任何数字。\n%s: 表示所有空白字符\n%c: 表示任何控制字符。","url":"","summary":"%p: 表示所有标点符号。\n%l: 表示所有小写字母。\n%u: 表示所有大写字母。\n%w: 表示所有字母及数字。\n%x: 表示所有 16 进制数字符号。\n%x: 表示字符 x（这里的 x 是任意非字母或数字的字符）。 这是对魔法字符转义的标准方法。 所有非字母或数字的字符 （包括所有标点，也包括非魔法字符） 都可以用前置一个 '%' 放在模式串中表示自身。\n[set]: 表示 set　中所有字符的联合。 可以以 '-' 连接，升序书写范围两端的字符来表示一个范围的字符集。 上面提到的 %x 形式也可以在 set 中使用 表示其中的一个元素。 其它出现在 set 中的字符则代表它们自己。 例如，[%w_] （或 [_%w]） 表示所有的字母数字加下划线）， [0-7] 表示 8 进制数字， [0-7%l%-]　表示 8 进制数字加小写字母与 '-' 字符。\n交叉使用类和范围的行为未定义。 因此，像 [%a-z] 或 [a-%%] 这样的模式串没有意义。\n[^set]: 表示 set 的补集， 其中 set 如上面的解释。\n所有单个字母表示的类别（%a，%c，等）， 若将其字母改为大写，均表示对应的补集。 例如，%S 表示所有非空格的字符。\n\n如何定义字母、空格、或是其他字符组取决于当前的区域设置。 特别注意：[a-z]　未必等价于 %l 。","reference":"参考资料|https://www.runoob.com/manual/lua53doc/manual.html#6.4.1","dot":""}]}]},{"title":"编码","barcolor":"","fold":false,"box":[{"title":"字符","fold":false,"list":[{"prefix":"","tag":"string.byte","suffix":"(str,[i])","desc":"转换字符为整数值(可以指定某个字符，默认第一个字符)\ni默认为1，不存在时返回nil","url":"","summary":"","reference":"","dot":""},{"prefix":"","tag":"string.char","suffix":"(n)","desc":"整数 ASCII 码转换为字符","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"I/O","barcolor":"","fold":false,"box":[{"title":"输入输出","fold":false,"list":[{"prefix":"","tag":"print","suffix":"(val)","desc":"打印","url":"","summary":"","reference":"","dot":""}]}]}]},{"column":[{"title":"函数","barcolor":"","fold":false,"box":[{"title":"其它","fold":false,"list":[{"prefix":"","tag":"string.dump","suffix":"(fn,[strip])","desc":"返回包含有以二进制方式表示的（一个 二进制代码块 ）指定函数的字符串。 之后可以用 load 调用这个字符串获得 该函数的副本（但是绑定新的上值）。 如果　strip 为真值， 二进制代码块不携带该函数的调试信息 （局部变量名，行号，等等。）。\n\n带上值的函数只保存上值的数目。 当（再次）加载时，这些上值被更新为 nil 的实例。 （你可以使用调试库按你需要的方式来序列化上值，并重载到函数中）","url":"https://www.jianshu.com/p/d1ea3e979ae8","summary":"","reference":"","dot":""}]}]}]},{"column":[]}]}